/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:33:54 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Spliterator;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      
      List<Class<?>> list0 = new Vector<Class<Boolean>>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class0, list0);
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = (SQLFeatureNotSupportedException)ClassUtil.throwIfRTE(sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException2);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException2);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException2);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException0);
      assertSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertNull(sQLFeatureNotSupportedException2.getMessage());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException2.toString());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertNull(jsonGenerator0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(3, classUtil_CtorArray0.length);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertNotNull(nonBlockingJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) nonBlockingJsonParser0, (JavaType) null, jsonToken0, "JSON");
      assertNotNull(mismatchedInputException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mismatchedInputException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertNotNull(object0);
      assertEquals(0L, object0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JavaType javaType0 = null;
      Class<Double> class1 = Double.class;
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class2, (Class<? extends Integer>) class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertNotNull(object0);
      assertEquals((short)0, object0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType0, class0, false);
      assertNotNull(list0);
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Character> class1 = Character.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-9), true);
      assertNotNull(uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)11, (byte)24, (byte)113, (byte) (-9), (byte)96, (byte) (-26), (byte)95, (byte)2, (byte)96}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-9), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, byteArray0.length);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      assertNotNull(uTF8JsonGenerator1);
      assertArrayEquals(new byte[] {(byte)11, (byte)24, (byte)113, (byte) (-9), (byte)96, (byte) (-26), (byte)95, (byte)2, (byte)96}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(5, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-9), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals((-9), uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(5, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, byteArray0.length);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator1);
      assertNotNull(jsonGeneratorDelegate0);
      assertArrayEquals(new byte[] {(byte)11, (byte)24, (byte)113, (byte) (-9), (byte)96, (byte) (-26), (byte)95, (byte)2, (byte)96}, byteArray0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(5, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals((-9), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals((-9), uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(5, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals((-9), jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, byteArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "net.sf.cglib.proxy.void");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.void", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, (String) null, sQLSyntaxErrorException0);
      assertNotNull(jsonMappingException0);
      
      Throwable[] throwableArray0 = jsonMappingException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.void", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, throwableArray0.length);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]FEk'd#W:>", "com.fasterxml.jackson.databind.cfg.PackageVersion", 12);
      assertNotNull(sQLTimeoutException0);
      assertEquals("]FEk'd#W:>", sQLTimeoutException0.getMessage());
      assertEquals(12, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ]FEk'd#W:>", sQLTimeoutException0.toString());
      assertEquals("com.fasterxml.jackson.databind.cfg.PackageVersion", sQLTimeoutException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      assertNotNull(batchUpdateException0);
      assertEquals("]FEk'd#W:>", sQLTimeoutException0.getMessage());
      assertEquals(12, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ]FEk'd#W:>", sQLTimeoutException0.toString());
      assertEquals("com.fasterxml.jackson.databind.cfg.PackageVersion", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ]FEk'd#W:>", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTimeoutException: ]FEk'd#W:>", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertEquals("]FEk'd#W:>", sQLTimeoutException0.getMessage());
      assertEquals(12, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ]FEk'd#W:>", sQLTimeoutException0.toString());
      assertEquals("com.fasterxml.jackson.databind.cfg.PackageVersion", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ]FEk'd#W:>", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTimeoutException: ]FEk'd#W:>", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(12, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ]FEk'd#W:>", sQLTimeoutException1.toString());
      assertEquals("]FEk'd#W:>", sQLTimeoutException1.getMessage());
      assertEquals("com.fasterxml.jackson.databind.cfg.PackageVersion", sQLTimeoutException1.getSQLState());
      
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enum0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$1549733820", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      Class<Module> class1 = Module.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = ClassUtil.nullOrToString(list0);
      assertNotNull(string0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientConnectionException0.printStackTrace();
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      String string0 = sQLNonTransientConnectionException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      
      // Undeclared exception!
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("JSON", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, "JSON");
      assertNotNull(invalidFormatException0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) invalidFormatException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Object` from String [N/A]: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class1);
      assertEquals(0, enumSet0.size());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      
      Class<?> class2 = ClassUtil.classOf(enumSet0);
      assertNotNull(class2);
      assertEquals(0, enumSet0.size());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(0, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.util.RegularEnumSet", class2.toString());
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, sQLNonTransientException0);
      assertNotNull(sQLTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      Class<SimpleType> class1 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      
      ClassUtil.verifyMustOverride(class1, simpleType0, "^v|");
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<Object> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      MockIOException mockIOException0 = new MockIOException("Zw\"\"E6Mf_oVt+$0");
      assertNotNull(mockIOException0);
      
      String string0 = mockIOException0.getMessage();
      assertNotNull(string0);
      assertEquals("Zw\"\"E6Mf_oVt+$0", string0);
      
      String string1 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      String string2 = mockIOException0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Zw\"\"E6Mf_oVt+$0", string2);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, mockIOException0);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      
      Throwable throwable0 = mockIOException0.initCause(sQLTransientConnectionException0);
      assertNotNull(throwable0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Zw\"\"E6Mf_oVt+$0", throwable0.toString());
      assertEquals("Zw\"\"E6Mf_oVt+$0", throwable0.getMessage());
      
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class1);
      assertEquals(0, enumSet0.size());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "array", (JsonLocation) null);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwIfIOE(sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertNull(sQLRecoverableException1.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Boolean> class1 = Boolean.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleAbstractTypeResolver0, class1);
      assertNotNull(jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Boolean` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-3);
      Integer integer0 = new Integer((-3));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-3), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-3), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-3), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals((-3), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2703));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals((-2703), (int)integer4);
      
      integerArray0[4] = integer4;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[3];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatus0;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.of(clientInfoStatus0, clientInfoStatusArray0);
      assertTrue(enumSet1.contains(clientInfoStatus0));
      assertNotNull(enumSet1);
      assertEquals(1, enumSet1.size());
      assertEquals(3, clientInfoStatusArray0.length);
      
      EnumSet<ClientInfoStatus> enumSet2 = EnumSet.copyOf(enumSet1);
      assertTrue(enumSet1.contains(clientInfoStatus0));
      assertTrue(enumSet2.contains(clientInfoStatus0));
      assertNotNull(enumSet2);
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet1);
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertEquals(3, clientInfoStatusArray0.length);
      
      Integer[] integerArray1 = enumSet0.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, enumSet0.size());
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      boolean boolean0 = enumSet0.add(accessPattern0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(boolean0);
      assertEquals(1, enumSet0.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(class1);
      assertEquals(1, enumSet0.size());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertNotNull(class2);
      assertSame(class2, class1);
      assertFalse(class2.isSynthetic());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      assertNotNull(typeBindings0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      assertNotNull(referenceType0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(2, javaTypeArray0.length);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      
      ResolvedRecursiveType resolvedRecursiveType1 = ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
      assertNotNull(resolvedRecursiveType1);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isArrayType());
      
      ReferenceType referenceType1 = referenceType0.withValueHandler(resolvedRecursiveType1);
      assertNotNull(referenceType1);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotSame(referenceType0, referenceType1);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertNotSame(referenceType1, referenceType0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isFinal());
      assertEquals(2, javaTypeArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ReferenceType referenceType2 = referenceType1.withTypeHandler(boolean0);
      assertNotNull(referenceType2);
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(referenceType2.isJavaLangObject());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isCollectionLikeType());
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isFinal());
      assertEquals(2, javaTypeArray0.length);
      
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withValueHandler(typeBindings0);
      assertNotNull(referenceType3);
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertFalse(referenceType2.isJavaLangObject());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType3.isFinal());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isContainerType());
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.useStaticType());
      assertTrue(referenceType3.isReferenceType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isAbstract());
      assertFalse(referenceType3.isEnumType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isJavaLangObject());
      assertFalse(referenceType3.isCollectionLikeType());
      assertTrue(referenceType3.hasHandlers());
      assertTrue(referenceType3.hasContentType());
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isFinal());
      assertEquals(2, javaTypeArray0.length);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      ResolvedRecursiveType resolvedRecursiveType2 = new ResolvedRecursiveType(class3, typeBindings0);
      assertNotNull(resolvedRecursiveType2);
      assertFalse(resolvedRecursiveType2.equals((Object)resolvedRecursiveType0));
      assertFalse(resolvedRecursiveType2.equals((Object)resolvedRecursiveType1));
      assertEquals(0, resolvedRecursiveType2.containedTypeCount());
      assertFalse(resolvedRecursiveType2.isJavaLangObject());
      assertFalse(resolvedRecursiveType2.isAbstract());
      assertFalse(resolvedRecursiveType2.isEnumType());
      assertFalse(resolvedRecursiveType2.isCollectionLikeType());
      assertFalse(resolvedRecursiveType2.isFinal());
      assertFalse(resolvedRecursiveType2.isInterface());
      assertTrue(resolvedRecursiveType2.hasContentType());
      assertFalse(resolvedRecursiveType2.hasHandlers());
      assertFalse(resolvedRecursiveType2.isContainerType());
      assertFalse(resolvedRecursiveType2.isPrimitive());
      assertTrue(resolvedRecursiveType2.isConcrete());
      assertFalse(resolvedRecursiveType2.isMapLikeType());
      assertFalse(resolvedRecursiveType2.useStaticType());
      assertFalse(resolvedRecursiveType2.hasValueHandler());
      assertFalse(resolvedRecursiveType2.isArrayType());
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withContentValueHandler(resolvedRecursiveType2);
      assertNotNull(referenceType4);
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType3));
      assertFalse(resolvedRecursiveType0.equals((Object)resolvedRecursiveType2));
      assertFalse(resolvedRecursiveType1.equals((Object)resolvedRecursiveType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType3));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertFalse(resolvedRecursiveType2.equals((Object)resolvedRecursiveType0));
      assertFalse(resolvedRecursiveType2.equals((Object)resolvedRecursiveType1));
      assertTrue(referenceType4.equals((Object)referenceType0));
      assertTrue(referenceType4.equals((Object)referenceType1));
      assertTrue(referenceType4.equals((Object)referenceType2));
      assertTrue(referenceType4.equals((Object)referenceType3));
      assertSame(class2, class3);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType4);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(resolvedRecursiveType0, resolvedRecursiveType2);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertNotSame(resolvedRecursiveType1, resolvedRecursiveType2);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType4);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType4);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType4);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertSame(class3, class2);
      assertNotSame(resolvedRecursiveType2, resolvedRecursiveType0);
      assertNotSame(resolvedRecursiveType2, resolvedRecursiveType1);
      assertNotSame(referenceType4, referenceType1);
      assertNotSame(referenceType4, referenceType2);
      assertNotSame(referenceType4, referenceType3);
      assertNotSame(referenceType4, referenceType0);
      assertFalse(referenceType2.isJavaLangObject());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType3.isFinal());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isContainerType());
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.useStaticType());
      assertTrue(referenceType3.isReferenceType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isAbstract());
      assertFalse(referenceType3.isEnumType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isJavaLangObject());
      assertFalse(referenceType3.isCollectionLikeType());
      assertTrue(referenceType3.hasHandlers());
      assertTrue(referenceType3.hasContentType());
      assertEquals(0, resolvedRecursiveType2.containedTypeCount());
      assertFalse(resolvedRecursiveType2.isJavaLangObject());
      assertFalse(resolvedRecursiveType2.isAbstract());
      assertFalse(resolvedRecursiveType2.isEnumType());
      assertFalse(resolvedRecursiveType2.isCollectionLikeType());
      assertFalse(resolvedRecursiveType2.isFinal());
      assertFalse(resolvedRecursiveType2.isInterface());
      assertTrue(resolvedRecursiveType2.hasContentType());
      assertFalse(resolvedRecursiveType2.hasHandlers());
      assertFalse(resolvedRecursiveType2.isContainerType());
      assertFalse(resolvedRecursiveType2.isPrimitive());
      assertTrue(resolvedRecursiveType2.isConcrete());
      assertFalse(resolvedRecursiveType2.isMapLikeType());
      assertFalse(resolvedRecursiveType2.useStaticType());
      assertFalse(resolvedRecursiveType2.hasValueHandler());
      assertFalse(resolvedRecursiveType2.isArrayType());
      assertFalse(referenceType4.isEnumType());
      assertTrue(referenceType4.hasValueHandler());
      assertFalse(referenceType4.isAbstract());
      assertFalse(referenceType4.isContainerType());
      assertFalse(referenceType4.isJavaLangObject());
      assertFalse(referenceType4.isAnchorType());
      assertFalse(referenceType4.useStaticType());
      assertEquals(0, referenceType4.containedTypeCount());
      assertFalse(referenceType4.isArrayType());
      assertTrue(referenceType4.isReferenceType());
      assertTrue(referenceType4.isConcrete());
      assertFalse(referenceType4.isInterface());
      assertFalse(referenceType4.isMapLikeType());
      assertFalse(referenceType4.isPrimitive());
      assertFalse(referenceType4.isCollectionLikeType());
      assertTrue(referenceType4.hasHandlers());
      assertTrue(referenceType4.hasContentType());
      assertFalse(referenceType4.isFinal());
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isFinal());
      assertEquals(2, javaTypeArray0.length);
      
      Class<MapType> class4 = MapType.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) referenceType4, (Class<?>) class4, false);
      assertNotNull(list1);
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType0.equals((Object)referenceType4));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType3));
      assertFalse(resolvedRecursiveType0.equals((Object)resolvedRecursiveType2));
      assertFalse(resolvedRecursiveType1.equals((Object)resolvedRecursiveType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType4));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType4));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType3));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType4));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertFalse(resolvedRecursiveType2.equals((Object)resolvedRecursiveType0));
      assertFalse(resolvedRecursiveType2.equals((Object)resolvedRecursiveType1));
      assertTrue(referenceType4.equals((Object)referenceType0));
      assertTrue(referenceType4.equals((Object)referenceType1));
      assertTrue(referenceType4.equals((Object)referenceType2));
      assertTrue(referenceType4.equals((Object)referenceType3));
      assertSame(class2, class3);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType4);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(resolvedRecursiveType0, resolvedRecursiveType2);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertNotSame(resolvedRecursiveType1, resolvedRecursiveType2);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType4);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType4);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType4);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertSame(class3, class2);
      assertNotSame(resolvedRecursiveType2, resolvedRecursiveType0);
      assertNotSame(resolvedRecursiveType2, resolvedRecursiveType1);
      assertNotSame(referenceType4, referenceType1);
      assertNotSame(referenceType4, referenceType2);
      assertNotSame(referenceType4, referenceType3);
      assertNotSame(referenceType4, referenceType0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType2.isJavaLangObject());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType3.isFinal());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isContainerType());
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.useStaticType());
      assertTrue(referenceType3.isReferenceType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isAbstract());
      assertFalse(referenceType3.isEnumType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isJavaLangObject());
      assertFalse(referenceType3.isCollectionLikeType());
      assertTrue(referenceType3.hasHandlers());
      assertTrue(referenceType3.hasContentType());
      assertEquals(0, resolvedRecursiveType2.containedTypeCount());
      assertFalse(resolvedRecursiveType2.isJavaLangObject());
      assertFalse(resolvedRecursiveType2.isAbstract());
      assertFalse(resolvedRecursiveType2.isEnumType());
      assertFalse(resolvedRecursiveType2.isCollectionLikeType());
      assertFalse(resolvedRecursiveType2.isFinal());
      assertFalse(resolvedRecursiveType2.isInterface());
      assertTrue(resolvedRecursiveType2.hasContentType());
      assertFalse(resolvedRecursiveType2.hasHandlers());
      assertFalse(resolvedRecursiveType2.isContainerType());
      assertFalse(resolvedRecursiveType2.isPrimitive());
      assertTrue(resolvedRecursiveType2.isConcrete());
      assertFalse(resolvedRecursiveType2.isMapLikeType());
      assertFalse(resolvedRecursiveType2.useStaticType());
      assertFalse(resolvedRecursiveType2.hasValueHandler());
      assertFalse(resolvedRecursiveType2.isArrayType());
      assertFalse(referenceType4.isEnumType());
      assertTrue(referenceType4.hasValueHandler());
      assertFalse(referenceType4.isAbstract());
      assertFalse(referenceType4.isContainerType());
      assertFalse(referenceType4.isJavaLangObject());
      assertFalse(referenceType4.isAnchorType());
      assertFalse(referenceType4.useStaticType());
      assertEquals(0, referenceType4.containedTypeCount());
      assertFalse(referenceType4.isArrayType());
      assertTrue(referenceType4.isReferenceType());
      assertTrue(referenceType4.isConcrete());
      assertFalse(referenceType4.isInterface());
      assertFalse(referenceType4.isMapLikeType());
      assertFalse(referenceType4.isPrimitive());
      assertFalse(referenceType4.isCollectionLikeType());
      assertTrue(referenceType4.hasHandlers());
      assertTrue(referenceType4.hasContentType());
      assertFalse(referenceType4.isFinal());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(2, javaTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Double");
      assertFalse(boolean0);
      
      Class<SimpleModule> class2 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.module.SimpleModule()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.module.SimpleModule()", constructor0.toString());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.module.SimpleModule()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.module.SimpleModule()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      
      Annotation[] annotationArray2 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray2);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(0, annotationArray2.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      
      String string1 = constructor0.toGenericString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("protected java.lang.reflect.AccessibleObject()", string1);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertNotNull(typeArray0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(0, typeArray0.length);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      
      String string2 = ClassUtil.nonNullString("protected java.lang.reflect.AccessibleObject()");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("protected java.lang.reflect.AccessibleObject()", string2);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0);
      assertNotNull(objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)deserializationContext0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Lb=[(x<wq>");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("Lb=[(x<wq>", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Lb=[(x<wq>", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLException sQLException0 = new SQLException("+Q7BSQY@h9", "Lb=[(x<wq>", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLException0);
      assertEquals("Lb=[(x<wq>", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Lb=[(x<wq>", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Lb=[(x<wq>", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("+Q7BSQY@h9", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: +Q7BSQY@h9", sQLException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("Lb=[(x<wq>", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Lb=[(x<wq>", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Lb=[(x<wq>", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("+Q7BSQY@h9", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: +Q7BSQY@h9", sQLException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLException: +Q7BSQY@h9", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLException: +Q7BSQY@h9", sQLIntegrityConstraintViolationException0.toString());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_ABSENT;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1);
      assertNotNull(jsonInclude_Value0);
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertNotSame(jsonInclude_Include0, jsonInclude_Include1);
      assertNotSame(jsonInclude_Include1, jsonInclude_Include0);
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.NON_DEFAULT, jsonInclude_Value0.getValueInclusion());
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      assertNotNull(objectMapper1);
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(jsonInclude_Include0, jsonInclude_Include1);
      assertNotSame(jsonInclude_Include1, jsonInclude_Include0);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.NON_DEFAULT, jsonInclude_Value0.getValueInclusion());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      assertNotNull(objectMapper2);
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(jsonInclude_Include0, jsonInclude_Include1);
      assertNotSame(jsonInclude_Include1, jsonInclude_Include0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.NON_DEFAULT, jsonInclude_Value0.getValueInclusion());
      
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
      ObjectMapper objectMapper3 = objectMapper2.configure(mapperFeature0, true);
      assertNotNull(objectMapper3);
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(jsonInclude_Include0, jsonInclude_Include1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertNotSame(jsonInclude_Include1, jsonInclude_Include0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.NON_DEFAULT, jsonInclude_Value0.getValueInclusion());
      
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility3 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      assertNotNull(jsonAutoDetect_Value0);
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility2));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility1));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility3));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility2));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility3));
      assertFalse(jsonAutoDetect_Visibility2.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility2.equals((Object)jsonAutoDetect_Visibility1));
      assertFalse(jsonAutoDetect_Visibility3.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility3.equals((Object)jsonAutoDetect_Visibility1));
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility0);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility0);
      assertNotSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility1);
      assertSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility0);
      assertSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility1);
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NON_PRIVATE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NON_PRIVATE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      
      ObjectMapper objectMapper4 = objectMapper3.setDefaultVisibility(jsonAutoDetect_Value0);
      assertNotNull(objectMapper4);
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility2));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility1));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility3));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility2));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility3));
      assertFalse(jsonAutoDetect_Visibility2.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility2.equals((Object)jsonAutoDetect_Visibility1));
      assertFalse(jsonAutoDetect_Visibility3.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility3.equals((Object)jsonAutoDetect_Visibility1));
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(jsonInclude_Include0, jsonInclude_Include1);
      assertNotSame(jsonInclude_Include1, jsonInclude_Include0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility0);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility0);
      assertNotSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility1);
      assertSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility0);
      assertSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.NON_DEFAULT, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NON_PRIVATE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NON_PRIVATE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      ObjectMapper objectMapper5 = objectMapper4.configure(serializationFeature0, true);
      assertNotNull(objectMapper5);
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility2));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility1));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility3));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility2));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility3));
      assertFalse(jsonAutoDetect_Visibility2.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility2.equals((Object)jsonAutoDetect_Visibility1));
      assertFalse(jsonAutoDetect_Visibility3.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility3.equals((Object)jsonAutoDetect_Visibility1));
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(jsonInclude_Include0, jsonInclude_Include1);
      assertNotSame(jsonInclude_Include1, jsonInclude_Include0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper0);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility0);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility0);
      assertNotSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility1);
      assertSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility0);
      assertSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper4);
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.NON_DEFAULT, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NON_PRIVATE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NON_PRIVATE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      
      ObjectReader objectReader0 = objectMapper5.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility2));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility1));
      assertFalse(jsonAutoDetect_Visibility0.equals((Object)jsonAutoDetect_Visibility3));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility2));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility1.equals((Object)jsonAutoDetect_Visibility3));
      assertFalse(jsonAutoDetect_Visibility2.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility2.equals((Object)jsonAutoDetect_Visibility1));
      assertFalse(jsonAutoDetect_Visibility3.equals((Object)jsonAutoDetect_Visibility0));
      assertFalse(jsonAutoDetect_Visibility3.equals((Object)jsonAutoDetect_Visibility1));
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(jsonInclude_Include0, jsonInclude_Include1);
      assertNotSame(jsonInclude_Include1, jsonInclude_Include0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper0);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1);
      assertNotSame(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility0);
      assertNotSame(jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility0);
      assertNotSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility1);
      assertSame(jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3);
      assertNotSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility0);
      assertSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility2);
      assertNotSame(jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper4);
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.NON_DEFAULT, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NON_PRIVATE, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.NON_PRIVATE, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      
      Class<Double> class1 = Double.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(2, typeArray0.length);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(class0);
      assertNotNull(javaType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      
      Class<Double> class1 = Double.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType0, class1, false);
      assertNotNull(list0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = "SWvQoMgt<";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("SWvQoMgt<");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: SWvQoMgt<", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("SWvQoMgt<", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLTransactionRollbackException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLTransactionRollbackException: SWvQoMgt<", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("SWvQoMgt<", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("SWvQoMgt<", sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals("java.sql.SQLTransactionRollbackException: SWvQoMgt<", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("SWvQoMgt<", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("SWvQoMgt<", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: SWvQoMgt<", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      
      // Undeclared exception!
      try { 
        sQLTransactionRollbackException1.initCause(sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransactionRollbackException: SWvQoMgt<
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 9;
      intArray0[2] = (-641314725);
      intArray0[3] = (-4);
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      intArray0[4] = (-2292);
      intArray0[5] = 622;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("u8;B", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1), 9, (-641314725), (-4), (-2292), 622}, intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("u8;B", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: u8;B", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(6, intArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("IZ{kspe7:7lpj8", "IZ{kspe7:7lpj8", batchUpdateException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertArrayEquals(new int[] {(-1), 9, (-641314725), (-4), (-2292), 622}, intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("u8;B", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: u8;B", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: IZ{kspe7:7lpj8", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("IZ{kspe7:7lpj8", sQLTransactionRollbackException0.getSQLState());
      assertEquals("IZ{kspe7:7lpj8", sQLTransactionRollbackException0.getMessage());
      assertEquals(6, intArray0.length);
      
      SQLException sQLException0 = new SQLException(sQLTransactionRollbackException0);
      assertNotNull(sQLException0);
      assertArrayEquals(new int[] {(-1), 9, (-641314725), (-4), (-2292), 622}, intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("u8;B", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: u8;B", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: IZ{kspe7:7lpj8", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("IZ{kspe7:7lpj8", sQLTransactionRollbackException0.getSQLState());
      assertEquals("IZ{kspe7:7lpj8", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: java.sql.SQLTransactionRollbackException: IZ{kspe7:7lpj8", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: IZ{kspe7:7lpj8", sQLException0.getMessage());
      assertEquals(6, intArray0.length);
      
      MockError mockError0 = new MockError("IZ{kspe7:7lpj8", sQLException0);
      assertNotNull(mockError0);
      assertArrayEquals(new int[] {(-1), 9, (-641314725), (-4), (-2292), 622}, intArray0);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      boolean boolean0 = enumSet0.add(accessPattern1);
      assertTrue(enumSet0.contains(accessPattern0));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern1, accessPattern0);
      assertTrue(boolean0);
      assertEquals(2, enumSet0.size());
      
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertNotNull(enumSet1);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("JP;NDX");
      assertNotNull(mockRuntimeException0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.java.lang.RuntimeException", "2}##<_F[", mockIOException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("net.sf.cglib.proxy.java.lang.RuntimeException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("2}##<_F[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.java.lang.RuntimeException", sQLNonTransientConnectionException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(":*,&Y.QXi", ":*,&Y.QXi", sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("net.sf.cglib.proxy.java.lang.RuntimeException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("2}##<_F[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.java.lang.RuntimeException", sQLNonTransientConnectionException0.toString());
      assertEquals(":*,&Y.QXi", sQLTransactionRollbackException0.getMessage());
      assertEquals(":*,&Y.QXi", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: :*,&Y.QXi", sQLTransactionRollbackException0.toString());
      
      MockThrowable mockThrowable0 = new MockThrowable("net.sf.cglib.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0);
      assertNotNull(mockThrowable0);
      
      MockError mockError0 = new MockError(mockThrowable0);
      assertNotNull(mockError0);
      
      Throwable[] throwableArray0 = mockError0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("net.sf.cglib.proxy.java.lang.RuntimeException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("2}##<_F[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.java.lang.RuntimeException", sQLNonTransientConnectionException0.toString());
      assertEquals(":*,&Y.QXi", sQLTransactionRollbackException0.getMessage());
      assertEquals(":*,&Y.QXi", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: :*,&Y.QXi", sQLTransactionRollbackException0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: net.sf.cglib.proxy.java.lang.RuntimeException", mockThrowable0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.RuntimeException", mockThrowable0.getMessage());
      assertEquals(0, throwableArray0.length);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(mockError0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertNotNull(enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(class0);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertNotSame(enumSet0, enumSet1);
      assertEquals(1, enumSet0.size());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertEquals(16385, class0.getModifiers());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<BooleanNode> class0 = BooleanNode.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-586);
      intArray0[1] = 1222;
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("net.sf.cglib.proxy.java.lang.Byte");
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockError0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*qA=zYH~ge{3&FT8G", jsonMappingException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("*qA=zYH~ge{3&FT8G", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: *qA=zYH~ge{3&FT8G", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibenate.proxy.", "net.sf.cglib.proxy.java.lang.Byte", intArray0, sQLIntegrityConstraintViolationException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-586), 1222}, intArray0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("*qA=zYH~ge{3&FT8G", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: *qA=zYH~ge{3&FT8G", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: org.hibenate.proxy.", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.java.lang.Byte", batchUpdateException0.getSQLState());
      assertEquals("org.hibenate.proxy.", batchUpdateException0.getMessage());
      assertEquals(2, intArray0.length);
      
      SQLDataException sQLDataException0 = new SQLDataException("org.hibenate.proxy.", batchUpdateException0);
      assertNotNull(sQLDataException0);
      assertArrayEquals(new int[] {(-586), 1222}, intArray0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("*qA=zYH~ge{3&FT8G", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: *qA=zYH~ge{3&FT8G", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: org.hibenate.proxy.", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.java.lang.Byte", batchUpdateException0.getSQLState());
      assertEquals("org.hibenate.proxy.", batchUpdateException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: org.hibenate.proxy.", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("org.hibenate.proxy.", sQLDataException0.getMessage());
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "*qA=zYH~ge{3&FT8G");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<InputStream> class1 = InputStream.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class2, list0);
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(8, list1.size());
      assertFalse(list1.isEmpty());
      
      Class<String> class3 = String.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)52, (byte) (-85), (byte)32, (byte)16, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "java.lang.Object");
      assertNotNull(jsonMappingException0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Object", jsonMappingException0);
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Class<NoClass> class1 = NoClass.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      
      String string0 = "Y<kOH?Jk/j&f'#fh#|";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "gf@)V|_r2VRe`hd^sPh");
      assertNotNull(jsonMappingException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("lQNZ'u9#Ae3GG", "Y<kOH?Jk/j&f'#fh#|", jsonMappingException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Y<kOH?Jk/j&f'#fh#|", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: lQNZ'u9#Ae3GG", sQLSyntaxErrorException0.toString());
      assertEquals("lQNZ'u9#Ae3GG", sQLSyntaxErrorException0.getMessage());
      
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // gf@)V|_r2VRe`hd^sPh
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      Class<Boolean> class1 = Boolean.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("boolean", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-5);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)6, (byte)2, (byte) (-5)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfIOE(sQLWarning0);
      assertNotNull(sQLWarning1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning1.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      
      sQLWarning0.setNextException(sQLTransientConnectionException0);
      assertSame(sQLWarning0, sQLWarning1);
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      
      Class<CollectionType> class0 = CollectionType.class;
      SQLWarning sQLWarning2 = (SQLWarning)sQLWarning0.fillInStackTrace();
      assertNotNull(sQLWarning2);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning0, sQLWarning2);
      assertSame(sQLWarning2, sQLWarning1);
      assertSame(sQLWarning2, sQLWarning0);
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning2.toString());
      assertNull(sQLWarning2.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLWarning2.getMessage());
      assertEquals(0, sQLWarning2.getErrorCode());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      
      EnumSet<AccessPattern> enumSet1 = EnumSet.of(accessPattern0);
      assertTrue(enumSet1.contains(accessPattern0));
      assertNotNull(enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet1.size());
      
      EnumSet<AccessPattern> enumSet2 = enumSet0.clone();
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern0));
      assertNotNull(enumSet2);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet2.size());
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumSet0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(class2);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertFalse(class2.equals((Object)class1));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(class2, class1);
      assertEquals(1, enumSet0.size());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      int int0 = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, (-871), 0, sQLRecoverableException0);
      assertNotNull(dataTruncation0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      DataTruncation dataTruncation1 = (DataTruncation)dataTruncation0.fillInStackTrace();
      assertNotNull(dataTruncation1);
      assertSame(dataTruncation0, dataTruncation1);
      assertSame(dataTruncation1, dataTruncation0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet1 = EnumSet.of(accessPattern1);
      assertTrue(enumSet1.contains(accessPattern1));
      assertFalse(enumSet1.contains(accessPattern0));
      assertNotNull(enumSet1);
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet1.size());
      
      EnumSet<AccessPattern> enumSet2 = enumSet1.clone();
      assertTrue(enumSet1.contains(accessPattern1));
      assertFalse(enumSet1.contains(accessPattern0));
      assertFalse(enumSet2.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern1));
      assertNotNull(enumSet2);
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumSet0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertFalse(enumSet0.contains(accessPattern1));
      assertNotNull(class2);
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertSame(class2, class1);
      assertEquals(1, enumSet0.size());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "net.sf.cglib.proxy.java.lang.String");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      assertNotNull(enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class1);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertNotSame(enumSet0, enumSet1);
      assertEquals(0, enumSet0.size());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
      
      Class<Void> class1 = Void.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("void", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean0);
      assertFalse(class1.isAnnotation());
      assertEquals("void", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Constructor<MapLikeType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Sub-class %s (of class %s) must override method '%s'", "Sub-class %s (of class %s) must override method '%s'", 84);
      assertNotNull(sQLWarning0);
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Sub-class %s (of class %s) must override method '%s'", sQLWarning0.toString());
      assertEquals(84, sQLWarning0.getErrorCode());
      
      int[] intArray0 = new int[3];
      sQLWarning0.printStackTrace();
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Sub-class %s (of class %s) must override method '%s'", sQLWarning0.toString());
      assertEquals(84, sQLWarning0.getErrorCode());
      
      intArray0[0] = 84;
      intArray0[1] = 84;
      intArray0[2] = 84;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Sub-class %s (of class %s) must override method '%s'", "java.lang.reflect.Ac", intArray0, sQLWarning0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {84, 84, 84}, intArray0);
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Sub-class %s (of class %s) must override method '%s'", sQLWarning0.toString());
      assertEquals(84, sQLWarning0.getErrorCode());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.lang.reflect.Ac", batchUpdateException0.getSQLState());
      assertEquals(3, intArray0.length);
      
      SQLWarning sQLWarning1 = (SQLWarning)sQLWarning0.initCause(batchUpdateException0);
      assertNotNull(sQLWarning1);
      assertArrayEquals(new int[] {84, 84, 84}, intArray0);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Sub-class %s (of class %s) must override method '%s'", sQLWarning0.toString());
      assertEquals(84, sQLWarning0.getErrorCode());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Sub-class %s (of class %s) must override method '%s'", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.lang.reflect.Ac", batchUpdateException0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning1.getMessage());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: Sub-class %s (of class %s) must override method '%s'", sQLWarning1.toString());
      assertEquals(84, sQLWarning1.getErrorCode());
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      assertNotNull(filterOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, filterOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON");
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: JSON", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("JSON", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) filterOutputStream0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.sql.ClientInfoStatus");
      assertFalse(boolean0);
      
      Float float0 = new Float((-1.1507296273716512));
      assertNotNull(float0);
      assertEquals((-1.1507297F), (float)float0, 0.01F);
      
      String string0 = ClassUtil.getClassDescription(float0);
      assertNotNull(string0);
      assertEquals("`java.lang.Float`", string0);
      
      String string1 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      ReferenceType referenceType0 = ClassUtil.nonNull((ReferenceType) null, (ReferenceType) null);
      assertNull(referenceType0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertNotNull(string0);
      assertEquals("``", string0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      String string1 = ClassUtil.classNameOf("[null]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`java.lang.String`", string1);
      
      Class<ArrayType> class0 = ArrayType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vals", "FAIL");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertNotNull(list0);
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class2);
      assertNotNull(methodArray0);
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertEquals(0, methodArray0.length);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertNotNull(fieldArray0);
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<BooleanNode> class0 = BooleanNode.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.node.BooleanNode`", string0);
      
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", 19);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(19, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(19, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException1.toString());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(19, sQLFeatureNotSupportedException1.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "KNS/,*pkVH8uC");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<NoClass> class2 = NoClass.class;
      Class<Void> class3 = Void.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Iterator<Double> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) iterator0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      MockException mockException0 = new MockException("net.sf.cglib.proxy.java.lang.reflect.AccessibleObject");
      assertNotNull(mockException0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE(mockException0);
      assertNotNull(throwable0);
      assertSame(mockException0, throwable0);
      assertSame(throwable0, mockException0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(17, methodArray0.length);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Long> class2 = Long.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertTrue(class3.isPrimitive());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals("long", class3.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Float> class2 = Float.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertEquals("float", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("array", "frQqt}-a5");
      assertNotNull(sQLRecoverableException0);
      assertEquals("frQqt}-a5", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: array", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("array", sQLRecoverableException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      assertEquals("frQqt}-a5", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: array", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("array", sQLRecoverableException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(101, true, false, 1584, 1584, sQLRecoverableException0);
      assertNotNull(dataTruncation0);
      assertEquals("frQqt}-a5", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: array", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("array", sQLRecoverableException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals("frQqt}-a5", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: array", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("array", sQLRecoverableException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertNotNull(objectMapper1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonSetter jsonSetter0 = mock(JsonSetter.class, new ViolatedAssumptionAnswer());
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      assertNotNull(jsonSetter_Value0);
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value0);
      assertNotNull(objectMapper3);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance();
      assertNotNull(simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      
      ObjectMapper objectMapper4 = objectMapper3.setDateFormat(simpleDateFormat0);
      assertNotNull(objectMapper4);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper4.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper4);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper4.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(objectMapper0.equals((Object)objectMapper4));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper4.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper4);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(jsonSetter_Value0.nonDefaultContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
      assertNull(jsonSetter_Value0.nonDefaultValueNulls());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4870);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      
      JavaType javaType0 = placeholderForType0.actualType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      
      Class<?> class2 = ClassUtil.rawClass((JavaType) null);
      assertNull(class2);
      
      Class<Double> class3 = Double.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(placeholderForType0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.PlaceholderForType`", string0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      System.setCurrentTimeMillis(0L);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
      
      Class<Double> class2 = Double.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Short> class2 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(23, methodArray0.length);
      
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      try { 
        constructor0.newInstance(methodArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonGenerator_Feature0, false);
      assertNotNull(jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      
      Class<NoClass> class1 = NoClass.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<CollectionType> class2 = CollectionType.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertNotNull(class3);
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      
      DeserializationContext deserializationContext0 = null;
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.backticked((String) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      Class<CollectionType> class0 = CollectionType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      Double double0 = new Double((-1634.061930641844));
      assertNotNull(double0);
      assertEquals((-1634.061930641844), (double)double0, 0.01);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory1, true);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, SimpleType> hashMap0 = new HashMap<String, SimpleType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      assertNotNull(simpleFilterProvider0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      deserializationFeatureArray0[1] = deserializationFeature1;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectMapper3);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertEquals(2, deserializationFeatureArray0.length);
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper4 = objectMapper3.setSerializationInclusion(jsonInclude_Include0);
      assertNotNull(objectMapper4);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper4);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertEquals(2, deserializationFeatureArray0.length);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper4, mockFileOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, deserializationFeatureArray0.length);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Ke#^(");
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Ke#^(", sQLNonTransientException0.toString());
      assertEquals("Ke#^(", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockFileOutputStream0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: Ke#^(
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", mockIOException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      
      Throwable throwable0 = mockIOException0.initCause(sQLTransactionRollbackException0);
      assertNotNull(throwable0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      
      String string0 = mockIOException0.getLocalizedMessage();
      assertNull(string0);
      
      MockIOException mockIOException1 = new MockIOException((String) null);
      assertNotNull(mockIOException1);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE(throwable0, (String) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-235));
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNotNull(string0);
      assertEquals("enum", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      String string0 = mockIOException0.getLocalizedMessage();
      assertNull(string0);
      
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      assertNotNull(throwable0);
      assertSame(mockIOException0, throwable0);
      assertSame(throwable0, mockIOException0);
      
      try { 
        ClassUtil.throwIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.nonNullString("%Q{&[R/\"qO|");
      assertNotNull(string0);
      assertEquals("%Q{&[R/\"qO|", string0);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = ClassUtil.backticked("%Q{&[R/\"qO|");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`%Q{&[R/\"qO|`", string2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.addSuppressed(mockIOException0);
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException0);
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      assertNotNull(collectionLikeType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      assertNotNull(mapLikeType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      
      Class<?> class1 = ClassUtil.rawClass(mapLikeType0);
      assertNotNull(class1);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      Class<Byte> class1 = Byte.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertEquals("byte", class2.toString());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      
      Class<IOException> class3 = IOException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertEquals("byte", class2.toString());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = ClassUtil.backticked("ogruu,S&AJ_P];RI:os");
      assertNotNull(string0);
      assertEquals("`ogruu,S&AJ_P];RI:os`", string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      String string1 = ClassUtil.getPackageName(class0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.lang", string1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L`QB");
      assertFalse(boolean0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "java.lang");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.JsonMappingException) must override method 'java.lang'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, (Class<?>) null, false);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertSame(class2, class1);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      assertSame(class1, class2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean1 == boolean0);
      assertSame(class2, class1);
      assertTrue(boolean1);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string0 = "elementType";
      String string1 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "UTC_MILLISEC");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("UTC_MILLISEC", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, object0, "UTC_MILLISEC");
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("UTC_MILLISEC", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientConnectionException0);
      assertNotNull(mockIOException0);
      
      String string0 = mockIOException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals("java.sql.SQLNonTransientConnectionException", string0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      int int0 = 1694;
      Throwable throwable0 = mockIOException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(mockIOException0, throwable0);
      assertSame(throwable0, mockIOException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      JsonFactory jsonFactory4 = jsonFactory3.copy();
      assertNotNull(jsonFactory4);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory4.createGenerator((DataOutput) null);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertSame(class2, class1);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      assertSame(class1, class2);
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class3);
      assertFalse(boolean0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertSame(class2, class1);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Integer> class2 = Integer.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.io.IOException`", string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`java.io.IOException`");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("`java.io.IOException`", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: `java.io.IOException`", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("`java.io.IOException`", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: `java.io.IOException`", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("`java.io.IOException`", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: `java.io.IOException`", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      
      Class<Character> class1 = Character.class;
      boolean boolean2 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<Double> class2 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) typeBindings0, (Object) "`java.io.IOException`");
      assertNotNull(arrayType0);
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      
      TypeBindings typeBindings1 = arrayType0.getBindings();
      assertNotNull(typeBindings1);
      assertSame(typeBindings0, typeBindings1);
      assertSame(typeBindings1, typeBindings0);
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      
      JavaType[] javaTypeArray0 = new JavaType[2];
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 14);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      assertNull(javaType0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = (JavaType) simpleType0;
      JavaType javaType1 = resolvedRecursiveType0.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      assertNull(javaType1);
      assertSame(typeBindings0, typeBindings1);
      assertSame(typeBindings1, typeBindings0);
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(2, javaTypeArray0.length);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class1, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      Class<Integer> class2 = Integer.class;
      boolean boolean3 = ClassUtil.isObjectOrPrimitive(class2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Class<MapType> class3 = MapType.class;
      String string1 = ClassUtil.getPackageName(class3);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("com.fasterxml.jackson.databind.type", string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
      
      Class<Void> class1 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertNotNull(objectMapper1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      assertNotNull(serializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, serializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, serializerProvider0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "=I@riJS&");
      assertNotNull(jsonMappingException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)serializerProvider0));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, serializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, serializerProvider0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      
      boolean boolean0 = ClassUtil.hasClass(jsonMappingException0, class1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)serializerProvider0));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, serializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, serializerProvider0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl0);
      assertTrue(boolean0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      assertNotNull(mockIOException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      assertNotNull(throwable0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(mockIOException0, throwable0);
      assertSame(throwable0, mockIOException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(";n4s\"kv.|z?8L93", jsonMappingException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(";n4s\"kv.|z?8L93", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ;n4s\"kv.|z?8L93", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.JsonMappingException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      Class<ArrayType> class3 = ArrayType.class;
      boolean boolean1 = ClassUtil.hasClass(list0, class3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<?> class4 = ClassUtil.getEnclosingClass(class1);
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, " is not a primitive type", (String) null);
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException1);
      assertNotNull(throwable0);
      assertSame(jsonMappingException1, throwable0);
      assertSame(throwable0, jsonMappingException1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      JsonMappingException jsonMappingException1 = enumMap0.put(accessPattern0, jsonMappingException0);
      assertNull(jsonMappingException1);
      assertEquals(1, enumMap0.size());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertNotNull(class1);
      assertEquals(1, enumMap0.size());
      assertFalse(class1.isInterface());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = enumMap0.put(accessPattern0, jsonMappingException0);
      assertNull(jsonMappingException1);
      assertEquals(1, enumMap0.size());
      
      Short short0 = new Short((short) (-1597));
      assertNotNull(short0);
      assertEquals((short) (-1597), (short)short0);
      
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      BiFunction<Object, IOException, JsonMappingException> biFunction0 = (BiFunction<Object, IOException, JsonMappingException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JsonMappingException jsonMappingException2 = enumMap0.computeIfPresent(accessPattern1, biFunction0);
      assertNull(jsonMappingException2);
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertNotSame(accessPattern1, accessPattern0);
      assertEquals(1, enumMap0.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertNotNull(class1);
      assertEquals(1, enumMap0.size());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      Short short0 = new Short((short) (-1597));
      assertNotNull(short0);
      assertEquals((short) (-1597), (short)short0);
      
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      BiFunction<Object, IOException, JsonMappingException> biFunction0 = (BiFunction<Object, IOException, JsonMappingException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JsonMappingException jsonMappingException0 = enumMap0.computeIfPresent(accessPattern0, biFunction0);
      assertNull(jsonMappingException0);
      assertEquals(0, enumMap0.size());
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, true);
      assertNotNull(list0);
      assertSame(class2, class1);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      boolean boolean2 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(class1, class2);
      assertFalse(boolean2);
      
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertSame(class2, class1);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertSame(class2, class1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      assertSame(class1, class2);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class2);
      assertSame(class2, class1);
      assertFalse(boolean0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      assertSame(class2, class1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(4, deserializationFeatureArray0.length);
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(4, deserializationFeatureArray0.length);
      
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues((InjectableValues) null);
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(4, deserializationFeatureArray0.length);
      
      ObjectMapper objectMapper4 = objectMapper3.setLocale((Locale) null);
      assertNotNull(objectMapper4);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(4, deserializationFeatureArray0.length);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper5 = objectMapper4.enable(jsonParser_FeatureArray0);
      assertNotNull(objectMapper5);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(2, jsonParser_FeatureArray0.length);
      assertEquals(4, deserializationFeatureArray0.length);
      
      ObjectReader objectReader0 = objectMapper5.readerFor(class0);
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper5);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(2, jsonParser_FeatureArray0.length);
      assertEquals(4, deserializationFeatureArray0.length);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Double> class1 = Double.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      
      JsonFactory jsonFactory4 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotNull(jsonFactory4);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      assertNotNull(objectMapper0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      assertNotNull(mockIOException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      formatFeatureArray0[5] = formatFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      assertNotNull(objectReader1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(6, formatFeatureArray0.length);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader2 = objectReader1.withFeatures(deserializationFeatureArray0);
      assertNotNull(objectReader2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(6, formatFeatureArray0.length);
      assertEquals(0, deserializationFeatureArray0.length);
      
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectReader2);
      assertNotNull(jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(6, formatFeatureArray0.length);
      assertEquals(0, deserializationFeatureArray0.length);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory4);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(6, formatFeatureArray0.length);
      assertEquals(0, deserializationFeatureArray0.length);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<Integer> class2 = Integer.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Long> class3 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, (Class<?>) null, true);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      Class<Long> class4 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor0);
      assertSame(class4, class3);
      
      String string0 = ClassUtil.canBeABeanType(class3);
      assertNull(string0);
      assertSame(class3, class4);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("b-,^(sU?cE#TKN'VD", "z7gQH4)lKYZfZ", (-2663));
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.toString());
      assertEquals((-2663), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("z7gQH4)lKYZfZ", sQLTransactionRollbackException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("z7gQH4)lKYZfZ", "b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.toString());
      assertEquals((-2663), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("z7gQH4)lKYZfZ", sQLTransactionRollbackException0.getSQLState());
      assertEquals("b-,^(sU?cE#TKN'VD", sQLRecoverableException0.getSQLState());
      assertEquals("z7gQH4)lKYZfZ", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: z7gQH4)lKYZfZ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.toString());
      assertEquals((-2663), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("z7gQH4)lKYZfZ", sQLTransactionRollbackException0.getSQLState());
      assertEquals("b-,^(sU?cE#TKN'VD", sQLRecoverableException0.getSQLState());
      assertEquals("z7gQH4)lKYZfZ", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: z7gQH4)lKYZfZ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" p", sQLRecoverableException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.toString());
      assertEquals((-2663), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("z7gQH4)lKYZfZ", sQLTransactionRollbackException0.getSQLState());
      assertEquals("b-,^(sU?cE#TKN'VD", sQLRecoverableException0.getSQLState());
      assertEquals("z7gQH4)lKYZfZ", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: z7gQH4)lKYZfZ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException:  p", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(" p", sQLNonTransientException0.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) sQLNonTransientException0);
      assertNotNull(jsonMappingException0);
      assertEquals("b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.toString());
      assertEquals((-2663), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("z7gQH4)lKYZfZ", sQLTransactionRollbackException0.getSQLState());
      assertEquals("b-,^(sU?cE#TKN'VD", sQLRecoverableException0.getSQLState());
      assertEquals("z7gQH4)lKYZfZ", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: z7gQH4)lKYZfZ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException:  p", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(" p", sQLNonTransientException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertEquals("b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException0.toString());
      assertEquals((-2663), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("z7gQH4)lKYZfZ", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException1.toString());
      assertEquals("z7gQH4)lKYZfZ", sQLTransactionRollbackException1.getSQLState());
      assertEquals("b-,^(sU?cE#TKN'VD", sQLTransactionRollbackException1.getMessage());
      assertEquals((-2663), sQLTransactionRollbackException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.io.IOException`", string0);
      
      Iterator<HashMap<Character, Character>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class1 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("WRAP_ROOT_VALUE");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation((-2194), true, false, (-2194), 1065);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "`java.io.IOException`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `java.io.IOException`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ClassUtil.backticked("primitive");
      assertNotNull(string0);
      assertEquals("`primitive`", string0);
      
      boolean boolean0 = false;
      Class<CollectionType> class2 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class2, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("vals");
      assertNotNull(string0);
      assertEquals("vals", string0);
      
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = ClassUtil.backticked("primitive");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`primitive`", string1);
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, true);
      assertNotNull(list0);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Long> class3 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      
      String string2 = ClassUtil.canBeABeanType(class0);
      assertNull(string2);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("primitive", "`primitive`", (-605166913));
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("primitive", sQLTransactionRollbackException0.getMessage());
      assertEquals((-605166913), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`primitive`", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: primitive", sQLTransactionRollbackException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("vals", "`primitive`", sQLTransactionRollbackException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("primitive", sQLTransactionRollbackException0.getMessage());
      assertEquals((-605166913), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`primitive`", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: primitive", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("`primitive`", sQLRecoverableException0.getSQLState());
      assertEquals("vals", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: vals", sQLRecoverableException0.toString());
      
      Class<AccessPattern> class4 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class4);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      EnumMap<AccessPattern, JsonMappingException> enumMap1 = new EnumMap<AccessPattern, JsonMappingException>(enumMap0);
      assertNotNull(enumMap1);
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      
      boolean boolean1 = enumMap1.remove((Object) "vals", (Object) list0);
      assertTrue(boolean1 == boolean0);
      assertTrue(enumMap0.equals((Object)enumMap1));
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap1, enumMap0);
      assertFalse(boolean1);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(enumMap1);
      assertNotNull(class5);
      assertTrue(enumMap0.equals((Object)enumMap1));
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap1, enumMap0);
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertFalse(class5.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class5.toString());
      assertTrue(class5.isEnum());
      assertEquals(16385, class5.getModifiers());
      assertFalse(class5.isAnnotation());
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      
      String string3 = ClassUtil.nonNullString("vals");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("vals", string3);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      Short short0 = new Short((short) (-1597));
      assertNotNull(short0);
      assertEquals((short) (-1597), (short)short0);
      
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      BiFunction<Object, IOException, JsonMappingException> biFunction0 = (BiFunction<Object, IOException, JsonMappingException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JsonMappingException jsonMappingException0 = enumMap0.computeIfPresent(accessPattern0, biFunction0);
      assertNull(jsonMappingException0);
      assertEquals(0, enumMap0.size());
      
      boolean boolean1 = enumMap0.remove((Object) class0, (Object) short0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, enumMap0.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertNotNull(class1);
      assertEquals(0, enumMap0.size());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNotNull(string0);
      assertEquals("primitive", string0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isSynthetic());
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isSynthetic());
      
      Class<Integer> class2 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(3, methodArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Double> class4 = Double.class;
      boolean boolean2 = ClassUtil.isNonStaticInnerClass(class4);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<RuntimeException> class5 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class5, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      
      Class<Long> class6 = Long.class;
      String string0 = ClassUtil.isLocalType(class6, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      
      Class<Boolean> class1 = Boolean.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(2, typeArray0.length);
      
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1172.2313695);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1172.2313F, (float)float1, 0.01F);
      
      Float float2 = new Float(1172.2313695);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1172.2313F, (float)float2, 0.01F);
      
      Float float3 = new Float(2382.992F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(2382.992F, (float)float3, 0.01F);
      
      Float float4 = ClassUtil.nonNull(float3, float1);
      assertNotNull(float4);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(2382.992F, (float)float4, 0.01F);
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertEquals("double", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class4 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class4);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("class java.lang.RuntimeException", class4.toString());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isInterface());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "entrySet");
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Object> class3 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class3);
      assertNull(type0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ClassUtil.backticked("primitive");
      assertNotNull(string0);
      assertEquals("`primitive`", string0);
      
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class0, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Long> class4 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor0);
      
      Class<AccessPattern> class5 = AccessPattern.class;
      String string1 = ClassUtil.canBeABeanType(class5);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("enum", string1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.java.lang.RuntimeException", "primitive", 3030);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("primitive", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0.toString());
      assertEquals(3030, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(";V.X@+\".</9I", "`primitive`", sQLTransactionRollbackException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("primitive", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0.toString());
      assertEquals(3030, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0.getMessage());
      assertEquals(";V.X@+\".</9I", sQLRecoverableException0.getMessage());
      assertEquals("`primitive`", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ;V.X@+\".</9I", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("primitive", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0.toString());
      assertEquals(3030, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0.getMessage());
      assertEquals(";V.X@+\".</9I", sQLRecoverableException0.getMessage());
      assertEquals("`primitive`", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ;V.X@+\".</9I", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "org.hibernate.proxy.java.lang.RuntimeException", (Throwable) sQLRecoverableException0);
      assertNotNull(jsonMappingException0);
      assertEquals("primitive", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0.toString());
      assertEquals(3030, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.RuntimeException", sQLTransactionRollbackException0.getMessage());
      assertEquals(";V.X@+\".</9I", sQLRecoverableException0.getMessage());
      assertEquals("`primitive`", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ;V.X@+\".</9I", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.hibernate.proxy.java.lang.RuntimeException
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Boolean> class1 = Boolean.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(2, typeArray0.length);
      
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      SQLException sQLException0 = new SQLException((String) null, "), cannot call with() on it", 42);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(42, sQLException0.getErrorCode());
      assertEquals("), cannot call with() on it", sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("), cannot call with() on it", sQLException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(42, sQLException0.getErrorCode());
      assertEquals("), cannot call with() on it", sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ), cannot call with() on it", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("), cannot call with() on it", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: ), cannot call with() on it
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      Throwable[] throwableArray0 = mockIOException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      mockIOException0.printStackTrace();
      String string0 = mockIOException0.toString();
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      
      String string1 = mockIOException0.toString();
      assertNotNull(string1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string1);
      
      String string2 = mockIOException0.getMessage();
      assertNull(string2);
      
      Throwable throwable0 = mockIOException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(mockIOException0, throwable0);
      assertSame(throwable0, mockIOException0);
      
      Throwable throwable1 = ClassUtil.getRootCause(mockIOException0);
      assertNotNull(throwable1);
      assertSame(mockIOException0, throwable1);
      assertSame(mockIOException0, throwable0);
      assertSame(throwable1, throwable0);
      assertSame(throwable1, mockIOException0);
      
      Class<Character> class0 = Character.class;
      String string3 = ClassUtil.isLocalType(class0, true);
      assertNull(string3);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockIOException0, true);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertSame(mockIOException0, throwable1);
      assertSame(mockIOException0, throwable0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(4, serializationFeatureArray0.length);
      
      Locale locale0 = new Locale("JSON");
      assertNotNull(locale0);
      assertEquals("json", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("json", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      assertNotNull(objectMapper3);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper3);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper3, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("json", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("json", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(4, serializationFeatureArray0.length);
      
      MockFile mockFile0 = new MockFile("lNdZ''5s?X$%`l");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper3, mockFileOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("json", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("json", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("lNdZ''5s?X$%`l", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("lNdZ''5s?X$%`l", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(4, serializationFeatureArray0.length);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      
      Class<Boolean> class1 = Boolean.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(2, typeArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      Class<Boolean> class1 = Boolean.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(2, typeArray0.length);
      
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Subtype of BeanSerializerFactory (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      Class<Float> class2 = Float.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, classUtil_CtorArray0.length);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(6, methodArray0.length);
      
      Float float0 = new Float(2158.312644026669);
      assertNotNull(float0);
      assertEquals(2158.3127F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) 0.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      String string1 = "TT^c.";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("TT^c.");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: TT^c.", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("TT^c.", sQLSyntaxErrorException0.getMessage());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Integer> class3 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float1, class3, "net.sf.cglib.proxy.java.io.IOException");
      assertNotNull(jsonMappingException0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from number 0.0: net.sf.cglib.proxy.java.io.IOException
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1509);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      
      String string0 = ClassUtil.getClassDescription(placeholderForType0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.PlaceholderForType`", string0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      
      Iterator<HashMap<Character, Character>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      assertSame(class1, class0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) "WRAP_ROOT_VALUE", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class1);
      assertFalse(boolean0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.nullOrToString(mockRuntimeException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("vals");
      assertNotNull(string0);
      assertEquals("vals", string0);
      
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = ClassUtil.backticked("primitive");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`primitive`", string1);
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Long> class3 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      
      String string2 = ClassUtil.canBeABeanType(class0);
      assertNull(string2);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("primitive", "`primitive`", (-605166913));
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: primitive", sQLTransactionRollbackException0.toString());
      assertEquals("primitive", sQLTransactionRollbackException0.getMessage());
      assertEquals((-605166913), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`primitive`", sQLTransactionRollbackException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("vals", "`primitive`", sQLTransactionRollbackException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLTransactionRollbackException: primitive", sQLTransactionRollbackException0.toString());
      assertEquals("primitive", sQLTransactionRollbackException0.getMessage());
      assertEquals((-605166913), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`primitive`", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("`primitive`", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: vals", sQLRecoverableException0.toString());
      assertEquals("vals", sQLRecoverableException0.getMessage());
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("java.sql.SQLTransactionRollbackException: primitive", sQLTransactionRollbackException0.toString());
      assertEquals("primitive", sQLTransactionRollbackException0.getMessage());
      assertEquals((-605166913), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`primitive`", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("`primitive`", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: vals", sQLRecoverableException0.toString());
      assertEquals("vals", sQLRecoverableException0.getMessage());
      assertEquals(0, throwableArray0.length);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "vals", (Throwable) sQLRecoverableException0);
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLTransactionRollbackException: primitive", sQLTransactionRollbackException0.toString());
      assertEquals("primitive", sQLTransactionRollbackException0.getMessage());
      assertEquals((-605166913), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`primitive`", sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("`primitive`", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: vals", sQLRecoverableException0.toString());
      assertEquals("vals", sQLRecoverableException0.getMessage());
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // vals
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.java.io.IOException", "org.hibernate.proxy.java.io.IOException", (-1950));
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: org.hibernate.proxy.java.io.IOException", sQLRecoverableException0.toString());
      assertEquals((-1950), sQLRecoverableException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.io.IOException", sQLRecoverableException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.io.IOException", sQLRecoverableException0.getMessage());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.java.io.IOException", sQLRecoverableException0);
      assertNotNull(mockRuntimeException0);
      
      RuntimeException runtimeException0 = ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      assertNotNull(runtimeException0);
      assertSame(mockRuntimeException0, runtimeException0);
      assertSame(runtimeException0, mockRuntimeException0);
      assertEquals("java.sql.SQLRecoverableException: org.hibernate.proxy.java.io.IOException", sQLRecoverableException0.toString());
      assertEquals((-1950), sQLRecoverableException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.io.IOException", sQLRecoverableException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.io.IOException", sQLRecoverableException0.getMessage());
      
      Class<Boolean> class0 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 9);
      Class<Long> class1 = Long.class;
      classArray0[0] = class1;
      Class<Long> class2 = Long.class;
      classArray0[1] = class2;
      Class<Long> class3 = Long.class;
      classArray0[2] = class3;
      Class<Long> class4 = Long.class;
      classArray0[3] = class4;
      Class<Long> class5 = Long.class;
      classArray0[4] = class5;
      Class<Long> class6 = Long.class;
      classArray0[5] = class6;
      Class<Long> class7 = Long.class;
      classArray0[6] = class7;
      Class<Long> class8 = Long.class;
      classArray0[7] = class8;
      Class<Long> class9 = Long.class;
      classArray0[8] = class9;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Iterator<ReferenceType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      
      Class<Short> class2 = Short.class;
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      assertNotNull(mockIOException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      boolean boolean1 = ClassUtil.hasClass(mockIOException0, class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Void> class1 = Void.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NULL", "NULL");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("NULL", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("NULL", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: NULL", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals("NULL", string0);
      assertEquals("NULL", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("NULL", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: NULL", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertEquals("NULL", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("NULL", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: NULL", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: NULL", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("NULL", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("NULL", sQLIntegrityConstraintViolationException1.getMessage());
      
      Class<ReferenceType> class1 = ReferenceType.class;
      String string1 = ClassUtil.isLocalType(class1, true);
      assertNull(string1);
      
      boolean boolean2 = ClassUtil.hasClass(class0, class0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class2);
      assertNotNull(mapType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      MapType mapType1 = mapType0.withTypeHandler(mockError0);
      assertNotNull(mapType1);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isInterface());
      
      Class<Character> class3 = Character.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) arrayList0);
      assertNotNull(typeBindings0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType1, typeBindings0);
      assertNotNull(arrayType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isInterface());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      
      MapType mapType2 = mapType1.withKeyValueHandler(arrayType0);
      assertNotNull(mapType2);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isInterface());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasHandlers());
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) mapType2);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertFalse(boolean0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isInterface());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasHandlers());
      
      Class<Character> class4 = Character.class;
      int int0 = 31;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class4, 31);
      assertNotNull(coreXMLDeserializers_Std0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      Collection<Object> collection0 = coreXMLDeserializers_Std0.getKnownPropertyNames();
      assertNull(collection0);
      assertSame(class4, class3);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      Class<Long> class5 = Long.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class4, class6);
      assertNotNull(jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(class4, class3);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockIOException mockIOException0 = new MockIOException(mockError0);
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Long> class2 = Long.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      String string0 = ClassUtil.backticked("primitive");
      assertNotNull(string0);
      assertEquals("`primitive`", string0);
      
      Class<Object> class4 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class4, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(0, classUtil_CtorArray0.length);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = ClassUtil.nonNull(float0, float0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertEquals("double", class2.toString());
      assertFalse(class2.isEnum());
      
      String string0 = ClassUtil.classNameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Long> class1 = Long.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator((OutputDecorator) null);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JSON", 0, 0);
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      
      Class<NoClass> class2 = NoClass.class;
      boolean boolean1 = ClassUtil.isBogusClass(class2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNull(string0);
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil_Ctor0, true);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertEquals("char", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      
      Class<NoClass> class3 = NoClass.class;
      boolean boolean0 = ClassUtil.isProxyType(class3);
      assertFalse(boolean0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLTransientConnectionException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      assertNotNull(throwable0);
      assertSame(mockException0, throwable0);
      assertSame(throwable0, mockException0);
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 8;
      intArray0[1] = (-3384);
      intArray0[2] = 8;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertNotNull(fileSystemHandling2);
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@", "com.fasterxml.jackson.databind.cfg.ConfigOverride", 8, intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {8, (-3384), 8}, intArray0);
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException0.getSQLState());
      assertEquals(8, batchUpdateException0.getErrorCode());
      assertEquals("@", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException0.toString());
      assertEquals(3, intArray0.length);
      
      batchUpdateException0.printStackTrace();
      assertArrayEquals(new int[] {8, (-3384), 8}, intArray0);
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException0.getSQLState());
      assertEquals(8, batchUpdateException0.getErrorCode());
      assertEquals("@", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException0.toString());
      assertEquals(3, intArray0.length);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertArrayEquals(new int[] {8, (-3384), 8}, intArray0);
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException0.getSQLState());
      assertEquals(8, batchUpdateException0.getErrorCode());
      assertEquals("@", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException0.toString());
      assertEquals(3, intArray0.length);
      assertEquals(0, throwableArray0.length);
      
      Throwable[] throwableArray1 = batchUpdateException0.getSuppressed();
      assertNotNull(throwableArray1);
      assertArrayEquals(new int[] {8, (-3384), 8}, intArray0);
      assertSame(throwableArray1, throwableArray0);
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException0.getSQLState());
      assertEquals(8, batchUpdateException0.getErrorCode());
      assertEquals("@", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException0.toString());
      assertEquals(3, intArray0.length);
      assertEquals(0, throwableArray1.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("non-static member class", batchUpdateException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertArrayEquals(new int[] {8, (-3384), 8}, intArray0);
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException0.getSQLState());
      assertEquals(8, batchUpdateException0.getErrorCode());
      assertEquals("@", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(3, intArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertArrayEquals(new int[] {8, (-3384), 8}, intArray0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException0.getSQLState());
      assertEquals(8, batchUpdateException0.getErrorCode());
      assertEquals("@", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(3, intArray0.length);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      assertNotNull(batchUpdateException1);
      assertArrayEquals(new int[] {8, (-3384), 8}, intArray0);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException0.getSQLState());
      assertEquals(8, batchUpdateException0.getErrorCode());
      assertEquals("@", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: non-static member class", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("non-static member class", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("@", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException1.toString());
      assertEquals(8, batchUpdateException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException1.getSQLState());
      assertEquals(3, intArray0.length);
      
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "@", "F|+lEp7 ,O5TMYH.vm", 8);
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator.@(F|+lEp7 ,O5TMYH.vm:8)", stackTraceElement0.toString());
      assertEquals(8, stackTraceElement0.getLineNumber());
      assertEquals("@", stackTraceElement0.getMethodName());
      assertEquals("F|+lEp7 ,O5TMYH.vm", stackTraceElement0.getFileName());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", stackTraceElement0.getClassName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("non-static member class", "#)2{g&oG{t|GeSE", "F|+lEp7 ,O5TMYH.vm", 8);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("#)2{g&oG{t|GeSE", stackTraceElement1.getMethodName());
      assertEquals("F|+lEp7 ,O5TMYH.vm", stackTraceElement1.getFileName());
      assertEquals("non-static member class.#)2{g&oG{t|GeSE(F|+lEp7 ,O5TMYH.vm:8)", stackTraceElement1.toString());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(8, stackTraceElement1.getLineNumber());
      assertEquals("non-static member class", stackTraceElement1.getClassName());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "JHtyz_lMU4", "#)2{g&oG{t|GeSE", (-267));
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("#)2{g&oG{t|GeSE", stackTraceElement2.getFileName());
      assertEquals((-267), stackTraceElement2.getLineNumber());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator.JHtyz_lMU4(#)2{g&oG{t|GeSE)", stackTraceElement2.toString());
      assertEquals("JHtyz_lMU4", stackTraceElement2.getMethodName());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", stackTraceElement2.getClassName());
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("&r7hT\"Dm<BD-Jn", "4*Wbb+\u0001nV[Mc8", "non-static member class", (-6));
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertEquals("non-static member class", stackTraceElement3.getFileName());
      assertEquals("&r7hT\"Dm<BD-Jn.4*Wbb+\u0001nV[Mc8(non-static member class)", stackTraceElement3.toString());
      assertEquals((-6), stackTraceElement3.getLineNumber());
      assertEquals("&r7hT\"Dm<BD-Jn", stackTraceElement3.getClassName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("4*Wbb+\u0001nV[Mc8", stackTraceElement3.getMethodName());
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("#)2{g&oG{t|GeSE", "non-static member class", "com.fasterxml.jackson.databind.cfg.ConfigOverride", (-16842752));
      assertNotNull(stackTraceElement4);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("#)2{g&oG{t|GeSE.non-static member class(com.fasterxml.jackson.databind.cfg.ConfigOverride)", stackTraceElement4.toString());
      assertEquals("non-static member class", stackTraceElement4.getMethodName());
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", stackTraceElement4.getFileName());
      assertEquals("#)2{g&oG{t|GeSE", stackTraceElement4.getClassName());
      assertEquals((-16842752), stackTraceElement4.getLineNumber());
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("zc7a#", "zc7a#", ">qe", 8);
      assertNotNull(stackTraceElement5);
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals(">qe", stackTraceElement5.getFileName());
      assertEquals("zc7a#", stackTraceElement5.getMethodName());
      assertEquals("zc7a#", stackTraceElement5.getClassName());
      assertEquals(8, stackTraceElement5.getLineNumber());
      assertEquals("zc7a#.zc7a#(>qe:8)", stackTraceElement5.toString());
      
      stackTraceElementArray0[5] = stackTraceElement5;
      batchUpdateException0.setStackTrace(stackTraceElementArray0);
      assertArrayEquals(new int[] {8, (-3384), 8}, intArray0);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertEquals("com.fasterxml.jackson.databind.cfg.ConfigOverride", batchUpdateException0.getSQLState());
      assertEquals(8, batchUpdateException0.getErrorCode());
      assertEquals("@", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: @", batchUpdateException0.toString());
      assertEquals(6, stackTraceElementArray0.length);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)23);
      assertNotNull(byte0);
      assertEquals((byte)23, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, byte0, "non-static member class");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Byte (of class java.lang.String) must override method 'non-static member class'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      Class<?> class1 = ClassUtil.classOf((Object) null);
      assertNull(class1);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.initCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLInvalidAuthorizationSpecException", sQLNonTransientConnectionException1.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException1.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "Conflicting getter definitions for property \"");
      assertNotNull(string0);
      assertEquals("Conflicting getter definitions for property \"", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.io.IOException`", string0);
      
      Iterator<HashMap<Character, Character>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class1 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("WRAP_ROOT_VALUE");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.toString());
      assertEquals("WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) "WRAP_ROOT_VALUE", "org.hibernate.proxy.java.io.IOException");
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.toString());
      assertEquals("WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("WRAP_ROOT_VALUE");
      assertNotNull(mockRuntimeException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockRuntimeException0, 385);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.toString());
      assertEquals("WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      int int0 = 31;
      SQLWarning sQLWarning0 = new SQLWarning("><zD%Jmnmga#L3", (String) null, 31, sQLDataException0);
      assertNotNull(sQLWarning0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(31, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ><zD%Jmnmga#L3", sQLWarning0.toString());
      assertEquals("><zD%Jmnmga#L3", sQLWarning0.getMessage());
      
      String string0 = "com.fasterxml.jackson.databind.jsontype.TypeSerializer";
      File file0 = null;
      File file1 = MockFile.createTempFile("com.fasterxml.jackson.databind.jsontype.TypeSerializer", (String) null, (File) null);
      assertNotNull(file1);
      assertEquals("com.fasterxml.jackson.databind.jsontype.TypeSerializer0.tmp", file1.getName());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isFile());
      assertEquals("/tmp/com.fasterxml.jackson.databind.jsontype.TypeSerializer0.tmp", file1.toString());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      PrintWriter printWriter0 = mockPrintWriter1.append('r');
      assertNotNull(printWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertEquals("com.fasterxml.jackson.databind.jsontype.TypeSerializer0.tmp", file1.getName());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isFile());
      assertEquals("/tmp/com.fasterxml.jackson.databind.jsontype.TypeSerializer0.tmp", file1.toString());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      
      sQLWarning0.printStackTrace(printWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(31, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ><zD%Jmnmga#L3", sQLWarning0.toString());
      assertEquals("><zD%Jmnmga#L3", sQLWarning0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.jsontype.TypeSerializer0.tmp", file1.getName());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canWrite());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isFile());
      assertEquals("/tmp/com.fasterxml.jackson.databind.jsontype.TypeSerializer0.tmp", file1.toString());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      
      sQLDataException0.setNextException(sQLWarning0);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(31, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ><zD%Jmnmga#L3", sQLWarning0.toString());
      assertEquals("><zD%Jmnmga#L3", sQLWarning0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0, "org.hibernate.proxy.java.io.IOException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.io.IOException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-26)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Float> class0 = Float.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = (-605166913);
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 0;
      intArray0[8] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0, 3, 0, (-605166913), 1, 0, 2, 0, 2}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.toString());
      assertEquals(9, intArray0.length);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Unexpected JSON value(s); expected at most %d properties (in JSON Array)", batchUpdateException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertArrayEquals(new int[] {0, 3, 0, (-605166913), 1, 0, 2, 0, 2}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(9, intArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("' ^5", "ABR(hn$/'", (-1368), sQLSyntaxErrorException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertArrayEquals(new int[] {0, 3, 0, (-605166913), 1, 0, 2, 0, 2}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1368), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("ABR(hn$/'", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("' ^5", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ' ^5", sQLFeatureNotSupportedException0.toString());
      assertEquals(9, intArray0.length);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ABR(hn$/'", sQLFeatureNotSupportedException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertArrayEquals(new int[] {0, 3, 0, (-605166913), 1, 0, 2, 0, 2}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1368), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("ABR(hn$/'", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("' ^5", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ' ^5", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ABR(hn$/'", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ABR(hn$/'", sQLNonTransientConnectionException0.toString());
      assertEquals(9, intArray0.length);
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertArrayEquals(new int[] {0, 3, 0, (-605166913), 1, 0, 2, 0, 2}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1368), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("ABR(hn$/'", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("' ^5", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ' ^5", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("ABR(hn$/'", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ABR(hn$/'", sQLNonTransientConnectionException0.toString());
      assertEquals(9, intArray0.length);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      assertNotNull(batchUpdateException1);
      assertArrayEquals(new int[] {0, 3, 0, (-605166913), 1, 0, 2, 0, 2}, intArray0);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Unexpected JSON value(s); expected at most %d properties (in JSON Array)", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals((-1368), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("ABR(hn$/'", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("' ^5", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ' ^5", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(9, intArray0.length);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      String string0 = ClassUtil.nameOf(class3);
      assertNotNull(string0);
      assertEquals("`java.lang.RuntimeException`", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNull(string0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException1, "unknown");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNull(string0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil_Ctor0, true);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      String string1 = ClassUtil.nullOrToString(jsonFactory0);
      assertNotNull(string1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, valueInstantiator_Base0);
      assertNotNull(simpleValueInstantiators1);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Class ", "B=X<=", (-1), (Throwable) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals("Class ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Class ", sQLTimeoutException0.toString());
      assertEquals((-1), sQLTimeoutException0.getErrorCode());
      assertEquals("B=X<=", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(13, fieldArray0.length);
      
      Class<Float> class1 = Float.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertSame(class1, class0);
      assertEquals(1, typeArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("vas");
      assertNotNull(string0);
      assertEquals("vas", string0);
      
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      String string1 = ClassUtil.backticked("primitive");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`primitive`", string1);
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, false);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      Class<Long> class3 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException1, "YIM`23KBG_S\"j};#I6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YIM`23KBG_S\"j};#I6
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(17, methodArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.io.IOException`", string0);
      
      Iterator<HashMap<Character, Character>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class1 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("WRAP_ROOT_VALUE");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.toString());
      assertEquals("WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) "NULL", "E0!~m=Bv {|7sS");
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.toString());
      assertEquals("WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.toString());
      assertEquals("WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(throwable0.equals((Object)jsonMappingException1));
      assertSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(throwable0, jsonMappingException1);
      assertSame(throwable0, jsonMappingException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.toString());
      assertEquals("WRAP_ROOT_VALUE", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(17, methodArray0.length);
      
      String string0 = ClassUtil.nullOrToString(classUtil0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      Class<Character> class1 = Character.class;
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil_Ctor0, true);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      String string1 = ClassUtil.nullOrToString(jsonFactory0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2Lm#<2]");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("2Lm#<2]", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2Lm#<2]", sQLNonTransientConnectionException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) null, "JSON");
      assertNotNull(jsonMappingException0);
      assertEquals("2Lm#<2]", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2Lm#<2]", sQLNonTransientConnectionException0.toString());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertEquals("2Lm#<2]", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2Lm#<2]", sQLNonTransientConnectionException0.toString());
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class2);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals("2Lm#<2]", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2Lm#<2]", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2Lm#<2]", sQLNonTransientConnectionException1.toString());
      assertEquals("2Lm#<2]", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("vals");
      assertNotNull(string0);
      assertEquals("vals", string0);
      
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      String string1 = ClassUtil.backticked("primitive");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`primitive`", string1);
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, false);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Long> class3 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1502);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Object`", string0);
      
      Iterator<HashMap<Character, Character>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class1 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(class1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Long> class1 = Long.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      Class<Short> class2 = Short.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(23, methodArray0.length);
      
      Float float0 = new Float(2292.205777903494);
      assertNotNull(float0);
      assertEquals(2292.2058F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(2292.205777903494);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2292.2058F, (float)float2, 0.01F);
      
      Float float3 = ClassUtil.nonNull(float1, float2);
      assertNotNull(float3);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      Class<Character> class3 = Character.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertNotNull(class4);
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertEquals(1, class4.getModifiers());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      
      String string0 = ClassUtil.classNameOf((Object) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, (Object) null, "[null]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "time");
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constructor0.newInstance(annotationArray0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getDeclaringClass(class2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaType javaType0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, (TypeBindings) null, (Object) null, (Object) collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf((Class<?>) null);
      Class<String> class1 = String.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("org.hibernate.proxy.java.io.IOException", "org.hibernate.proxy.java.io.IOException");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      accessibleObjectArray0[0] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[1] = (AccessibleObject) classUtil_Ctor0._ctor;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Class<?>) null);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.primitiveType(class0);
      MockFile mockFile0 = new MockFile("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isBogusClass(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      File file0 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Character> class1 = Character.class;
      ClassUtil.getPackageName(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil_Ctor0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, (OutputStream) null, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getSuppressed();
      mockIOException0.printStackTrace();
      mockIOException0.toString();
      mockIOException0.toString();
      mockIOException0.getMessage();
      mockIOException0.fillInStackTrace();
      ClassUtil.getRootCause(mockIOException0);
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, true);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockIOException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      Object object0 = ClassUtil.nonNull((Object) null, (Object) iOContext0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(67);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(object0, placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NULL", "elementType");
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) deserializationContext0, "elementType");
      JsonMappingException.from(deserializationContext0, "NULL");
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Float> class2 = Float.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.getConstructors(class1);
      ClassUtil.getDeclaredMethods(class1);
      Float float0 = new Float(2158.312644026669);
      Float float1 = new Float(0.0F);
      ClassUtil.nonNull(float0, float1);
      Class<Double> class3 = Double.class;
      ClassUtil.findEnumType(class3);
      ClassUtil.classNameOf(float1);
      Class<Character> class4 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class4, class2, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Character) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1502);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      ClassUtil.isCollectionMapOrArray(class1);
      AccessPattern accessPattern1 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern1);
      String string0 = "serialVersionUID";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("serialVersionUID", sQLInvalidAuthorizationSpecException0);
      String string1 = "keyUniverse";
      sQLInvalidAuthorizationSpecException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassDescription(class0);
      Iterator<HashMap<Character, Character>> iterator0 = ClassUtil.emptyIterator();
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(class0, iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("short", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.createInstance(class1, true);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.isLocalType(class1, true);
      Class<Short> class3 = Short.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators((ValueInstantiators) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Void> class1 = Void.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertEquals(0, list0.size());
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      Class<Long> class3 = Long.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      boolean boolean0 = ClassUtil.hasClass((Object) null, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findClassAnnotations(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator((OutputDecorator) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JSON", 0, 3);
      StringWriter stringWriter2 = stringWriter1.append('3');
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) stringWriter2);
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "JSON");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON", sQLNonTransientException0);
      MockException mockException0 = new MockException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTransactionRollbackException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Class<?> class0 = ClassUtil.classOf(byte0);
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class0);
      boolean boolean0 = true;
      ClassUtil.isLocalType(class0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getPackageName(class0);
      Class<String> class1 = String.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.emptyIterator();
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class3);
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class2, class3, true);
      ClassUtil.nonNullString("u+lYj:l`r9E@ec\"c");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("size", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put((String) null, clientInfoStatus1);
      sQLClientInfoException0.fillInStackTrace();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      sQLClientInfoException1.getSuppressed();
      sQLClientInfoException1.spliterator();
      sQLClientInfoException1.printStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",zw*^P&Zu", "u+lYj:l`r9E@ec\"c", 580, sQLClientInfoException1);
      sQLClientInfoException1.spliterator();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      // Undeclared exception!
      try { 
        sQLInvalidAuthorizationSpecException0.initCause(sQLClientInfoException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLClientInfoException
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      short short0 = (short)902;
      Short short1 = new Short((short)902);
      String string0 = ">N1!kl/";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, short1, ">N1!kl/");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Short (of class java.lang.RuntimeException) must override method '>N1!kl/'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Long long0 = new Long(0L);
      ClassUtil.nonNull(long0, long0);
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      int int0 = 0;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, (String) null, "ZERO_LENGTH_ENUM_ARRAY", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.JsonMappingException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NULL", "elementType");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) deserializationContext0, "elementType");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // NULL (through reference chain: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"elementType\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "vals";
      ClassUtil.nonNullString("vals");
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      String string1 = "primitive";
      ClassUtil.backticked("primitive");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, 608);
      // Undeclared exception!
      try { 
        coreXMLDeserializers_Std0.findBackReference("-&Pe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot handle managed/back reference '-&Pe': type: value deserializer of type com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std does not support them
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaredFields(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(245);
      Class<CollectionType> class1 = CollectionType.class;
      placeholderForType0.findSuperType(class1);
      ClassUtil.quotedOr(placeholderForType0, (String) null);
      Class<?> class2 = ClassUtil.rawClass(placeholderForType0);
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isCollectionMapOrArray(class2);
      int[] intArray0 = new int[8];
      intArray0[0] = 245;
      intArray0[1] = 245;
      intArray0[2] = (-396);
      intArray0[3] = 245;
      intArray0[4] = 245;
      intArray0[5] = 245;
      intArray0[6] = 245;
      intArray0[7] = 0;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(placeholderForType0, (String) null, (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Illegal unquoted character (", intArray0, jsonMappingException0);
      Throwable throwable0 = ClassUtil.throwIfError(batchUpdateException0);
      assertSame(throwable0, batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ClassUtil.nonNullString("org.hibernate.proxy.");
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isConcrete(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      jsonFactory1.createParser("org.hibernate.proxy.");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler("JSON");
      referenceType1.getAnchorType();
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators((ValueInstantiators) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isProxyType(class0);
      Class<Double> class1 = Double.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, true);
      Class<Void> class2 = Void.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
  }
}
