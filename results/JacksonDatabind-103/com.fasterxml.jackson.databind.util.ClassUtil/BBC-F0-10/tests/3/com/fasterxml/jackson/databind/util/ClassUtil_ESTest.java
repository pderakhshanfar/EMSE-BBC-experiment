/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:31:05 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.Date;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Byte> class1 = Byte.class;
      Class<MapType> class2 = MapType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType[]) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(typeBindings0);
      DoubleNode doubleNode0 = DoubleNode.valueOf((-652.6));
      CollectionType collectionType2 = collectionType1.withContentValueHandler(doubleNode0);
      ClassUtil.findSuperTypes((JavaType) collectionType2, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.wrapperType(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) constructor1, (AccessibleObject) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.java.lang.String", "oz4a$v%oy.Jrz");
      MockIOException mockIOException0 = new MockIOException(sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("lZ~'91)D~<", "Eeltv<sYM:i!G,N_", 1359, mockIOException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("array", "array", 54, sQLSyntaxErrorException0);
      MockIOException mockIOException1 = new MockIOException("array", sQLTimeoutException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1290, (-525));
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ArrayType arrayType2 = arrayType1.withValueHandler(typeFactory1);
      arrayType2.findSuperType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes((JavaType) arrayType2, (Class<?>) class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-507));
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        collectionType0.withContentValueHandler(class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)19);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1073);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("Sub-class %s (of class %s) must override method '%s'", class0, "03qY&u`@%LPvg[");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from String \"Sub-class %s (of class %s) must override method '%s'\": 03qY&u`@%LPvg[
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLWarning sQLWarning0 = new SQLWarning("li56>Q@gJr5>GeDO", " has no default (no arg) constructor", mockRuntimeException0);
      mockRuntimeException0.initCause(sQLWarning0);
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(throwable0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockRuntimeException0);
      mockRuntimeException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "aS->}7K>");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", (-65));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockError0, jsonMappingException_Reference0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", jsonMappingException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      System.setCurrentTimeMillis(0L);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class0, class0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      MapType mapType1 = mapType0.withKeyValueHandler(sequenceInputStream0);
      MapType mapType2 = mapType1.withKeyType(mapType0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes((JavaType) mapType2, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<DoubleNode> class0 = DoubleNode.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<MapType> class0 = MapType.class;
      objectReader0.forType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "[nc}-Z3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      ClassUtil.isJacksonStdImpl((Object) "m#;qA'?i,B");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("unknown", "a5!G\" +^*;:Oj.", sQLRecoverableException0);
      DataTruncation dataTruncation0 = new DataTruncation((-2), false, false, (-2), (-2), sQLSyntaxErrorException0);
      ClassUtil.getRootCause(dataTruncation0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isBogusClass(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.verifyMustOverride(class1, class1, "org.hibernate.proxy.java.lang.reflect.AccessibleObject");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("3-#7<+G(f3UGQf", "Default constructor for ", 2);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileReader0, "3-#7<+G(f3UGQf", sQLSyntaxErrorException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6!H[&djeYG1W{", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-492), (ObjectCodec) null, mockFileOutputStream0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockFileReader0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Short> class0 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "JSON", "com.fasterxml.jackson.annotation.JsonAutoDetect$Value");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Short` from String \"JSON\": com.fasterxml.jackson.annotation.JsonAutoDetect$Value
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "<^";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<^");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'z';
      charArray0[2] = '?';
      jsonFactory0.createNonBlockingByteArrayParser();
      charArray0[3] = 'K';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      Class<Boolean> class0 = Boolean.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "INT");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("<[`fjNF;G3CVQ9", "Sub-class %s (of class %s) must override method '%s'", "1hxbr", (-939));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("unknown", "Sub-class %s (of class %s) must override method '%s'", "INT", (-939));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("\"%s\"", "1hxbr", "<^", 1905);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "", "1hxbr", 1905);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("<^", "<^", "), cannot call with() on it", 1905);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("org.hibernate.proxy.", "org.hibernate.proxy.java.lang.Double", ".*RJs{\"", 1905);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("q-VH[5OyVtJJMC#", "')", "INT", 1905);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("org.hibernate.proxy.", "1hxbr", "q-VH[5OyVtJJMC#", 114);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("fUGgq;nwznkS)&h}o", "<^", "org.hibernate.proxy.java.lang.Double", (-939));
      stackTraceElementArray0[8] = stackTraceElement8;
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NULL: INT
         //  at [Source: (char[])\"Qz?K\"; line: 1, column: 0]
         //
         verifyException("<[`fjNF;G3CVQ9", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("wQIS~\"^cEL", "wQIS~\"^cEL", (-9), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Module> class2 = Module.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.allOf(class0);
      Class<MapType> class1 = MapType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper4 = objectMapper3.disable(serializationFeature0);
      ObjectReader objectReader0 = objectMapper4.readerFor(class0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      objectReader1.forType(class0);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.Long", "com.fasterxml.jacks", 612);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SimpleType.constructUnsafe(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class1);
      ClassUtil.findEnumType(enumMap0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("QJ:QX?}kj5)BK2");
      SQLTransientException sQLTransientException0 = new SQLTransientException("QJ:QX?}kj5)BK2", "QJ:QX?}kj5)BK2", 2, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "6XzeCHc-\"BE'4kh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      objectReader0.getTypeFactory();
      Class<MapType> class1 = MapType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 1211);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectReader0, (Writer) null);
      byte[] byteArray0 = new byte[0];
      writerBasedJsonGenerator0.writeBinary(byteArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("true", "Miv", sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      sQLRecoverableException0.getStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Miv", "Miv", sQLInvalidAuthorizationSpecException0);
      MockIOException mockIOException0 = new MockIOException(sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      objectReader0.getTypeFactory();
      Class<MapType> class1 = MapType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 1211);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectReader0, (Writer) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("true", "Miv", sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      sQLRecoverableException0.getStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Miv", "Miv", sQLInvalidAuthorizationSpecException0);
      MockIOException mockIOException0 = new MockIOException(sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">FP]Y1");
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      MapType mapType0 = MapType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[2], javaTypeArray0[2]);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) referenceType1, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.");
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getClassDescription("`java.lang.Boolean`");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockFileWriter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "`java.lang.Boolean`");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeFactory.defaultInstance();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
      int int0 = 1615;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("expected a valid value (number, String, array, object, 'true', 'false' or 'null')", "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", 1615);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class1);
      EnumMap<AccessPattern, Object> enumMap1 = enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap1.put(accessPattern0, (Object) class1);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      objectMapper0.readerFor((JavaType) simpleType0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", problem: ");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(", problem: ");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("No enum constants for class ", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockError mockError0 = new MockError("com.fasterxml.jacks");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Failed to instantiate class ", "Failed to instantiate class ", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("Missing property '%s' for external type id '%s'");
      Class<DoubleNode> class1 = DoubleNode.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ObjectMapper objectMapper0 = new ObjectMapper();
          Class<JsonMappingException> class0 = JsonMappingException.class;
          SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
          objectMapper0.readerFor((JavaType) simpleType0);
          objectMapper0.reader();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      String string0 = null;
      ClassUtil.backticked((String) null);
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = new MockFileWriter("[null]", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      mockPrintWriter0.append((CharSequence) "[null]");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      int int0 = (-502);
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = '&';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-1853514379), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.getClassDescription(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(833);
      placeholderForType0.getContentType();
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class1);
      ClassUtil.findEnumType(enumMap0);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumMap0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(5);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class3, false);
      TypeBindings typeBindings0 = TypeBindings.create(class0, list0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      ClassUtil.isJacksonStdImpl((Object) arrayType0);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.findSuperClasses(class2, class4, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isLocalType(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getOuterClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "o(j ?&ddXO", true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      MockIOException mockIOException0 = new MockIOException("(<0}vc\"}f+k:(1l", sQLClientInfoException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (<0}vc\"}f+k:(1l
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "idType cannot be null");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassDescription((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isLocalType(class0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findSuperTypes(class0, class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1024);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 10);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 10);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "DEFAULT";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("DEFAULT", " is not a primitive type");
      MockIOException mockIOException0 = new MockIOException(" is not a primitive type", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<CollectionLikeType> class0 = CollectionLikeType.class;
          ClassUtil.isBogusClass(class0);
          IOContext iOContext0 = null;
          int int0 = 0;
          ObjectMapper objectMapper0 = new ObjectMapper();
          SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
          ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
          objectReader0.forType(class0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findClassAnnotations(class2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "Do not know how to construct standard type serializer for inclusion type: ", (JsonLocation) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Error> class0 = Error.class;
      TypeFactory.defaultInstance();
      ClassUtil.getPackageName(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Long long0 = new Long((-2147483648L));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(long0, class0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Error` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Long`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      DataTruncation dataTruncation0 = new DataTruncation(125, false, false, 1463, 125, batchUpdateException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "LMm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classNameOf(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "`java.lang.Class`");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // `java.lang.Class`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockError mockError0 = new MockError();
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      mockError0.getCause();
      String string1 = "-jf";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "-jf");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotationsByType(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("local/anonymous", "local/anonymous", (-434));
      MockError mockError0 = new MockError("local/anonymous", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.getConstructors(class1);
      ClassUtil.getConstructors(class0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class1);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.isLocalType(class2, true);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.hasEnclosingMethod(class3);
      ClassUtil.isBogusClass(class1);
      Class<String> class4 = String.class;
      ClassUtil.findSuperClasses(class4, class3, true);
      ClassUtil.getDeclaredFields(class3);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setOutputDecorator(outputDecorator0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, "com.fasterxml.jacks");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.nonNullString("[null]");
      Class<NoClass> class1 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, false);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Long long0 = new Long(0L);
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(long0, class0);
      Class<String> class1 = String.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, false);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ClassUtil.hasClass(simpleObjectIdResolver0, class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "elementType");
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(class0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(javaType0, (String) null);
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      ClassUtil.getRootCause(throwable0);
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 975);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("b");
      Class<Long> class2 = Long.TYPE;
      Class<AccessPattern> class3 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      SimpleType simpleType1 = simpleType0.withTypeHandler(coreXMLDeserializers_Std0);
      SimpleType simpleType2 = simpleType1.withStaticTyping();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) simpleType2);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.rawClass(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nullOrToString(class0);
      Class<CollectionLikeType> class1 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M],9MGqZ~:<2}&gR$F");
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Long long0 = new Long(1L);
      ClassUtil.getClassDescription(long0);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isLocalType((Class<?>) null, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      Closeable closeable0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "UNKNOWN", (JsonLocation) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UNKNOWN", jsonMappingException0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UNKNOWN", "UNKNOWN", sQLInvalidAuthorizationSpecException0);
      jsonMappingException0.getCause();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "keyType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeFactory.defaultInstance();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Long> class1 = Long.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperClasses((Class<?>) null, class3, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Long> class1 = Long.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassUtil.nonNullString("#.\"W_c/x");
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#.\"W_c/x");
      ClassUtil.getOuterClass(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findEnumType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = true;
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      Class<Character> class1 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassUtil.nonNullString("#.\"W_c/x");
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#.\"W_c/x");
      ClassUtil.getOuterClass(class1);
      ClassUtil.classNameOf((Object) null);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.findConstructor(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nonNullString("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`");
      Class<Double> class2 = Double.class;
      ClassUtil.isConcrete(class2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.getClassDescription("java.lang");
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.hasEnclosingMethod(class0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findConstructor(class3, true);
      Class<Long> class4 = Long.class;
      ClassUtil.findEnumType(class4);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      jsonFactory0.createParser(file0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.enable(jsonFactory_Feature0);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 975);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("b");
      Class<Long> class3 = Long.TYPE;
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.rawClass(resolvedRecursiveType0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findEnumType(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.nameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      Short short0 = new Short((short)14);
      ClassUtil.getClassDescription(short0);
      ClassUtil.isBogusClass(class0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findConstructor(class2, true);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findEnumType(class3);
      ClassUtil.quotedOr(class0, "com.fasterxml.jackson.databind.node.ContainerNode");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-391));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.nameOf(class2);
      ClassUtil.backticked((String) null);
      Class<Long> class3 = Long.TYPE;
      Class<Long> class4 = Long.TYPE;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<Double> class5 = Double.class;
      ClassUtil.isObjectOrPrimitive(class5);
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      Class<Float> class1 = Float.class;
      ClassUtil.findClassAnnotations(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer((-391));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<Long> class0 = Long.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class0);
      System.setCurrentTimeMillis(1L);
      Long long0 = new Long(608L);
      ClassUtil.quotedOr(long0, "mK=k.#RJ~.UX");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 2, 4073, (-1744674775));
      ClassUtil.nameOf((Named) null);
      Byte byte0 = new Byte((byte)16);
      ClassUtil.getClassDescription((Object) null);
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, false);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 2, 4073, (-1744674775));
      ClassUtil.nameOf((Named) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaredMethods(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Error> class1 = Error.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("[null]", class1, ";{&9ah!X");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Error` from String \"[null]\": ;{&9ah!X
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getConstructors(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      jsonFactory0.createParser(file0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory1.enable(jsonFactory_Feature0);
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isConcrete(class1);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      jsonFactory0.createParser(file0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.enable(jsonFactory_Feature0);
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Boolean> class1 = Boolean.TYPE;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Error> class3 = Error.class;
      ClassUtil.getOuterClass(class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, list0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      objectMapper1.setFilterProvider(simpleFilterProvider0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("+Q0e");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2558, objectMapper0, mockPrintStream0);
      String string0 = "%f\\j$_pV1+zx";
      SQLWarning sQLWarning0 = new SQLWarning("%fj$_pV1+zx");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: %fj$_pV1+zx
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      sQLTransientException0.spliterator();
      sQLTransientException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("keyType");
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class2, class0, true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer(43);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      ClassUtil.findSuperClasses(class2, class2, false);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.nameOf(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getConstructors(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isLocalType(class3, true);
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getOuterClass(class4);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`java.lang.Integer`");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper2, mockPrintStream1);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findClassAnnotations(class0);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      SQLException sQLException0 = new SQLException("FO=E'|Vpru", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "FO=E'|Vpru");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FO=E'|Vpru
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getGenericInterfaces(class0);
      int int0 = 8;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "+RJq|7bpU9{49~", 8);
      Throwable throwable0 = sQLIntegrityConstraintViolationException0.fillInStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "org.hibernate.proxy.java.lang.Double");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.lang.Double
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("dRQY#|k<|y", "(DHs.o:l];@:<!Zj");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("AtA[mm)");
      Class<IOException> class2 = IOException.class;
      ClassUtil.getDeclaredMethods(class2);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory0.enable(jsonFactory_Feature0);
      Class<Double> class3 = Double.class;
      Class<Byte> class4 = Byte.class;
      ClassUtil.findEnumType(class4);
      ClassUtil.nameOf(class3);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dRQY#|k<|y
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?O");
      Class<Long> class0 = Long.class;
      ClassUtil.getPackageName(class0);
      Integer integer0 = Integer.valueOf(14);
      Class<Long> class1 = Long.class;
      ClassUtil.hasClass(integer0, class1);
      ClassUtil.findEnumType(class0);
      ClassUtil.nonNullString("java.lang");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      List<Class<?>> list0 = new Vector<Class<MapType>>();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaringClass(class1);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.classOf((Object) null);
      System.setCurrentTimeMillis((-2128L));
      int[] intArray0 = new int[6];
      intArray0[0] = 96;
      intArray0[1] = 127;
      intArray0[2] = (-774);
      intArray0[3] = 1536;
      intArray0[4] = 28;
      intArray0[5] = (-1044);
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.node.DoubleNode");
      Throwable throwable0 = ClassUtil.getRootCause(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.node.DoubleNode
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockException mockException0 = new MockException("org.hibernate.proxy.");
      SQLException sQLException0 = new SQLException("JSON", "net.sf.cglib.proxy.", mockException0);
      ClassUtil.getRootCause(sQLException0);
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.nameOf(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.nameOf(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<NoClass> class3 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      objectMapper0.enable(deserializationFeature0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("JSON");
      MockIOException mockIOException0 = new MockIOException(mockRuntimeException0);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON", 1, mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("vals", "}-");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vals");
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nameOf((Named) null);
      Byte byte0 = new Byte((byte)23);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findSuperClasses(class2, class2, true);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.getGenericSuperclass(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.nameOf(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getConstructors(class2);
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isLocalType(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.findEnumType(class0);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.nameOf(class4);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getOuterClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      int int0 = (-574);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SimpleModule simpleModule0 = new SimpleModule("JSON");
      objectMapper1.registerModule(simpleModule0);
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.nameOf(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.nameOf(class1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-355), objectMapper1, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("WRAPPER_OBJECT");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRAPPER_OBJECT");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      MockError mockError0 = new MockError("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "WRAPPER_OBJECT", (Throwable) mockError0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // WRAPPER_OBJECT
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Integer integer0 = new Integer(43);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class3);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class0, list0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.classNameOf(list1);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nonNullString((String) null);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null);
      ClassUtil.throwIfError(sQLNonTransientException0);
      ClassUtil.getDeclaredMethods(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nonNullString((String) null);
      Class<CollectionType> class1 = CollectionType.class;
      Byte byte0 = new Byte((byte)23);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, byte0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Byte (of class com.fasterxml.jackson.databind.type.CollectionType) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getOuterClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockError mockError0 = new MockError("serialVersionUID");
      MockPrintStream mockPrintStream0 = new MockPrintStream("`88H{98`Trr}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "`88H{98`Trr}";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) mockError0;
      objectArray0[3] = (Object) "`88H{98`Trr}";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) class1;
      objectArray0[6] = (Object) "`88H{98`Trr}";
      objectArray0[7] = (Object) class1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "b#6", objectArray0);
      mockError0.printStackTrace(printWriter0);
      mockError0.printStackTrace();
      mockError0.getMessage();
      mockError0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isProxyType(class0);
      Throwable throwable0 = null;
      ClassUtil.throwIfIOE((Throwable) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-355), objectMapper1, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("WRAPPER_OBJECT");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRAPPER_OBJECT");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) uTF8JsonGenerator0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) deserializationFeature0;
      mockPrintStream0.printf((Locale) null, "WRAPPER_OBJECT", objectArray0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, true);
      Class<MapLikeType> class3 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isLocalType(class2, false);
      Class<Long> class3 = Long.class;
      ClassUtil.findSuperTypes(class3, class2, list0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 1068L, 4073, 2);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, "size", jsonLocation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(jsonMappingException0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("size", "9JE) CQ[w}6{X'", hashMap0);
      Class<Float> class2 = Float.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.backticked("size");
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperClasses(class3, class1, false);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class4);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Void> class0 = Void.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      constructor0.toGenericString();
      constructor0.getParameterTypes();
      constructor0.getDeclaredAnnotations();
      constructor0.isAnnotationPresent(class1);
      constructor0.getExceptionTypes();
      constructor0.getAnnotations();
      constructor0.getGenericExceptionTypes();
      constructor0.getDeclaredAnnotations();
      constructor0.getAnnotatedReceiverType();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getGenericInterfaces(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.isConcrete(class4);
      ClassUtil.nameOf(class0);
      ClassUtil.isBogusClass(class0);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.backticked((String) null);
      Class<Object> class5 = Object.class;
      Class<PlaceholderForType> class6 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class5, class6, false);
      ClassUtil.findRawSuperTypes(class0, class6, true);
      Class<Annotation> class7 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findRawSuperTypes(class3, class3, false);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class4);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.MappingJsonFactory", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(w&&6");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTimeoutException0);
      MockFile mockFile0 = new MockFile("HRO[eIErru_r6V,_@Om");
      File file0 = MockFile.createTempFile("HRO[eIErru_r6V,_@Om", "tMq.$GW", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "tMq.$GW";
      objectArray0[1] = (Object) throwable0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) sQLTimeoutException0;
      PrintStream printStream0 = mockPrintStream0.printf("HRO[eIErru_r6V,_@Om", objectArray0);
      throwable0.printStackTrace(printStream0);
      ClassUtil.throwIfIOE(throwable0);
      ClassUtil.getRootCause(throwable0);
      ClassUtil.getRootCause(throwable0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.quotedOr(class0, "net.sf.cglib.proxy.java.lang.Double");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      ClassUtil.nonNull(collectionType1, collectionType0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getOuterClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SimpleModule simpleModule0 = new SimpleModule("JSON");
      ObjectMapper objectMapper2 = objectMapper1.registerModule(simpleModule0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-574), objectMapper2, (OutputStream) null, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      MockError mockError0 = new MockError("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer", (Throwable) mockError0);
      ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.nullOrToString(class0);
      String string0 = "annotation";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      batchUpdateException0.getUpdateCounts();
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      System.setCurrentTimeMillis(3129L);
      Class<Double> class1 = Double.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      Throwable throwable0 = null;
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericExceptionTypes();
      constructor0.getParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isJacksonStdImpl(class0);
      String string0 = "com.fasterxml.jackson.core.util.DefaultPrettyPrinter";
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      int int0 = 0;
      constructor0.getTypeParameters();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZERO_LENGTH_ENUM_ARRAY", "com.fasterxml.jackson.core.util.DefaultPrettyPrinter", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      String string1 = "9";
      StackTraceElement stackTraceElement0 = new StackTraceElement("^3uAHw?!G", "AB2?Zc", "9", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("9", "com.fasterxml.jackson.core.util.DefaultPrettyPrinter", "NULL", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      int int1 = 1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("^3uAHw?!G", "com.fasterxml.jackson.core.util.DefaultPrettyPrinter", "9", 1);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("AB2?Zc", "9", "", (-860));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = null;
      try {
        stackTraceElement4 = new StackTraceElement(" (from class ", (String) null, "com.fasterxml.jackson.core.util.DefaultPrettyPrinter", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("-mUH", "-mUH", 2048);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "-mUH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getOuterClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SimpleModule simpleModule0 = new SimpleModule("JSON");
      ObjectMapper objectMapper2 = objectMapper1.registerModule(simpleModule0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-574), objectMapper2, (OutputStream) null, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      MockError mockError0 = new MockError("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer", (Throwable) mockError0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.nameOf(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.nameOf(class2);
      Class<Void> class3 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassUtil.backticked("-![#-IQ9pmS");
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.rawClass(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(w&&6");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTimeoutException0);
      ClassUtil.throwIfIOE(throwable0);
      ClassUtil.getRootCause(throwable0);
      ClassUtil.getRootCause(throwable0);
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      constructor0.getParameterAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getParameterTypes();
      constructor0.getDeclaredAnnotation(class2);
      constructor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ClassUtil.nullOrToString(class0);
      ClassUtil.backticked("bh%'Oqq9ag$!E:");
      ClassUtil.isJacksonStdImpl((Object) "java.lang.Class@0000000001");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1617));
      // Undeclared exception!
      try { 
        placeholderForType0.withValueHandler("bh%'Oqq9ag$!E:");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaringClass(class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, true);
      Class<CollectionType> class4 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.backticked("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`");
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperClasses(class0, class2, false);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaringClass(class2);
      Short short0 = new Short((short)1486);
      ClassUtil.classOf(short0);
      boolean boolean0 = true;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("keyType");
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class2, class0, true);
      Integer integer0 = new Integer(43);
      ClassUtil.isJacksonStdImpl((Object) integer0);
      ClassUtil.findSuperClasses(class2, class2, false);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nullOrToString(class0);
      String string0 = "annotation";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      batchUpdateException0.getUpdateCounts();
      // Undeclared exception!
      try { 
        sQLTransactionRollbackException0.initCause(batchUpdateException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.BatchUpdateException
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "EFZ8", 0);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getGenericSuperclass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getPackageName(class1);
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.classNameOf(classUtil0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("keyUniverse", "Nl//<{v'6`,", hashMap0, (Throwable) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("keyUniverse", "elementType");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // elementType
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getPackageName(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setOutputDecorator(outputDecorator0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 1068L, 4073, 2);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter0, "size", jsonLocation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size
         //  at [Source: UNKNOWN; line: 4073, column: 2]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-355), objectMapper1, byteArrayBuilder0);
      SerializedString serializedString0 = new SerializedString("WRAPPER_OBJECT");
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WRAPPER_OBJECT");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        sQLTransactionRollbackException0.initCause(sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLSyntaxErrorException: WRAPPER_OBJECT
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.nameOf(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.nameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2074);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nonNullString("$2uiw<qN~/+:*+");
      Class<Double> class1 = Double.class;
      ClassUtil.isBogusClass(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.findEnumType(class2);
      Class<String> class3 = String.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class3);
      MockFile mockFile0 = new MockFile("_d9{]14:8,CM%I(X", "$2uiw<qN~/+:*+");
      File file0 = MockFile.createTempFile("keyUniverse", "_d9{]14:8,CM%I(X", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.close();
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "", (Object[]) methodArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(printStream0, "");
      ClassUtil.getClassDescription(jsonMappingException0);
      Class<Object> class4 = Object.class;
      ClassUtil.findEnumType(class4);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.nameOf(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getConstructors(class2);
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class3 = RuntimeException.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, true);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[9];
      accessibleObjectArray0[0] = (AccessibleObject) null;
      accessibleObjectArray0[1] = (AccessibleObject) null;
      accessibleObjectArray0[2] = (AccessibleObject) null;
      accessibleObjectArray0[3] = (AccessibleObject) null;
      accessibleObjectArray0[4] = (AccessibleObject) null;
      accessibleObjectArray0[5] = (AccessibleObject) null;
      accessibleObjectArray0[6] = (AccessibleObject) null;
      accessibleObjectArray0[7] = (AccessibleObject) null;
      accessibleObjectArray0[8] = (AccessibleObject) null;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.AccessibleObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "; line: ";
      ClassUtil.nonNullString("; line: ");
      String string1 = "com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("; line: ", "; line: ", sQLInvalidAuthorizationSpecException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("; line: ", "; line: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ; line: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.isCollectionMapOrArray(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("keyUniverse", "keyUniverse");
      ClassUtil.throwIfError(sQLNonTransientException0);
      ClassUtil.getDeclaredMethods(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<IOException> class3 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, "``", "size");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.io.IOException) must override method 'size'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isProxyType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, false);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.classOf(constructor1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("entrySet");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("4?", "rF", "rF", (-2173));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("rF", "rF", "b-'y_^6?F]", (-2173));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("entrySet", "b-'y_^6?F]", "entrySet", (-2173));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("4s)G~", "4?", "entrySet", (-2173));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("Numeric value (%s) out of range of long (%d - %s)", "[!BE*;+UH", "rF", (-2173));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("; failed to set access: ", "N<4YH", "\"%s\"", 54);
      stackTraceElementArray0[5] = stackTraceElement5;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      mockRuntimeException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, mockRuntimeException0, "entrySet");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class org.evosuite.runtime.mock.java.lang.MockRuntimeException (of class com.fasterxml.jackson.databind.type.ArrayType) must override method 'entrySet'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      String string0 = "Y^2r{2zi +NTH9]1r";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Y^2r{2zi +NTH9]1r", "Y^2r{2zi +NTH9]1r", sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.forEach(consumer0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockIOException mockIOException0 = new MockIOException("; failed to set access: ");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "~#n/n(UD/2am:y", (Throwable) mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ~#n/n(UD/2am:y
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isNonStaticInnerClass(class0);
      MockError mockError0 = new MockError();
      mockError0.toString();
      mockError0.getStackTrace();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        mockError0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }
}
