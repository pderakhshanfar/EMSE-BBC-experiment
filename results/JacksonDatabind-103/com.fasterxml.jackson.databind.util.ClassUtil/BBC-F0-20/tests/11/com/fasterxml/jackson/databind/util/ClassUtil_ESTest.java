/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:39:47 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Float> enumMap0 = new EnumMap<ClientInfoStatus, Float>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.classOf(class1);
      ClassUtil.defaultValue(class1);
      ClassUtil.backticked("");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "org.hibernate.proxy.", (Throwable) sQLClientInfoException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.hibernate.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.node.ArrayNode";
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.node.ArrayNode");
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findEnumType(enum0);
      Class<Float> class0 = Float.class;
      ClassUtil.nameOf(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.classNameOf(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      System.setCurrentTimeMillis(0L);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Float> class1 = Float.TYPE;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
      ClassUtil.isConcrete(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) dataOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "GtG.}<qAf;");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // GtG.}<qAf;
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Void> class0 = Void.class;
      ClassUtil.createInstance(class0, true);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Float> enumMap0 = new EnumMap<ClientInfoStatus, Float>(class1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Float float0 = new Float((-1540.72));
      enumMap0.put(clientInfoStatus0, float0);
      EnumMap<ClientInfoStatus, Float> enumMap1 = new EnumMap<ClientInfoStatus, Float>(enumMap0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.getPackageName(class0);
      Class<Error> class2 = Error.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Void> class0 = Void.class;
      ClassUtil.createInstance(class0, true);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Float> enumMap0 = new EnumMap<ClientInfoStatus, Float>(class1);
      EnumMap<ClientInfoStatus, Float> enumMap1 = new EnumMap<ClientInfoStatus, Float>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      jsonGenerator0.writeRaw('>');
      MockException mockException0 = new MockException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) pipedOutputStream0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.canBeABeanType(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.getPackageName(class4);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientException sQLTransientException0 = new SQLTransientException(mockThrowable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "java.lang.RuntimeExc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Character> class0 = Character.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 8232);
      FromStringDeserializer.findDeserializer(class0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<?> class1 = ClassUtil.classOf(accessPattern0);
      ClassUtil.isProxyType(class0);
      ClassUtil.classOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      Class<Character> class0 = Character.class;
      Character character0 = Character.valueOf('`');
      ClassUtil.verifyMustOverride(class0, character0, (String) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      batchUpdateException0.getNextException();
      batchUpdateException0.getLocalizedMessage();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      jsonFactory2.copy();
      MockFile mockFile0 = new MockFile("'X&7boT.Jk\u0005s", "JSON");
      MockFile mockFile1 = new MockFile(mockFile0, "org.hibernate.proxy.char");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("JSON", "&uC6I/=1n@w_#(l");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // &uC6I/=1n@w_#(l
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.emptyIterator();
      Class<PushbackInputStream> class1 = PushbackInputStream.class;
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.isConcrete((Member) constructor0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 65280);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class1, class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class3 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      Object object0 = new Object();
      CollectionLikeType collectionLikeType0 = collectionType0.withValueHandler(object0);
      ClassUtil.rawClass(collectionLikeType0);
      ClassUtil.backticked("Mh+u;^xFKr");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-614630275));
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.defaultValue(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getPackageName(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(40, 40);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      Class<Error> class2 = Error.class;
      Class<Void> class3 = Void.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class2, class3);
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler(typeFactory0);
      mapType0.withKeyType(mapLikeType0);
      mapLikeType0.withStaticTyping();
      Short short0 = new Short((short)3022);
      MapType mapType1 = mapType0.withKeyValueHandler(short0);
      JavaType javaType0 = mapType1.getSuperClass();
      ClassUtil.findSuperTypes(javaType0, class0, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ArrayNode> class0 = ArrayNode.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<Double> class1 = Double.class;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nonNull((ArrayType) null, (ArrayType) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("annotation", "annotation", (int[]) null);
      sQLTransactionRollbackException0.initCause(batchUpdateException0);
      // Undeclared exception!
      try { 
        sQLTransactionRollbackException0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.nameOf(class1);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isConcrete(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassUtil.emptyIterator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class0 = HashMap.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.", "org.hibernate.proxy.", (-211));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.", "org.hibernate.proxy.", (-2577), sQLWarning0);
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      Class<List> class0 = List.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNullString("array");
      Class<String> class1 = String.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassUtil.emptyIterator();
      TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.", "org.hibernate.proxy.", (-2577));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Short> class0 = Short.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getConstructors(class0);
      Class<ArrayNode> class1 = ArrayNode.class;
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.classNameOf(class1);
      Class<Double> class3 = Double.class;
      ClassUtil.getDeclaredMethods(class3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Byte> class0 = Byte.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getClassDescription((Object) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      ClassUtil.isObjectOrPrimitive(class0);
      System.setCurrentTimeMillis((-2494L));
      ClassUtil.getDeclaredMethods(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "DISABLED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.throwIfError((Throwable) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(42);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "6Ca!_~-)5uw#");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of $43: 6Ca!_~-)5uw#
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = true;
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      constructor0.isAnnotationPresent(class1);
      constructor0.getAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockError mockError0 = new MockError("org.hibernate.proxy.java.lang.String", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Character character0 = Character.valueOf('Z');
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass(character0, class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      enumSet1.clone();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&wP5?]`(QHEBCp", sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.nameOf(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.classOf(class1);
      ClassUtil.classNameOf(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 101;
      intArray0[2] = (-2060);
      intArray0[3] = 3339;
      intArray0[4] = 46;
      intArray0[5] = (-475);
      intArray0[6] = 1536;
      intArray0[7] = (-1244651605);
      intArray0[8] = (-597);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("d%Q<JD{2", intArray0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("d%Q<JD{2", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonParser_Feature1);
      JsonFactory jsonFactory5 = jsonFactory4.setInputDecorator((InputDecorator) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      MockException mockException0 = new MockException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockException0, (Object) null, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was org.evosuite.runtime.mock.java.lang.MockException) (through reference chain: UNKNOWN[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      Class<LinkedList> class0 = LinkedList.class;
      classLoader0.clearAssertionStatus();
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, false);
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaringClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, (Class<?>) null);
      ClassUtil.throwIfError(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      typeFactory1.withClassLoader(classLoader0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      typeFactory1.constructCollectionLikeType((Class<?>) class0, (JavaType) arrayType0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(class0);
      arrayType0.withContentTypeHandler(typeFactory0);
      JavaType javaType0 = arrayType1.containedTypeOrUnknown((-2179));
      typeFactory1.constructCollectionLikeType(class0, javaType0);
      boolean boolean0 = false;
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class0, false);
      ClassUtil.classNameOf("net.sf.cglib.proxy.java.lang.Byte");
      Class<MapType> class1 = MapType.class;
      ClassUtil.getPackageName(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterCount();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.classNameOf(double0);
      Class<Double> class0 = Double.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findEnumType(class3);
      ClassUtil.nameOf((Named) null);
      Class<MapType> class4 = MapType.class;
      ClassUtil.hasClass(double0, class4);
      Class<Annotation> class5 = Annotation.class;
      ClassUtil.getPackageName(class5);
      Class<IOException> class6 = IOException.class;
      ClassUtil.createInstance(class6, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Failed to find default constructor of class ", hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to find default constructor of class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Iterator<Module> iterator0 = ClassUtil.emptyIterator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withKeyValueHandler(typeFactory0);
      MapType mapType2 = mapType1.withKeyTypeHandler(iterator0);
      MapLikeType mapLikeType0 = mapType2.withKeyTypeHandler(typeFactory0);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, true);
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator", "com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator", (-393805500));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      MockError mockError0 = new MockError("#M2fOqAU E)");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "org.hibernate.proxy.java.lang.Short");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Boolean> class0 = Boolean.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ClassUtil.rawClass(javaType0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.wrapperType(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isBogusClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isBogusClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isLocalType(class3, false);
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.isConcrete(class0);
      Class<Object> class4 = Object.class;
      ClassUtil.hasClass(class1, class4);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<IOException> class5 = IOException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class5, "<>U[C^U-Z#h*A*", "^m$A@`");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.IOException` from String \"<>U[C^U-Z#h*A*\": ^m$A@`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nullOrToString(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isProxyType(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class2, class2, false);
      ClassUtil.isLocalType((Class<?>) null, false);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getConstructors(class3);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("soDt(YsM<*G']g}", "soDt(YsM<*G']g}", 2502, sQLClientInfoException0);
      ClassUtil.getRootCause(sQLDataException0);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = null;
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      constructor0.getDeclaredAnnotationsByType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Object> class1 = Object.class;
      ClassUtil.isCollectionMapOrArray(class1);
      SQLWarning sQLWarning0 = new SQLWarning("0Bb3{}AP");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.throwIfError((Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      Object object0 = ClassUtil.nonNull((Object) mockRuntimeException0, (Object) list0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, object0, "P_S7z_;/QI44v:U");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class org.evosuite.runtime.mock.java.lang.MockRuntimeException (of class java.lang.Void) must override method 'P_S7z_;/QI44v:U'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.findSuperClasses(class1, class1, false);
      Class<Object> class3 = Object.class;
      ClassUtil.isConcrete(class3);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findConstructor(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.isConcrete(class3);
      System.setCurrentTimeMillis(270L);
      MockError mockError0 = new MockError("C;=6 ");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<Character> class0 = Character.class;
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.getPackageName(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.isConcrete(class3);
      ClassUtil.nameOf(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class0);
      Class<Float> class4 = Float.class;
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[3] = (JavaType) collectionLikeType0;
      javaTypeArray0[4] = (JavaType) collectionLikeType0;
      javaTypeArray0[5] = (JavaType) collectionLikeType0;
      javaTypeArray0[6] = (JavaType) collectionLikeType0;
      javaTypeArray0[7] = (JavaType) collectionLikeType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class4, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((double) 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AN#Lr#mZ;j4");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, mockFileOutputStream0, byteArray0, 3, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockIOException mockIOException0 = new MockIOException(sQLTransientConnectionException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) mockFileOutputStream0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getClassMethods(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getClassMethods(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findConstructor(class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<SimpleModule> class3 = SimpleModule.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class3, true);
      ClassUtil.quotedOr(list0, "com.fasterxml.jackson.databind.util.ClassUtil");
      Class<AccessibleObject> class4 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassUtil.nullOrToString("Failed to instantiate class ");
      ClassUtil.isJacksonStdImpl((Object) "entrySet");
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.getDeclaredMethods(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getDeclaredAnnotation(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Short> class2 = Short.class;
      ClassUtil.primitiveType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", (-648));
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", (-648));
      Throwable throwable0 = sQLWarning0.fillInStackTrace();
      MockException mockException0 = new MockException("[null]");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vals", "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", (-551), throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: vals
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.hasClass(class1, class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("u+hqRV}i~~Cb");
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Void>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bwrn)'");
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNullString("Bwrn)'");
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      MockException mockException0 = new MockException("JSON");
      Class<Long> class1 = Long.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = new Stack<Class<NoClass>>();
      Class<Integer> class2 = Integer.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<?> class3 = ClassUtil.primitiveType(class1);
      TypeFactory.defaultInstance();
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class4, true);
      constructor0.setAccessible(true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isLocalType(class3, false);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus1.getContextAnnotation(class1);
      ClassUtil.canBeABeanType(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("[]", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", sQLException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "Failed to find default constructor of class ", 157);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Failed to find default constructor of class ", "[]", "Failed to find default constructor of class ", (-7));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "z)", (String) null, 157);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("[]", "z)", "q[o'Eu40+3|cC4gU", (-3296));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("Cannot deserialize value of type %s from number %s: %s", "Failed to find default constructor of class ", "com.fasterxml.jackson.databind.SerializerProvider", 65);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwIfError(sQLDataException0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      Object object0 = new Object();
      Float float0 = new Float(573.8704F);
      ClassUtil.nonNull((Float) null, float0);
      ClassUtil classUtil0 = new ClassUtil();
      SimpleModule simpleModule0 = new SimpleModule();
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      Float float0 = new Float(0.0);
      Float float1 = new Float((-9.223372036854776E18));
      ClassUtil.nonNull(float0, float1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription(float1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.getParameterTypes();
      constructor0.setAccessible(true);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      int[] intArray0 = new int[3];
      intArray0[0] = 1678;
      intArray0[1] = (-4);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[2] = 3406;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "com.fasterxml.jackso";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackso");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, jsonMappingException0);
      batchUpdateException0.addSuppressed(jsonMappingException0);
      SQLWarning sQLWarning0 = new SQLWarning("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Object object0 = new Object();
      ClassUtil.getClassDescription(object0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.getEnclosingClass(class3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.primitiveType(class1);
      TypeFactory.defaultInstance();
      Long long0 = new Long(434L);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Long long0 = new Long(893L);
      Class<LinkedList> class4 = LinkedList.class;
      typeFactory0.constructCollectionType(class4, class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.findConstructor(class5, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getSuppressed();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Object", sQLClientInfoException1);
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.primitiveType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1790));
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class2, true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassUtil.nullOrToString("Failed to instantiate class ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.primitiveType(class0);
      TypeFactory.defaultInstance();
      Long long0 = new Long((-837L));
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      ClassUtil.createInstance(class0, false);
      ClassUtil.isConcrete(class2);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^H~");
      sQLRecoverableException0.getSuppressed();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.setAccessible(true);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isLocalType(class0, true);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      String string0 = null;
      ClassUtil.nonNullString((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructCollectionType(class2, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassUtil.nullOrToString("Failed to instantiate class ");
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class3);
      ClassUtil.primitiveType(class1);
      Long long0 = new Long((-4131L));
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, false);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.isBogusClass(class4);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<SimpleModule> class5 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class5, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[0];
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap1, annotationMapArray0);
      Constructor constructor1 = (Constructor)annotatedConstructor0.getMember();
      ClassUtil.isConcrete((Member) constructor1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.hasClass((Object) null, class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      Class<ArrayNode> class3 = ArrayNode.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.setAccessible(false);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isLocalType((Class<?>) null, true);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "x4DR$p7ut;Jen");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      constructor0.isAnnotationPresent(class1);
      constructor0.getAnnotations();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long(2424L);
      ClassUtil.classNameOf(long0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getPackageName(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class2, class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`java.lang.Long`", "h)fhr22cT,7?F*1W_", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ev", sQLClientInfoException0);
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.isLocalType(class3, true);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.isLocalType(class4, true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = " -- suspect a DoS attack based on hash collisions";
      SQLDataException sQLDataException0 = new SQLDataException("ZERO_LENGTH_ENUM_ARRAY", " -- suspect a DoS attack based on hash collisions");
      ClassUtil.throwIfError(sQLDataException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " -- suspect a DoS attack based on hash collisions", false);
      iOContext0.allocConcatBuffer();
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<SimpleType> class2 = SimpleType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, javaTypeArray0, javaTypeArray0[2]);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("elementType");
      // Undeclared exception!
      try { 
        referenceType1.withContentValueHandler(mockRuntimeException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassUtil.nullOrToString("Failed to instantiate class ");
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.primitiveType(class4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Long long0 = new Long(893L);
      Class<LinkedList> class5 = LinkedList.class;
      typeFactory0.constructCollectionType(class5, class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      ClassUtil.createInstance(class1, false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.nullOrToString(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Character> class2 = Character.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findSuperClasses(class1, class3, true);
      ClassUtil.isJacksonStdImpl(class3);
      Class<String> class4 = String.class;
      ClassUtil.primitiveType(class4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Long long0 = new Long(893L);
      Class<LinkedList> class5 = LinkedList.class;
      typeFactory0.constructCollectionType(class5, class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      Class<SimpleType> class6 = SimpleType.class;
      ClassUtil.findConstructor(class6, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.hasClass(class1, class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class3);
      ClassUtil.classOf((Object) null);
      SQLWarning sQLWarning0 = new SQLWarning("u+hqRV}i~~Cb", "u+hqRV}i~~Cb", 0);
      ClassUtil.getRootCause(sQLWarning0);
      ClassUtil.hasClass(class1, class2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassUtil.nullOrToString("Failed to instantiate class ");
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Character> class2 = Character.TYPE;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.primitiveType(class4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      collectionLikeType0.getTypeName();
      Class<NoClass> class5 = NoClass.class;
      typeFactory0.constructReferenceType(class5, collectionLikeType0);
      Long long0 = new Long(893L);
      Class<LinkedList> class6 = LinkedList.class;
      typeFactory0.constructCollectionType(class6, class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      Class<SimpleType> class7 = SimpleType.class;
      ClassUtil.findConstructor(class7, false);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getGenericInterfaces(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) byteArrayOutputStream0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: java.sql.SQLSyntaxErrorException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[4];
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      annotationMapArray0[0] = annotationMap1;
      AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap1, annotationMap1);
      annotationMapArray0[1] = annotationMap2;
      AnnotationMap annotationMap3 = AnnotationMap.of(class1, (Annotation) null);
      annotationMapArray0[2] = annotationMap3;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap0, annotationMapArray0);
      Member member0 = annotatedConstructor0.getMember();
      ClassUtil.isConcrete(member0);
      ClassUtil.getPackageName(class1);
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isObjectOrPrimitive(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("primitive");
      MockFile mockFile1 = new MockFile(mockFile0, "d|.).yG{%.-Mn?r1g");
      mockFile0.renameTo(mockFile1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", ">>EkYdwEOyYm#Z`Y", (Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<IOException> class2 = IOException.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class3, false);
      ClassUtil.isJacksonStdImpl((Object) list0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class4);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float(0.0);
      ClassUtil.nonNull(float0, float0);
      ClassUtil classUtil0 = new ClassUtil();
      Object object0 = new Object();
      ClassUtil.getClassDescription(object0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator((OutputDecorator) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory1.copy();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      jsonFactory2.setRootValueSeparator("`java.lang.Object`");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockException mockException0 = new MockException("JSON");
      ClassUtil.getPackageName(class0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isObjectOrPrimitive(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("primitive");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      MockFile mockFile1 = new MockFile(mockFile0, "d|.).yG{%.-Mn?r1g");
      mockFile0.renameTo(mockFile1);
      jsonFactory3.createGenerator((DataOutput) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Throwable throwable0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", ">>EkYdwEOyYm#Z`Y", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassUtil.nullOrToString("Failed to instantiate class ");
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<IOException> class3 = IOException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Long long0 = new Long(893L);
      Class<LinkedList> class4 = LinkedList.class;
      typeFactory0.constructCollectionType(class4, class1);
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.findConstructor(class5, false);
      Class<String> class6 = String.class;
      ClassUtil.nameOf(class6);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class3, "R\"", "MG<#Dk3#{^dv}");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.IOException` from String \"R\"\": MG<#Dk3#{^dv}
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.classNameOf((Object) null);
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("ZERO_LENGTH_ENUM_ARRAY", " -- suspect a DoS attack based on hash collisions");
      ClassUtil.throwIfError(sQLDataException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " -- suspect a DoS attack based on hash collisions", false);
      iOContext0.allocConcatBuffer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("HI");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HI
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.setAccessible(false);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isLocalType(class0, false);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.throwIfRTE(mockThrowable0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      ClassUtil.isNonStaticInnerClass(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.throwIfRTE(mockThrowable0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.isConcrete(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.nameOf(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`com.fasterxml.jackson.databind.type.ArrayType`");
      mockPrintStream0.append((CharSequence) "`com.fasterxml.jackson.databind.type.ArrayType`");
      Class<Character> class3 = Character.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      constructor0.setAccessible(false);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isLocalType(class0, false);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class2);
      ClassUtil.hasClass(class1, class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      File file0 = MockFile.createTempFile("Null constructor not allowed", "enum");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Null constructor not allowed", "enum");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // enum
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.isConcrete(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.nameOf(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      SQLException sQLException0 = new SQLException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("5>2~`#h,U");
      mockPrintStream0.append((CharSequence) "`com.fasterxml.jackson.databind.type.ArrayType`");
      sQLException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLException0);
      Class<Object> class4 = Object.class;
      ClassUtil.isJacksonStdImpl(class4);
      Class<Long> class5 = Long.class;
      ClassUtil.getDeclaredMethods(class5);
      Class<RuntimeException> class6 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class6, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("): ");
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockFileOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "): ");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ): 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.throwIfRTE(mockThrowable0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassUtil.nullOrToString("Failed to instantiate class ");
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.primitiveType(class4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      typeFactory0.constructReferenceType(class4, placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      Float float0 = new Float((float) 1);
      // Undeclared exception!
      try { 
        referenceType0.withContentTypeHandler(float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = new Integer(2294);
      ClassUtil.classOf(integer0);
      ClassUtil.nonNullString("u2F&:zr+^-,E2uSx ");
      int[] intArray0 = new int[7];
      intArray0[0] = 2294;
      intArray0[1] = 2294;
      intArray0[2] = 2294;
      intArray0[3] = 2294;
      intArray0[4] = 2294;
      intArray0[5] = 2294;
      intArray0[6] = 2294;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("entrySet", "COLOR", 2294, intArray0);
      MockError mockError0 = new MockError(batchUpdateException0);
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<SimpleType> class1 = SimpleType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class1);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.SimpleType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.nonNullString("Failed to instantiate class ");
      ClassUtil.nonNullString("entrySet");
      ClassUtil.isJacksonStdImpl((Object) "entrySet");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.isLocalType(class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findEnumType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.hasClass((Object) null, class2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(">", ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      sQLTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short short0 = (short)48;
      Short short1 = new Short((short)48);
      ClassUtil.getClassDescription(short1);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      Float float0 = new Float(0.0);
      ClassUtil.nonNull(float0, float0);
      ClassUtil classUtil0 = new ClassUtil();
      Object object0 = new Object();
      ClassUtil.getClassDescription(object0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator((OutputDecorator) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("`java.lang.Object`");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      MockException mockException0 = new MockException("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put(")]", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("\"%s\"", clientInfoStatus1);
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.replace("\"%s\"", clientInfoStatus2);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(")]", ")]", (-1), hashMap0);
      ClassUtil.throwIfError(sQLClientInfoException0);
      Class<SimpleType> class0 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.findEnumType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.classOf((Object) null);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings.emptyBindings();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      try { 
        defaultDeserializationContext_Impl0.resolveSubType(simpleType0, " F:m+IYv1a*3");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id ' F:m+IYv1a*3' as a subtype of [simple type, class java.lang.Object]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.core.io.OutputDecorator", "I'A{x+", (-1457));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.core.io.OutputDecorator", sQLDataException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("serialVersionUID", "I'A{x+", "I'A{x+", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("I'A{x+", "com.fasterxml.jackson.core.io.OutputDecorator", "Unexpected problem: chain of filtered context broken", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("com.fasterxml.jackson.core.io.OutputDecorator", "serialVersionUID", "cQ\")qi]q+eUa*0DP", (-1457));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("k<;0f<}:U#Qi.}q.uFb", "cQ\")qi]q+eUa*0DP", "Cannot access ", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("I'A{x+", "BS3j", "vals", (-1457));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("com.fasterxml.jackson.core.io.OutputDecorator", "Cannot access ", "ZERO_LENGTH_ENUM_ARRAY", (-1457));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "vals", "com.fasterxml.jackson.core.io.OutputDecorator", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      sQLNonTransientException0.fillInStackTrace();
      ClassUtil.throwIfIOE(sQLNonTransientException0);
      Class<Void> class0 = Void.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isJacksonStdImpl((Object) sQLNonTransientException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("ZERO_LENGTH_ENUM_ARRAY", " -- suspect a DoS attack based on hash collisions");
      ClassUtil.throwIfError(sQLDataException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, " -- suspect a DoS attack based on hash collisions", false);
      iOContext0.allocConcatBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating("ZERO_LENGTH_ENUM_ARRAY");
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(" -- suspect a DoS attack based on hash collisions", " -- suspect a DoS attack based on hash collisions");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  -- suspect a DoS attack based on hash collisions
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<NoClass> class1 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotation(class1);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getAnnotatedParameterTypes();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      String string0 = "Cannot handle managed/back reference '";
      ClassUtil.nonNullString("Cannot handle managed/back reference '");
      Class<Boolean> class2 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[4];
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      annotationMapArray0[0] = annotationMap1;
      AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap1, annotationMap1);
      annotationMapArray0[1] = annotationMap2;
      AnnotationMap annotationMap3 = AnnotationMap.of(class1, (Annotation) null);
      annotationMapArray0[2] = annotationMap3;
      annotationMapArray0[3] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap0, annotationMapArray0);
      Member member0 = annotatedConstructor0.getMember();
      ClassUtil.isConcrete(member0);
      ClassUtil.getPackageName(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("net.sf.cglib.proxy.java.lang.String", "net.sf.cglib.proxy.java.lang.String", mockRuntimeException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasClass(class2, class2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      Class<String> class3 = String.class;
      ClassUtil.findRawSuperTypes(class0, class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.hasClass(class1, class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("u+hqRV}i~~Cb");
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class3, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // u+hqRV}i~~Cb
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bwrn)'");
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.nonNullString("Bwrn)'");
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.getDeclaredFields(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      SQLException sQLException0 = new SQLException((String) null, sQLNonTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLException0);
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "Bwrn)'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bwrn)'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("h)fhr22cT,7?F*1W_", hashMap0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{%sF^'v5%V", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0, "h)fhr22cT,7?F*1W_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // h)fhr22cT,7?F*1W_
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaringClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.hasClass((Object) null, class2);
      Class<NoClass> class3 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Byte> class1 = Byte.TYPE;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1790));
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.emptyIterator();
      ClassUtil.getClassDescription(class2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.isConcrete(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.nameOf(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
      SQLException sQLException0 = new SQLException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`com.fasterxml.jackson.databind.type.ArrayType`");
      mockPrintStream0.print(243L);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "`com.fasterxml.jackson.databind.type.ArrayType`");
      sQLException0.printStackTrace(printStream0);
      sQLException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLException0);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getDeclaredMethods(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Method method0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.isLocalType(class1, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^H~");
      sQLRecoverableException0.getSuppressed();
      ClassUtil.primitiveType(class0);
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.canBeABeanType(class1);
      Class<Boolean> class3 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      MockException mockException0 = new MockException("gRF*VQwM5");
      ClassUtil.throwRootCauseIfIOE(mockException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "Z ko");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "B#c5qR2sU8v6r";
      SQLException sQLException0 = new SQLException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B#c5qR2sU8v6r", "B#c5qR2sU8v6r", sQLException0);
      sQLTransactionRollbackException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0, "B#c5qR2sU8v6r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // B#c5qR2sU8v6r
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("^H~");
      sQLRecoverableException0.getSuppressed();
      sQLRecoverableException0.printStackTrace();
      Throwable throwable0 = ClassUtil.getRootCause(sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      ClassUtil.canBeABeanType(class0);
      sQLRecoverableException0.printStackTrace();
      ClassUtil.classOf(throwable0);
      ClassUtil.getClassMethods(class0);
      Class<String> class1 = String.class;
      ClassUtil.isConcrete(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      sQLRecoverableException0.fillInStackTrace();
      ClassUtil.isBogusClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ^H~
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("NULL", "entrySet", 189, (Throwable) null);
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NULL", "entrySet", sQLFeatureNotSupportedException0);
      sQLNonTransientException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("#fcjHV' VtEif%pPWO");
      sQLTransactionRollbackException0.getStackTrace();
      sQLNonTransientException0.addSuppressed(sQLTransactionRollbackException0);
      sQLNonTransientException0.setNextException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withKeyType(mapType0);
      MapType mapType3 = mapType2.withContentTypeHandler(class1);
      mapType3.getSuperClass();
      ClassUtil.rawClass(mapType3);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = new Integer(2294);
      Class<?> class0 = ClassUtil.classOf(integer0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isJacksonStdImpl(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.primitiveType(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class3 = ArrayType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2294);
      JavaType javaType0 = typeFactory0.constructReferenceType(class3, placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, placeholderForType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      Class<MapType> class4 = MapType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class2, (JavaType) referenceType1, (JavaType) referenceType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Double with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil.backticked("vals");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "unknown", 2554);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("vals", "`vals`", sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      sQLNonTransientException0.printStackTrace();
      // Undeclared exception!
      try { 
        sQLNonTransientException0.initCause(sQLTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientConnectionException: 
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil.nullOrToString("Failed to instantiate class ");
      String string0 = "entrySet";
      ClassUtil.nonNullString("entrySet");
      ClassUtil.isJacksonStdImpl((Object) "entrySet");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<AccessPattern> class0 = AccessPattern.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(defaultDeserializationContext0, class0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.util.AccessPattern` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.backticked((String) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.nonNullString(")1hi6r");
      String string0 = ClassUtil.getClassDescription(")1hi6r");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLNonTransientConnectionException1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.spliterator();
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      ClassUtil.backticked("org.hibernate.proxy.");
      Class<Object> class1 = Object.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.classOf(")1hi6r");
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (byte)70);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      ClassUtil.throwIfError(throwable0);
      String string1 = ClassUtil.getPackageName(class0);
      assertFalse(string1.equals((Object)string0));
  }
}
