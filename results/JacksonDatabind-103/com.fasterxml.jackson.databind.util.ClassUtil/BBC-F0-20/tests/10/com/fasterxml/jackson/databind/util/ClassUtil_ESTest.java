/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:39:24 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.core.util.Separators;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Nulls nulls0 = Nulls.SET;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, objectMapper1, (OutputStream) null, byteArray0, (byte)68, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("JSON");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withTypeHandler(class0);
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(class0);
      ClassUtil.rawClass(collectionType2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType2, collectionType2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, referenceType0, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      serializationFeatureArray0[3] = serializationFeature1;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4, objectMapper2, (Writer) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findSuperTypes(class1, class0, list0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class1 = Integer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(96, 96);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      ArrayType arrayType0 = typeFactory2.constructArrayType(class0);
      ClassUtil.isJacksonStdImpl((Object) arrayType0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getParameterTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      MockError mockError0 = new MockError("java.util.List");
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockError0, (Object) float0, "L");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "]3<VSo^9");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "org.hibernate.proxy.java.lang.Float");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Illegal white space character (code 0x%s) as character #%d of 4-char base64 unit: can only used between units");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      jsonMappingException0.printStackTrace((PrintWriter) mockPrintWriter0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapType` from number null: org.hibernate.proxy.java.lang.Float
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockError mockError0 = new MockError();
      Throwable throwable0 = mockError0.fillInStackTrace();
      mockError0.initCause(throwable0);
      mockError0.getStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "s]20");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", (Throwable) sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{n*^5;_C1", "b{NVU*Lx+nEmg ']\"", jsonMappingException0);
      sQLClientInfoException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", "java.lang.reflect.Ac");
      MockError mockError0 = new MockError("[]", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "~aO+");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<TextNode> class1 = TextNode.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<Byte> class2 = Byte.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isLocalType(class1, true);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      Byte byte0 = new Byte((byte) (-1));
      ClassUtil.isJacksonStdImpl((Object) byte0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.quotedOr((Object) null, (String) null);
      ClassUtil.getDeclaringClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" with 1 type parameter: class expects ", (String) null, (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getPackageName(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class2);
      Class<Character> class3 = Character.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findConstructor(class3, true);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.clear();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      Class<ReferenceType> class1 = ReferenceType.class;
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) mapLikeType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) mapLikeType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[8] = (JavaType) mapLikeType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings1, (JavaType) mapLikeType0, javaTypeArray0, javaTypeArray0[8]);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0, (Object) typeBindings0, (Object) referenceType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class2, (JavaType) referenceType0, (JavaType) referenceType0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(mapType0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler(arrayType1);
      MapLikeType mapLikeType2 = mapLikeType1.withKeyType(javaTypeArray0[0]);
      ClassUtil.rawClass(mapLikeType2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-4243);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, mockRuntimeException0);
      SQLDataException sQLDataException0 = new SQLDataException("array", "java.lang.Object", (-4243), batchUpdateException0);
      MockIOException mockIOException0 = new MockIOException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Short> enumMap0 = new EnumMap<AccessPattern, Short>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Short short0 = new Short((short)2748);
      enumMap0.put(accessPattern0, short0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 80);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<?> class1 = ClassUtil.classOf(accessPattern0);
      ClassUtil.classNameOf(accessPattern0);
      Class<Object> class2 = Object.class;
      ClassUtil.getGenericSuperclass(class2);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      typeBindings0.equals((Object) null);
      ArrayType arrayType1 = arrayType0.withContentValueHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class2, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "net.sf.cglib.proxy.", arrayType1);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isProxyType(class1);
      int int0 = 34;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[fE2", "U|WQ*NCaN4QfK");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("U|WQ*NCaN4QfK", "org.hibernate.proxy.", 34, (Map<String, ClientInfoStatus>) null, sQLSyntaxErrorException0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.hibernate.proxy.", "[fE2", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      MockError mockError0 = new MockError(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Short> enumMap0 = new EnumMap<AccessPattern, Short>(class1);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isLocalType(class2, true);
      Class<Float> class3 = Float.class;
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<TextNode> class0 = TextNode.class;
      ClassUtil.getOuterClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      Double double0 = new Double(0.0);
      ClassUtil.getClassDescription(double0);
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("kq", "kq", (-2641));
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.io.InputStream", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.canBeABeanType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockError mockError0 = new MockError("0u`!!$6E:,}eat6>", (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Void>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      enumSet1.clear();
      ClassUtil.findEnumType(enumSet0);
      Class<IOException> class0 = IOException.class;
      Class<Short> class1 = Short.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(",r6ZhVI;23");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("primitive", mockIOException0);
      sQLTransientConnectionException0.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.hibernate.proxy.java.io.IOException", "primitive", (-2014050147), sQLNonTransientConnectionException0);
      SQLException sQLException0 = new SQLException("primitive", sQLInvalidAuthorizationSpecException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.backticked((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      ClassUtil.isObjectOrPrimitive(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("annotation", (String) null, (-2));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[null]", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        sQLTransactionRollbackException0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isLocalType(class1, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("@jFtk*");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", sQLDataException0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLDataException0.addSuppressed(sQLFeatureNotSupportedException0);
      ClassUtil.throwIfRTE(sQLDataException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.isBogusClass(class0);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Long> class1 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-1207));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<TextNode> class0 = TextNode.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isLocalType((Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("primitive");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("primitive", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PrintStream printStream0 = mockPrintStream0.append('y');
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte) (-48);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 8232, (ObjectCodec) null, printStream0, byteArray1, (byte) (-110), true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("primitive");
      Separators separators0 = PrettyPrinter.DEFAULT_SEPARATORS;
      MinimalPrettyPrinter minimalPrettyPrinter1 = minimalPrettyPrinter0.setSeparators(separators0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter1);
      MockException mockException0 = new MockException("net.sf.cglib.proxy.java.lang.Object");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: net.sf.cglib.proxy.java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<AccessibleObject>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) null, (List<JavaType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Float> class2 = Float.class;
      ClassUtil.getEnclosingClass(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isBogusClass(class3);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.isProxyType(class1);
      Class<Object> class5 = Object.class;
      ClassUtil.findSuperTypes(class2, class5);
      Class<AccessibleObject> class6 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class6);
      Class<NoClass> class7 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class7);
      Class<MapType> class8 = MapType.class;
      ClassUtil.getDeclaringClass(class8);
      String string0 = "net.sf.cglib.proxy.java.lang.annotation.Annotation";
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("9doael5}", "net.sf.cglib.proxy.java.lang.annotation.Annotation", sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("9doael5}", sQLRecoverableException0);
      sQLFeatureNotSupportedException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      Class<?> class0 = ClassUtil.classOf(placeholderForType1);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.quotedOr(", proylem: ", ", proylem: ");
      ClassUtil.rawClass(placeholderForType0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("primitive");
      Class<Character> class0 = Character.class;
      ClassUtil.getConstructors(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[null]", "[null]", (-3));
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class1);
      MockIOException mockIOException0 = new MockIOException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.Object");
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.canBeABeanType(class0);
      MockIOException mockIOException0 = new MockIOException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("enum", "#&_~{G\"yX&)");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 5149, (ObjectCodec) null, mockPrintWriter0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      MockError mockError0 = new MockError((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "p|d@J", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getConstructors(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Void> class2 = Void.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Short short0 = new Short((short)2390);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isProxyType(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class0, class2, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Double> class1 = Double.class;
      ClassUtil.getClassMethods(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nonNullString((String) null);
      Class<String> class2 = String.class;
      ClassUtil.hasClass("", class2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor2.getDeclaredAnnotations();
      ClassUtil.getEnclosingClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory1, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-7);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0, byteArray0, (byte) (-7), true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      MockIOException mockIOException0 = new MockIOException();
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "zbG88elLFn/_dg", (-630), longArray0, mockIOException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("zbG88elLFn/_dg", "zbG88elLFn/_dg", mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: zbG88elLFn/_dg
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.toString();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      MockIOException mockIOException0 = new MockIOException();
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Conflicting %s creators: already had %s creator %s, encountered another: %s", "G^H=uz<:@1?j", (-1279), longArray0, mockIOException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Too few bytes available: missing ", "net.sf.cglib.proxy.", mockIOException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-52));
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isLocalType(class1, true);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 3487);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isLocalType(class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isProxyType(class0);
      List<Class<?>> list0 = new Stack<Class<RuntimeException>>();
      Class<Double> class1 = Double.TYPE;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.nameOf(class0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      ClassUtil.throwIfRTE(sQLDataException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<ArrayType> class1 = ArrayType.class;
      boolean boolean0 = true;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      Class<?> class0 = ClassUtil.classOf(placeholderForType1);
      ClassUtil.findClassAnnotations(class0);
      placeholderForType1.isThrowable();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class2 = String.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassUtil.backticked("!=9rE$X=:P?7<]jH??");
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.nameOf(class1);
      constructor0.getGenericExceptionTypes();
      MockFile.createTempFile("[field ", "a3TRvEx");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      Class<?> class0 = ClassUtil.classOf(placeholderForType1);
      ClassUtil.findClassAnnotations(class0);
      placeholderForType1.isThrowable();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getEnclosingClass(class2);
      Class<Void> class3 = Void.class;
      ClassUtil.createInstance(class3, true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class2);
      Class<Void> class3 = Void.class;
      ClassUtil.createInstance(class3, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getGenericExceptionTypes();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.isConcrete((Member) constructor0);
      TextNode textNode0 = TextNode.valueOf("org.hibernate.proxy.java.io.InputStream");
      TextNode textNode1 = new TextNode("org.hibernate.proxy.java.io.InputStream");
      Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any(com.fasterxml.jackson.databind.JsonNode.class) , any(com.fasterxml.jackson.databind.JsonNode.class));
      textNode0.equals(comparator0, (JsonNode) textNode1);
      TextNode textNode2 = ClassUtil.nonNull(textNode0, textNode1);
      ClassUtil.classNameOf(textNode2);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.nameOf(class1);
      SQLDataException sQLDataException0 = new SQLDataException("`com.fasterxml.jackson.databind.type.CollectionType`");
      MockFile.createTempFile("`com.fasterxml.jackson.databind.type.CollectionType`", "`com.fasterxml.jackson.databind.type.CollectionType`");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.hasClass(class1, class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      objectMapper0.setSerializerFactory(beanSerializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      Class<?> class0 = ClassUtil.classOf(placeholderForType1);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.quotedOr(", proylem: ", ", proylem: ");
      Class<?> class1 = ClassUtil.rawClass(placeholderForType0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class3, true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Float> class0 = Float.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Long long0 = new Long(0L);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "koB4mi";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "F-");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("koB4mi", "F-", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // F-
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isLocalType(class1, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "entrySet", (-1997), (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("local/anonymous", "local/anonymous", 3853);
      sQLFeatureNotSupportedException0.setNextException(sQLDataException0);
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, false);
      TypeBindings typeBindings0 = TypeBindings.create(class0, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom(javaTypeArray0[1], (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Float> class0 = Float.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Long long0 = new Long(0L);
      String string0 = "";
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1038);
      Class<Void> class0 = Void.class;
      ClassUtil.isProxyType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      TextNode textNode0 = new TextNode("Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`");
      Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(com.fasterxml.jackson.databind.JsonNode.class) , any(com.fasterxml.jackson.databind.JsonNode.class));
      LongNode longNode0 = LongNode.valueOf((-976L));
      longNode0.asText();
      textNode0.equals(comparator0, (JsonNode) longNode0);
      ClassUtil.nonNull(textNode0, textNode0);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.backticked("Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classNameOf((Object) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long((-1413L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-7);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1349, objectMapper0, bufferedOutputStream0, byteArray0, 2288, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte) (-7);
      longArray0[3] = (long) (byte)14;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (byte)30;
      MockIOException mockIOException0 = new MockIOException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("elementType", "[null]", 445, longArray0, mockIOException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[null]", "elementType", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: [null]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1038);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Long long0 = new Long(1038);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Long long1 = new Long((-3088L));
      ClassUtil.isJacksonStdImpl((Object) long1);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(",G5K@btD1Q-bxV>Nr!");
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) mockRuntimeException0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, mockRuntimeException0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      objectMapper0.setSerializerFactory(beanSerializerFactory0);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Float> class1 = Float.TYPE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.nonNullString("Q62O.");
      Class<Long> class4 = Long.class;
      Class<RuntimeException> class5 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class4, class5, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.backticked("Q62O.");
      Character character0 = new Character('O');
      ClassUtil.isJacksonStdImpl((Object) character0);
      MockError mockError0 = new MockError();
      ClassUtil.throwIfIOE(mockError0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Long> class0 = Long.class;
      defaultDeserializationContext_Impl0.weirdStringException("sjl>F", class0, "[null]");
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperClasses(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassUtil.nonNullString("M+mn$");
      ClassUtil.classNameOf("M+mn$");
      Class<MapType> class0 = MapType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getClassDescription("`java.lang.String`");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, "`java.lang.String`", "`java.lang.String`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class com.fasterxml.jackson.databind.type.MapLikeType) must override method '`java.lang.String`'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getGenericExceptionTypes();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.isConcrete((Member) constructor0);
      TextNode textNode0 = TextNode.valueOf("org.hibernate.proxy.java.io.InputStream");
      TextNode textNode1 = new TextNode("org.hibernate.proxy.java.io.InputStream");
      Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(com.fasterxml.jackson.databind.JsonNode.class) , any(com.fasterxml.jackson.databind.JsonNode.class));
      textNode0.equals(comparator0, (JsonNode) textNode1);
      TextNode textNode2 = ClassUtil.nonNull(textNode0, textNode1);
      ClassUtil.classNameOf(textNode2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nameOf((Named) null);
      ClassUtil classUtil0 = new ClassUtil();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(typeFactory0);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withStaticTyping();
      CollectionLikeType collectionLikeType3 = collectionLikeType2.withValueHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType3, (Class<?>) class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1275));
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.backticked("Q62O.");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.backticked("!=9rE$X=:P?7<]jH??");
      ClassUtil.emptyIterator();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("@`i$*H)M>b>{hV~v");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockRuntimeException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!=9rE$X=:P?7<]jH??", "`!=9rE$X=:P?7<]jH??`", sQLNonTransientConnectionException0);
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "|W%K/P_G_y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<String> class3 = String.class;
      ClassUtil.isCollectionMapOrArray(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class5);
      Class<AccessPattern> class6 = AccessPattern.class;
      ClassUtil.findEnumType(class6);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("cm<m");
      Throwable throwable0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("zky;pitHqp.&TQm[t", "1Y", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "keyUniverse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.ArrayType with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Float> class1 = Float.TYPE;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl((Object) class3);
      Class<String> class5 = String.class;
      ClassUtil.findRawSuperTypes(class5, class2, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) null);
      SQLException sQLException0 = new SQLException("SB", "JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: SB
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.deser.DeserializationProblemHandler");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonParser jsonParser0 = jsonFactory3.createParser("JSON");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON");
      ClassUtil.throwIfError(sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory4 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((Writer) charArrayWriter0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException.from(jsonGenerator0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", (Throwable) jsonMappingException1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(" q|FRf@l<S0ERJ#z8n");
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Float> class0 = Float.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class0);
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.isJacksonStdImpl((Object) class2);
      Class<NoClass> class3 = NoClass.class;
      Class<Long> class4 = Long.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      ClassUtil.quotedOr(mockThrowable0, "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`");
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.nameOf(class2);
      constructor0.getGenericExceptionTypes();
      MockFile.createTempFile("(c`5TN1BrRJ'}|KLO8&", "`com.fasterxml.jackson.databind.type.CollectionType`");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      ClassUtil.isConcrete((Member) constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.nameOf(class2);
      constructor0.getGenericExceptionTypes();
      MockFile.createTempFile("`com.fasterxml.jackson.databind.type.CollectionType`", "`com.fasterxml.jackson.databind.type.CollectionType`");
      ClassUtil.findSuperClasses(class2, class0, false);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperClasses(class1, class0, true);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.nameOf(class2);
      constructor0.getGenericExceptionTypes();
      MockFile.createTempFile("`com.fasterxml.jackson.databind.type.CollectionType`", "`com.fasterxml.jackson.databind.type.CollectionType`");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<IOException> class2 = IOException.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.isLocalType(class3, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("primitive", "size", (-2344), (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      Class<?> class0 = ClassUtil.classOf(placeholderForType1);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.quotedOr(", proylem: ", ", proylem: ");
      ClassUtil.rawClass(placeholderForType0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Object object0 = new Object();
      Class<Float> class2 = Float.class;
      ClassUtil.findConstructor(class2, false);
      Class<Void> class3 = Void.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Integer integer0 = new Integer((-3058));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nameOf((Named) null);
      ClassUtil classUtil0 = new ClassUtil();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(70);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      System.setCurrentTimeMillis(70);
      Character.valueOf('d');
      ClassUtil.getClassDescription((Object) null);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getEnclosingClass(class2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "[null]", (Throwable) sQLTransactionRollbackException0);
      ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nameOf((Named) null);
      ClassUtil classUtil0 = new ClassUtil();
      int int0 = 70;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(70);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      Class<?> class0 = ClassUtil.classOf(placeholderForType1);
      ClassUtil.findClassAnnotations(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      System.setCurrentTimeMillis((-3058));
      Character.valueOf('i');
      ClassUtil.getClassDescription(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getEnclosingClass(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      Class<Long> class2 = Long.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isLocalType(class0, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Error> class1 = Error.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("keyType", class1, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Error` from String \"keyType\":  (through reference chain: UNKNOWN[?])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      byteArray0[8] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isProxyType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)13);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "6.");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of $14: 6.
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-3058));
      Class<?> class0 = ClassUtil.classOf(placeholderForType1);
      ClassUtil.findClassAnnotations(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.getClassMethods(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Double double0 = new Double(2.2250738585072014E-308);
      ClassUtil.nonNull(double0, double0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.nameOf(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLClientInfoException0);
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      System.setCurrentTimeMillis((-3058));
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.quotedOr(class1, "+Z^|");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      objectMapper0.disableDefaultTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      objectMapper1.setTypeFactory(typeFactory0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException("\"class com.fasterxml.jackson.databind.type.MapLikeType\"", throwable0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // \"class com.fasterxml.jackson.databind.type.MapLikeType\"
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Integer> class1 = Integer.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.canBeABeanType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isLocalType(class3, false);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.nameOf(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLClientInfoException0);
      ClassUtil.backticked("size");
      System.setCurrentTimeMillis((-1572L));
      ClassUtil.isNonStaticInnerClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.quotedOr((Object) null, "size");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      objectMapper2.setTypeFactory(typeFactory0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException("Failed to find default constructor of class ", throwable0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to find default constructor of class 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.primitiveType(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b-J|s@Hl|Bvx%");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-39);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-13);
      ClassUtil.quotedOr((Object) null, "com.fasterxml.jacks");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte) (-80));
      TypeBindings typeBindings0 = null;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      ClassUtil.classOf(placeholderForType0);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findClassAnnotations(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "com.fasterxml.jackson.databind.deser.BeanDeserializer$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, false);
      JsonMappingException.from((JsonParser) null, "URnE0ow(");
      ClassUtil.throwIfError((Throwable) null);
      JsonMappingException.from((JsonGenerator) null, "Spill-over slots in symbol table with ", (Throwable) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, "net.sf.cglib.proxy.java.lang.Float", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException1.setNextException(sQLDataException0);
      sQLInvalidAuthorizationSpecException1.spliterator();
      sQLInvalidAuthorizationSpecException1.addSuppressed(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecException0.initCause(sQLDataException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "/(^:(CQ[c.(RBiS6");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // /(^:(CQ[c.(RBiS6
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.nameOf(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLClientInfoException0);
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      System.setCurrentTimeMillis((-1572L));
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<String> class2 = String.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.quotedOr(sQLClientInfoException0, "annotation");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper3 = objectMapper2.setTypeFactory(typeFactory0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException("`com.fasterxml.jackson.databind.annotation.NoClass`", throwable0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // `com.fasterxml.jackson.databind.annotation.NoClass`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "org.hibernate.proxy.java.lang.Float");
      ClassUtil.throwIfError(jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException0);
      JsonMappingException.from((JsonGenerator) null, "szfEoDTI-<(7hRA", (Throwable) sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.backticked("type");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`type`");
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<Object> class0 = Object.class;
      ClassUtil.hasClass((Object) null, class0);
      JavaType javaType0 = null;
      TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructCollectionType(class1, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("keyType", (Map<String, ClientInfoStatus>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException1);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("p");
      mockRuntimeException0.initCause(sQLClientInfoException0);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("p");
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClassUtil.backticked("type");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`type`");
      MockThrowable mockThrowable0 = new MockThrowable("type", mockRuntimeException0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("NULL");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("size", "array", "vals", 1023);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("NULL", "vals", "oH}|?IftIG/WM:;Dd|U", 1023);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "NULL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.deser.DeserializationProblemHandler");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // []
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      String string0 = "NULL";
      SQLTransientException sQLTransientException0 = new SQLTransientException("NULL");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("vals", "NULL", sQLTransientException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("size", "array", "vals", 1023);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("NULL", "vals", "oH}|?IftIG/WM:;Dd|U", 1023);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        sQLNonTransientException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getAnnotatedReceiverType();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<SimpleType> class1 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Class<CollectionType> class2 = CollectionType.class;
      Class<ReferenceType> class3 = ReferenceType.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class3, (List<JavaType>) vector0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class4 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class4, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withStaticTyping();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      simpleType0.refine(class2, typeBindings1, mapType1, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      JavaType[] javaTypeArray1 = new JavaType[2];
      javaTypeArray1[0] = (JavaType) simpleType0;
      javaTypeArray1[1] = (JavaType) simpleType0;
      MapType mapType2 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray1, javaTypeArray1[1], (JavaType) referenceType0);
      Character character0 = new Character('[');
      MapType mapType3 = mapType2.withKeyTypeHandler(character0);
      MapType mapType4 = mapType3.withStaticTyping();
      MapType mapType5 = mapType4.withContentValueHandler(character0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      MapLikeType mapLikeType0 = mapType2.withKeyType(referenceType0);
      StringBuilder stringBuilder0 = new StringBuilder("keyType");
      StringBuilder stringBuilder1 = mapLikeType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = placeholderForType0.getGenericSignature(stringBuilder1);
      mapType5.getErasedSignature(stringBuilder2);
      ClassUtil.isJacksonStdImpl((Object) mapType5);
      ClassUtil.getClassDescription(javaTypeArray1[0]);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      RuntimeException runtimeException0 = null;
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 1526;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class0, false);
      Constructor<IOException> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.nonNullString("7uYlm");
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      Class<IOException> class2 = IOException.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassUtil.backticked("type");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`type`");
      MockThrowable mockThrowable0 = new MockThrowable("type", mockRuntimeException0);
      mockRuntimeException0.initCause(mockThrowable0);
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      Class<?> class0 = ClassUtil.classOf(placeholderForType0);
      ClassUtil.findClassAnnotations(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findClassAnnotations(class0);
      int int0 = (-1904);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1904));
      placeholderForType0.getSuperClass();
      placeholderForType0.toString();
      Class<Annotation> class1 = Annotation.class;
      placeholderForType0.findSuperType(class1);
      placeholderForType0.getErasedSignature();
      ClassUtil.nullOrToString(placeholderForType0);
      ClassUtil.nonNullString((String) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      placeholderForType0.isTypeOrSuperTypeOf(class2);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "'|XfH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.getGenericInterfaces(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<String> class3 = String.class;
      String string0 = "elementType";
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[8];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      AnnotationMap annotationMap1 = AnnotationMap.of(class1, (Annotation) null);
      annotationMapArray0[2] = annotationMap1;
      annotationMapArray0[3] = annotationMap0;
      AnnotationMap annotationMap2 = AnnotationMap.of((Class<?>) null, (Annotation) null);
      annotationMapArray0[4] = annotationMap2;
      annotationMapArray0[5] = annotationMap0;
      AnnotationMap annotationMap3 = AnnotationMap.merge(annotationMap2, annotationMap0);
      annotationMapArray0[6] = annotationMap3;
      annotationMapArray0[7] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap0, annotationMapArray0);
      // Undeclared exception!
      try { 
        annotatedConstructor0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isConcrete(class0);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("vals", "vals", (-1782));
      MockException mockException0 = new MockException("vals", sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1289, false, false, 5, 0, mockException0);
      SQLException sQLException0 = new SQLException(dataTruncation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("vals", sQLException0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      sQLException0.printStackTrace();
      byteArrayOutputStream0.write(0);
      mockPrintStream0.print('a');
      sQLException0.getStackTrace();
      sQLRecoverableException0.printStackTrace((PrintStream) mockPrintStream0);
      ClassUtil.throwIfError(sQLRecoverableException0);
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("9p(ALjKVg(v!]z>I)P");
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      ClassUtil.canBeABeanType(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.nameOf((Named) null);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nameOf(class0);
      ClassUtil.findSuperTypes(class1, class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<SimpleType> class3 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      boolean boolean0 = false;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getTypeParameters();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("6", "6", (-2938));
      sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLRecoverableException0);
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.findSuperTypes(class4, class0);
      Class<CollectionType> class5 = CollectionType.class;
      ClassUtil.findSuperTypes(class5, class5);
      Class<Long> class6 = Long.class;
      try { 
        ClassUtil.createInstance(class6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      Type type0 = ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getConstructors(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getDeclaredMethods(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.hasClass(type0, class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 1987;
      ObjectCodec objectCodec0 = null;
      String string0 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.nameOf(class2);
      constructor0.getGenericExceptionTypes();
      SQLDataException sQLDataException0 = new SQLDataException("`com.fasterxml.jackson.databind.type.CollectionType`");
      File file0 = MockFile.createTempFile("`com.fasterxml.jackson.databind.type.CollectionType`", "`com.fasterxml.jackson.databind.type.CollectionType`");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "`com.fasterxml.jackson.databind.type.CollectionType`", 0, 0);
      sQLDataException0.printStackTrace(printWriter0);
      ClassUtil.throwIfRTE(sQLDataException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNullString("java.lang");
      ClassUtil.isJacksonStdImpl((Object) class2);
      Class<Float> class4 = Float.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.getDeclaredMethods(class4);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Long> class2 = Long.class;
      ClassUtil.isNonStaticInnerClass(class2);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, (-763), 1208);
      SQLWarning sQLWarning0 = new SQLWarning("vals", "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`", (-763), dataTruncation0);
      MockException mockException0 = new MockException(sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vals", "Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`", 0, mockException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      assertSame(throwable0, dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil.backticked("!=9rE$X=:P?7<]jH??");
      ClassUtil.emptyIterator();
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaredFields(class1);
      Named named0 = null;
      ClassUtil.nameOf((Named) null);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Character> class2 = Character.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(70);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.CollectionLikeType with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Throwable throwable0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil classUtil0 = new ClassUtil();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setOutputDecorator((OutputDecorator) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("eGuZ|pKUU!rL Z~", "Numeric value (");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Numeric value (
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("keyType", (Map<String, ClientInfoStatus>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException1);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class0);
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("entrySet", ": expected type JsonSerializer or Class<JsonSerializer> instead", 0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("[]", sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(": expected type JsonSerializer or Class<JsonSerializer> instead", "entrySet", 0, mockRuntimeException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(": expected type JsonSerializer or Class<JsonSerializer> instead", "NULL", sQLRecoverableException1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      sQLRecoverableException2.printStackTrace((PrintStream) mockPrintStream0);
      sQLRecoverableException2.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2565));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      Class<Character> class1 = Character.class;
      SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType0, referenceType0, placeholderForType0);
      Class<String> class2 = String.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleType> class3 = SimpleType.class;
      placeholderForType0.isTypeOrSubTypeOf(class3);
      Class<LinkedList> class4 = LinkedList.class;
      mapLikeType0.toCanonical();
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class4, (JavaType) mapLikeType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0, (Object) collectionType0, (Object) class2);
      arrayType0.toCanonical();
      ArrayType arrayType1 = arrayType0.withValueHandler(referenceType0);
      arrayType1.isTypeOrSuperTypeOf(class4);
      // Undeclared exception!
      try { 
        arrayType1.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }
}
