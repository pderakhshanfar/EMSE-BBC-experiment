/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:48:06 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<DoubleNode> class1 = DoubleNode.class;
      Class<ArrayType> class2 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      Class<NoClass> class3 = NoClass.class;
      String string0 = ClassUtil.canBeABeanType(class3);
      assertNull(string0);
      
      Class<Character> class4 = Character.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class4);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">CK;P1(", "jcX{K$$A7*n");
      assertNotNull(mockFile0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ObjectMapper objectMapper3 = objectMapper2.setDefaultMergeable((Boolean) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper3);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      
      ObjectMapper objectMapper4 = objectMapper3.disableDefaultTyping();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper4);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      objectMapper4.writeValue((File) mockFile0, (Object) constructor0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("jcX{K$$A7*n", mockFile0.getName());
      assertEquals(591L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/>CK;P1(/jcX{K$$A7*n", mockFile0.toString());
      assertEquals("/experiment/>CK;P1(", mockFile0.getParent());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      
      Iterator<HashMap<CollectionType, ResolvedRecursiveType>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      Class<SimpleType> class1 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertNotNull(simpleType0);
      
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) simpleType0;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.withContentType(simpleType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertNotNull(javaType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertNotNull(collectionLikeType0);
      assertEquals(7, javaTypeArray0.length);
      
      Boolean boolean0 = Boolean.valueOf("idType cannot be null");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer((-462438562));
      assertEquals((-462438562), (int)integer0);
      assertNotNull(integer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, ":TW7JArF", integer0, ":TW7JArF");
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(":TW7JArF", propertyMetadata0.getDefaultValue());
      assertEquals((-462438562), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals(":TW7JArF", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNotNull(propertyMetadata0);
      
      Integer integer1 = new Integer((-462438562));
      assertEquals((-462438562), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer1);
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(":TW7JArF", propertyMetadata0.getDefaultValue());
      assertEquals((-462438562), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals(":TW7JArF", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals((-462438562), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals(":TW7JArF", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertEquals(":TW7JArF", propertyMetadata1.getDefaultValue());
      assertNotNull(propertyMetadata1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      assertTrue(propertyMetadata_MergeInfo0.fromDefaults);
      assertNotNull(propertyMetadata_MergeInfo0);
      
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withMergeInfo(propertyMetadata_MergeInfo0);
      assertTrue(propertyMetadata_MergeInfo0.fromDefaults);
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(":TW7JArF", propertyMetadata0.getDefaultValue());
      assertEquals((-462438562), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals(":TW7JArF", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals((-462438562), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals(":TW7JArF", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertEquals(":TW7JArF", propertyMetadata1.getDefaultValue());
      assertEquals(":TW7JArF", propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.hasDefaultValue());
      assertNull(propertyMetadata2.getValueNulls());
      assertFalse(propertyMetadata2.getRequired());
      assertEquals(":TW7JArF", propertyMetadata2.getDescription());
      assertNull(propertyMetadata2.getContentNulls());
      assertEquals((-462438562), (int)propertyMetadata2.getIndex());
      assertTrue(propertyMetadata2.hasIndex());
      assertFalse(propertyMetadata2.isRequired());
      assertNotNull(propertyMetadata2);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, collectionLikeType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata2);
      assertTrue(propertyMetadata_MergeInfo0.fromDefaults);
      assertFalse(propertyMetadata0.isRequired());
      assertEquals(":TW7JArF", propertyMetadata0.getDefaultValue());
      assertEquals((-462438562), (int)propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertEquals(":TW7JArF", propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(propertyMetadata1.getRequired());
      assertTrue(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals((-462438562), (int)propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals(":TW7JArF", propertyMetadata1.getDescription());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertEquals(":TW7JArF", propertyMetadata1.getDefaultValue());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(":TW7JArF", propertyMetadata2.getDefaultValue());
      assertTrue(propertyMetadata2.hasDefaultValue());
      assertNull(propertyMetadata2.getValueNulls());
      assertFalse(propertyMetadata2.getRequired());
      assertEquals(":TW7JArF", propertyMetadata2.getDescription());
      assertNull(propertyMetadata2.getContentNulls());
      assertEquals((-462438562), (int)propertyMetadata2.getIndex());
      assertTrue(propertyMetadata2.hasIndex());
      assertFalse(propertyMetadata2.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertNotNull(beanProperty_Std0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertEquals(7, javaTypeArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(249.756);
      assertEquals(249.756, (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor1);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      Annotation[][] annotationArray0 = classUtil_Ctor1.getParameterAnnotations();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertEquals(0, annotationArray0.length);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, "com.fasterxml.jackson.databind.ser.std.StringSerializer");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of [null]: com.fasterxml.jackson.databind.ser.std.StringSerializer
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, CollectionLikeType> enumMap0 = new EnumMap<ClientInfoStatus, CollectionLikeType>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("cu.BQ3,{1$-");
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("cu.BQ3,{1$-", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("cu.BQ3,{1$-", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("cu.BQ3,{1$-", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("cu.BQ3,{1$-", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("cu.BQ3,{1$-", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("cu.BQ3,{1$-", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("cu.BQ3,{1$-", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("cu.BQ3,{1$-");
      assertNotNull(mockPrintStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("cu.BQ3,{1$-", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("cu.BQ3,{1$-", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("cu.BQ3,{1$-", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("cu.BQ3,{1$-", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(30, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory1);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Annotation> class0 = Annotation.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, ";u1#j:)2T([", "Failed to instantiate bean of type ");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(invalidFormatException0);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) mockPrintStream0, (Exception) invalidFormatException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.annotation.Annotation` from String \";u1#j:)2T([\": Failed to instantiate bean of type 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Float> class1 = Float.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-419862944));
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      assertSame(class1, class0);
      
      Class<?> class2 = ClassUtil.classOf(accessPattern0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isArray());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLException sQLException0 = new SQLException(" not a super-type of (declared) class ", " not a super-type of (declared) class ", 60, sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLException:  not a super-type of (declared) class ", sQLException0.toString());
      assertEquals(" not a super-type of (declared) class ", sQLException0.getMessage());
      assertEquals(" not a super-type of (declared) class ", sQLException0.getSQLState());
      assertEquals(60, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.initCause(sQLException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLException:  not a super-type of (declared) class ", sQLException0.toString());
      assertEquals(" not a super-type of (declared) class ", sQLException0.getMessage());
      assertEquals(" not a super-type of (declared) class ", sQLException0.getSQLState());
      assertEquals(60, sQLException0.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isEnum());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNotNull(sQLException0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "java.io.IOException", sQLException0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.io.IOException", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.io.IOException", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.io.IOException", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      String string0 = sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.io.IOException", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(string0);
      
      SQLException sQLException1 = (SQLException)sQLException0.initCause(sQLIntegrityConstraintViolationException0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.io.IOException", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLException1.getMessage());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertEquals(0, sQLException1.getErrorCode());
      assertNotNull(sQLException1);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, CollectionLikeType> enumMap0 = new EnumMap<ClientInfoStatus, CollectionLikeType>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      CollectionLikeType collectionLikeType0 = enumMap0.put(clientInfoStatus0, (CollectionLikeType) null);
      assertEquals(1, enumMap0.size());
      assertNull(collectionLikeType0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(1, enumMap0.size());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isEnum());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<MapType> class2 = MapType.class;
      boolean boolean0 = ClassUtil.isConcrete(class2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      boolean boolean2 = ClassUtil.isConcrete(class1);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.", "net.sf.cglib.proxy.");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: net.sf.cglib.proxy.", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLWarning sQLWarning1 = new SQLWarning("`.m7yuT");
      assertEquals("java.sql.SQLWarning: `.m7yuT", sQLWarning1.toString());
      assertEquals("`.m7yuT", sQLWarning1.getMessage());
      assertNull(sQLWarning1.getSQLState());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNotNull(sQLWarning1);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      
      sQLWarning0.setNextWarning(sQLWarning1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: net.sf.cglib.proxy.", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: `.m7yuT", sQLWarning1.toString());
      assertEquals("`.m7yuT", sQLWarning1.getMessage());
      assertNull(sQLWarning1.getSQLState());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning1, sQLWarning0);
      
      sQLWarning0.printStackTrace();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: net.sf.cglib.proxy.", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertNotSame(sQLWarning0, sQLWarning1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.initCause(sQLWarning0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: net.sf.cglib.proxy.", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertNotSame(sQLWarning0, sQLWarning1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.fillInStackTrace();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException2.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException2.toString());
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException2, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException2, sQLIntegrityConstraintViolationException0);
      
      Throwable[] throwableArray0 = sQLIntegrityConstraintViolationException0.getSuppressed();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(throwableArray0);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException2);
      assertEquals(0, throwableArray0.length);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "mNy6t:Ecsz9~2fLNH");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U2B");
      assertFalse(boolean0);
      
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<MapLikeType> class1 = MapLikeType.class;
      Constructor<MapLikeType> constructor1 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor1);
      
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertNotNull(resolvedRecursiveType0);
      
      List<JavaType> list0 = resolvedRecursiveType0.getInterfaces();
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Short> class2 = Short.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class2, false);
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      javaTypeArray0[7] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[4]);
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isInterface());
      assertEquals(0, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertNotNull(collectionType0);
      assertEquals(8, javaTypeArray0.length);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(collectionType0, (String) null, "com.fasterxml.jackson.databind.util.NameTransformer$Chained");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isInterface());
      assertEquals(0, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertNull(invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      assertEquals(8, javaTypeArray0.length);
      
      SQLDataException sQLDataException0 = new SQLDataException("org.evosuite.runtime", "[]", (-905), invalidTypeIdException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isInterface());
      assertEquals(0, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertNull(invalidTypeIdException0.getTypeId());
      assertEquals("[]", sQLDataException0.getSQLState());
      assertEquals("org.evosuite.runtime", sQLDataException0.getMessage());
      assertEquals((-905), sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: org.evosuite.runtime", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      assertEquals(8, javaTypeArray0.length);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' as a subtype of [collection type; class java.lang.Object, contains [simple type, class java.lang.Object]]: com.fasterxml.jackson.databind.util.NameTransformer$Chained
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertNotNull(constructor0);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class0, list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(accessPattern1));
      assertSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern0);
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertEquals(1, enumSet0.size());
      assertFalse(class0.isArray());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertEquals(16385, class0.getModifiers());
      assertNotNull(class0);
      assertTrue(enumSet0.contains(accessPattern1));
      assertSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern0);
      
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, CollectionType> enumMap0 = new EnumMap<ClientInfoStatus, CollectionType>(class1);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      EnumMap<ClientInfoStatus, CollectionLikeType> enumMap1 = new EnumMap<ClientInfoStatus, CollectionLikeType>(enumMap0);
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      assertNotNull(enumMap1);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumMap1);
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      assertEquals(16401, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.ClientInfoStatus", class2.toString());
      assertTrue(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class0));
      assertNotSame(class2, class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<IOException> class0 = IOException.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(dataOutputStream0);
      
      dataOutputStream0.flush();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "JSON");
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) dataOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Integer", class1.toString());
      assertNotNull(class1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.TypeFactory", "k/", sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("k/", sQLTransactionRollbackException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.TypeFactory", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.TypeFactory", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("g/", "org.hibernate.proxy.java.lang.Object", 1215, sQLTransactionRollbackException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("k/", sQLTransactionRollbackException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.TypeFactory", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.TypeFactory", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: g/", sQLSyntaxErrorException0.toString());
      assertEquals("g/", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.hibernate.proxy.java.lang.Object", sQLSyntaxErrorException0.getSQLState());
      assertEquals(1215, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: g/
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{IKEU<8&y%2l");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((DataOutput) dataOutputStream0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.RuntimeException`", string0);
      assertNotNull(string0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertNotNull(jsonGeneratorDelegate0);
      
      SQLWarning sQLWarning0 = new SQLWarning("`java.lang.RuntimeException`", (Throwable) null);
      assertEquals("`java.lang.RuntimeException`", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: `java.lang.RuntimeException`", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("`java.lang.RuntimeException`", "`java.lang.RuntimeException`", sQLWarning0);
      assertEquals("`java.lang.RuntimeException`", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: `java.lang.RuntimeException`", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: `java.lang.RuntimeException`", sQLTransientException0.toString());
      assertEquals("`java.lang.RuntimeException`", sQLTransientException0.getSQLState());
      assertEquals("`java.lang.RuntimeException`", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<SimpleModule> class0 = SimpleModule.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertNotNull(collectionLikeType0);
      
      Class<HashMap> class1 = HashMap.class;
      Class<Character> class2 = Character.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertNotNull(mapType0);
      
      MapType mapType1 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) collectionLikeType0, (JavaType) collectionLikeType0);
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertNotNull(mapType1);
      assertFalse(mapType1.equals((Object)mapType0));
      assertNotSame(mapType1, mapType0);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, true);
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Annotation> class3 = Annotation.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Module> class0 = Module.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtil.isConcrete(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature1, false);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertNotNull(jsonFactory3);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      assertNotNull(objectOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((OutputStream) objectOutputStream0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(4, pipedInputStream0.available());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(59, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      
      MockIOException mockIOException0 = new MockIOException("", (Throwable) null);
      assertNotNull(mockIOException0);
      
      mockIOException0.printStackTrace();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) objectOutputStream0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Class<Float> class2 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class2, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1, classUtil_CtorArray0.length);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Current context not Object but ", "Current context not Object but ");
      assertEquals("java.sql.SQLTransientException: Current context not Object but ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("Current context not Object but ", sQLTransientException0.getMessage());
      assertEquals("Current context not Object but ", sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      MockError mockError0 = new MockError(sQLTransientException0);
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.annotation.Annotation`", string0);
      assertNotNull(string0);
      
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class1, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isContainerType());
      assertNotNull(javaType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      
      Class<?> class2 = ClassUtil.rawClass(javaType0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isContainerType());
      assertFalse(class2.isArray());
      assertEquals("interface java.lang.annotation.Annotation", class2.toString());
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isInterface());
      assertNotNull(class2);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      String string1 = ClassUtil.isLocalType((Class<?>) null, false);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("float", "k~4#9dx", "Sub-class %s (of class %s) must override method '%s'", (-3253));
      assertEquals("Sub-class %s (of class %s) must override method '%s'", stackTraceElement0.getFileName());
      assertEquals((-3253), stackTraceElement0.getLineNumber());
      assertEquals("k~4#9dx", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("float", stackTraceElement0.getClassName());
      assertEquals("float.k~4#9dx(Sub-class %s (of class %s) must override method '%s')", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("float", "k~4#9dx", "yO", (-1444));
      assertEquals("k~4#9dx", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals((-1444), stackTraceElement1.getLineNumber());
      assertEquals("float.k~4#9dx(yO)", stackTraceElement1.toString());
      assertEquals("yO", stackTraceElement1.getFileName());
      assertEquals("float", stackTraceElement1.getClassName());
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("0Uj\"N%-N_0yQ}1", "0Uj\"N%-N_0yQ}1", "S`l!SRY#!)v@", 114);
      assertEquals("S`l!SRY#!)v@", stackTraceElement2.getFileName());
      assertEquals("0Uj\"N%-N_0yQ}1.0Uj\"N%-N_0yQ}1(S`l!SRY#!)v@:114)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("0Uj\"N%-N_0yQ}1", stackTraceElement2.getMethodName());
      assertEquals("0Uj\"N%-N_0yQ}1", stackTraceElement2.getClassName());
      assertEquals(114, stackTraceElement2.getLineNumber());
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Sub-class %s (of class %s) must override method '%s'", "Sub-class %s (of class %s) must override method '%s'", "yO", 114);
      assertEquals("Sub-class %s (of class %s) must override method '%s'", stackTraceElement3.getMethodName());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", stackTraceElement3.getClassName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("yO", stackTraceElement3.getFileName());
      assertEquals(114, stackTraceElement3.getLineNumber());
      assertEquals("Sub-class %s (of class %s) must override method '%s'.Sub-class %s (of class %s) must override method '%s'(yO:114)", stackTraceElement3.toString());
      assertNotNull(stackTraceElement3);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("org.hibernate.proxy.java.lang.Object", "yO", ",\t\"{rM{htlZA`S", (-3253));
      assertEquals((-3253), stackTraceElement4.getLineNumber());
      assertEquals("yO", stackTraceElement4.getMethodName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals(",\t\"{rM{htlZA`S", stackTraceElement4.getFileName());
      assertEquals("org.hibernate.proxy.java.lang.Object.yO(,\t\"{rM{htlZA`S)", stackTraceElement4.toString());
      assertEquals("org.hibernate.proxy.java.lang.Object", stackTraceElement4.getClassName());
      assertNotNull(stackTraceElement4);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("\"%s\"", "[]", "net.sf.cglib.proxy.int", (-375));
      assertEquals("net.sf.cglib.proxy.int", stackTraceElement5.getFileName());
      assertEquals("\"%s\"", stackTraceElement5.getClassName());
      assertEquals("\"%s\".[](net.sf.cglib.proxy.int)", stackTraceElement5.toString());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals("[]", stackTraceElement5.getMethodName());
      assertEquals((-375), stackTraceElement5.getLineNumber());
      assertNotNull(stackTraceElement5);
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("S`l!SRY#!)v@", "Sub-class %s (of class %s) must override method '%s'", "[]", (-1513967666));
      assertFalse(stackTraceElement6.isNativeMethod());
      assertEquals((-1513967666), stackTraceElement6.getLineNumber());
      assertEquals("[]", stackTraceElement6.getFileName());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", stackTraceElement6.getMethodName());
      assertEquals("S`l!SRY#!)v@.Sub-class %s (of class %s) must override method '%s'([])", stackTraceElement6.toString());
      assertEquals("S`l!SRY#!)v@", stackTraceElement6.getClassName());
      assertNotNull(stackTraceElement6);
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("\"%s\"", "\"%s\"", "}3=#aaPoAc~v>P|L", 65280);
      assertFalse(stackTraceElement7.isNativeMethod());
      assertEquals("\"%s\".\"%s\"(}3=#aaPoAc~v>P|L:65280)", stackTraceElement7.toString());
      assertEquals("\"%s\"", stackTraceElement7.getMethodName());
      assertEquals("}3=#aaPoAc~v>P|L", stackTraceElement7.getFileName());
      assertEquals("\"%s\"", stackTraceElement7.getClassName());
      assertEquals(65280, stackTraceElement7.getLineNumber());
      assertNotNull(stackTraceElement7);
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement6));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement3));
      
      stackTraceElementArray0[7] = stackTraceElement7;
      mockError0.setStackTrace(stackTraceElementArray0);
      assertEquals(8, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("float", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(boolean0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals((short)0, object0);
      assertNotNull(object0);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-22);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)50, (byte) (-22)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Double> class0 = Double.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(arrayType0);
      
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertNotNull(arrayType1);
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      
      ArrayType arrayType2 = arrayType0.withContentTypeHandler(arrayType1);
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertFalse(arrayType2.useStaticType());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertFalse(arrayType2.isInterface());
      assertFalse(arrayType2.hasValueHandler());
      assertNotNull(arrayType2);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      
      ArrayType arrayType3 = arrayType2.withTypeHandler(arrayType0);
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertFalse(arrayType2.useStaticType());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertFalse(arrayType2.isInterface());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType3.isInterface());
      assertTrue(arrayType3.hasContentType());
      assertTrue(arrayType3.isFinal());
      assertTrue(arrayType3.isConcrete());
      assertFalse(arrayType3.useStaticType());
      assertFalse(arrayType3.isAbstract());
      assertTrue(arrayType3.hasHandlers());
      assertEquals(0, arrayType3.containedTypeCount());
      assertFalse(arrayType3.isJavaLangObject());
      assertTrue(arrayType3.isArrayType());
      assertFalse(arrayType3.hasValueHandler());
      assertFalse(arrayType3.isMapLikeType());
      assertTrue(arrayType3.isContainerType());
      assertFalse(arrayType3.isPrimitive());
      assertFalse(arrayType3.isEnumType());
      assertFalse(arrayType3.isCollectionLikeType());
      assertNotNull(arrayType3);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType2));
      assertTrue(arrayType3.equals((Object)arrayType1));
      assertTrue(arrayType3.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType3, arrayType1);
      assertNotSame(arrayType3, arrayType0);
      assertNotSame(arrayType3, arrayType2);
      
      ArrayType arrayType4 = arrayType3.withContentValueHandler(typeFactory0);
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertFalse(arrayType2.useStaticType());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertFalse(arrayType2.isInterface());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType3.isInterface());
      assertTrue(arrayType3.hasContentType());
      assertTrue(arrayType3.isFinal());
      assertTrue(arrayType3.isConcrete());
      assertFalse(arrayType3.useStaticType());
      assertFalse(arrayType3.isAbstract());
      assertTrue(arrayType3.hasHandlers());
      assertEquals(0, arrayType3.containedTypeCount());
      assertFalse(arrayType3.isJavaLangObject());
      assertTrue(arrayType3.isArrayType());
      assertFalse(arrayType3.hasValueHandler());
      assertFalse(arrayType3.isMapLikeType());
      assertTrue(arrayType3.isContainerType());
      assertFalse(arrayType3.isPrimitive());
      assertFalse(arrayType3.isEnumType());
      assertFalse(arrayType3.isCollectionLikeType());
      assertTrue(arrayType4.isContainerType());
      assertFalse(arrayType4.isCollectionLikeType());
      assertTrue(arrayType4.hasContentType());
      assertTrue(arrayType4.hasHandlers());
      assertTrue(arrayType4.isFinal());
      assertTrue(arrayType4.isConcrete());
      assertFalse(arrayType4.useStaticType());
      assertFalse(arrayType4.isMapLikeType());
      assertFalse(arrayType4.isJavaLangObject());
      assertFalse(arrayType4.isAbstract());
      assertFalse(arrayType4.isEnumType());
      assertTrue(arrayType4.isArrayType());
      assertEquals(0, arrayType4.containedTypeCount());
      assertFalse(arrayType4.isInterface());
      assertFalse(arrayType4.isPrimitive());
      assertFalse(arrayType4.hasValueHandler());
      assertNotNull(arrayType4);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)arrayType3));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType3));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType3));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType2));
      assertTrue(arrayType3.equals((Object)arrayType1));
      assertTrue(arrayType3.equals((Object)arrayType0));
      assertTrue(arrayType4.equals((Object)arrayType1));
      assertTrue(arrayType4.equals((Object)arrayType3));
      assertTrue(arrayType4.equals((Object)arrayType2));
      assertTrue(arrayType4.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType4);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType4);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType2, arrayType4);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType3, arrayType1);
      assertNotSame(arrayType3, arrayType0);
      assertNotSame(arrayType3, arrayType2);
      assertNotSame(arrayType3, arrayType4);
      assertNotSame(arrayType4, arrayType2);
      assertNotSame(arrayType4, arrayType3);
      assertNotSame(arrayType4, arrayType0);
      assertNotSame(arrayType4, arrayType1);
      
      Class<?> class1 = ClassUtil.rawClass(arrayType4);
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isAbstract());
      assertFalse(arrayType2.useStaticType());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.hasHandlers());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isEnumType());
      assertFalse(arrayType2.isInterface());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType3.isInterface());
      assertTrue(arrayType3.hasContentType());
      assertTrue(arrayType3.isFinal());
      assertTrue(arrayType3.isConcrete());
      assertFalse(arrayType3.useStaticType());
      assertFalse(arrayType3.isAbstract());
      assertTrue(arrayType3.hasHandlers());
      assertEquals(0, arrayType3.containedTypeCount());
      assertFalse(arrayType3.isJavaLangObject());
      assertTrue(arrayType3.isArrayType());
      assertFalse(arrayType3.hasValueHandler());
      assertFalse(arrayType3.isMapLikeType());
      assertTrue(arrayType3.isContainerType());
      assertFalse(arrayType3.isPrimitive());
      assertFalse(arrayType3.isEnumType());
      assertFalse(arrayType3.isCollectionLikeType());
      assertTrue(arrayType4.isContainerType());
      assertFalse(arrayType4.isCollectionLikeType());
      assertTrue(arrayType4.hasContentType());
      assertTrue(arrayType4.hasHandlers());
      assertTrue(arrayType4.isFinal());
      assertTrue(arrayType4.isConcrete());
      assertFalse(arrayType4.useStaticType());
      assertFalse(arrayType4.isMapLikeType());
      assertFalse(arrayType4.isJavaLangObject());
      assertFalse(arrayType4.isAbstract());
      assertFalse(arrayType4.isEnumType());
      assertTrue(arrayType4.isArrayType());
      assertEquals(0, arrayType4.containedTypeCount());
      assertFalse(arrayType4.isInterface());
      assertFalse(arrayType4.isPrimitive());
      assertFalse(arrayType4.hasValueHandler());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class [Ljava.lang.Double;", class1.toString());
      assertNotNull(class1);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)arrayType4));
      assertTrue(arrayType0.equals((Object)arrayType3));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType4));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType3));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType3));
      assertTrue(arrayType2.equals((Object)arrayType4));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType2));
      assertTrue(arrayType3.equals((Object)arrayType1));
      assertTrue(arrayType3.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType4));
      assertTrue(arrayType4.equals((Object)arrayType1));
      assertTrue(arrayType4.equals((Object)arrayType3));
      assertTrue(arrayType4.equals((Object)arrayType2));
      assertTrue(arrayType4.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType4);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType4);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType2, arrayType4);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType3, arrayType1);
      assertNotSame(arrayType3, arrayType0);
      assertNotSame(arrayType3, arrayType2);
      assertNotSame(arrayType3, arrayType4);
      assertNotSame(arrayType4, arrayType2);
      assertNotSame(arrayType4, arrayType3);
      assertNotSame(arrayType4, arrayType0);
      assertNotSame(arrayType4, arrayType1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class2, list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.java.sql.ClientInfoStatus", "com.fasterxml.jackson.databind.deser.std.EnumDeserializer", (-832), (Throwable) null);
      assertEquals("com.fasterxml.jackson.databind.deser.std.EnumDeserializer", sQLTransientException0.getSQLState());
      assertEquals((-832), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException0.toString());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Don't know how to convert embedded Object of type %s into %s", "org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException0);
      assertEquals("com.fasterxml.jackson.databind.deser.std.EnumDeserializer", sQLTransientException0.getSQLState());
      assertEquals((-832), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException0.toString());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: Don't know how to convert embedded Object of type %s into %s", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Don't know how to convert embedded Object of type %s into %s", sQLTransientConnectionException0.getMessage());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.getRootCause(sQLTransientConnectionException0);
      assertEquals("com.fasterxml.jackson.databind.deser.std.EnumDeserializer", sQLTransientException0.getSQLState());
      assertEquals((-832), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException0.toString());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: Don't know how to convert embedded Object of type %s into %s", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Don't know how to convert embedded Object of type %s into %s", sQLTransientConnectionException0.getMessage());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientConnectionException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.deser.std.EnumDeserializer", sQLTransientException1.getSQLState());
      assertEquals((-832), sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException1.toString());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", sQLTransientException1.getMessage());
      assertNotNull(sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertEquals(0, enumSet0.size());
      assertNotNull(enumSet0);
      
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertNotNull(enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals(0, enumSet0.size());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertNotSame(enumSet0, enumSet1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      MockError mockError0 = new MockError(" has no default (no arg) constructor");
      assertNotNull(mockError0);
      
      StackTraceElement[] stackTraceElementArray0 = mockError0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      assertFalse(class0.isAnnotation());
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$615704801", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Bld-!34");
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      assertEquals(3, enumSet0.size());
      assertNotNull(enumSet0);
      
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      assertEquals(3, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertNotNull(enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nonNullString("Hd2N@\")+");
      assertEquals("Hd2N@\")+", string0);
      assertNotNull(string0);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(accessPattern0));
      
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotNull(enumSet1);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      EnumSet<AccessPattern> enumSet2 = enumSet1.clone();
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertNotNull(enumSet2);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet3 = EnumSet.noneOf(class1);
      assertEquals(0, enumSet3.size());
      assertNotNull(enumSet3);
      assertFalse(enumSet3.contains(accessPattern0));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertFalse(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertNotSame(enumSet3, enumSet2);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumSet2);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(16385, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet3));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet3);
      
      Class<?> class3 = ClassUtil.classOf(enumSet2);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.util.RegularEnumSet", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals(0, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern0));
      assertFalse(enumSet0.equals((Object)enumSet3));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet3));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet3));
      assertNotSame(enumSet0, enumSet3);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet1, enumSet3);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nonNullString("Hd2N@\")+");
      assertEquals("Hd2N@\")+", string0);
      assertNotNull(string0);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(accessPattern0));
      
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotNull(enumSet1);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      EnumSet<AccessPattern> enumSet2 = enumSet1.clone();
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertNotNull(enumSet2);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet2);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertTrue(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertTrue(enumSet2.contains(accessPattern0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.reflect.A", "java.lang.reflect.A");
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.lang.reflect.A", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.lang.reflect.A", sQLDataException0.toString());
      assertEquals("java.lang.reflect.A", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.reflect.A", "java.lang.reflect.A", sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.lang.reflect.A", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.lang.reflect.A", sQLDataException0.toString());
      assertEquals("java.lang.reflect.A", sQLDataException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang.reflect.A", sQLTimeoutException0.toString());
      assertEquals("java.lang.reflect.A", sQLTimeoutException0.getMessage());
      assertEquals("java.lang.reflect.A", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.initCause(sQLTimeoutException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.lang.reflect.A", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.lang.reflect.A", sQLDataException0.toString());
      assertEquals("java.lang.reflect.A", sQLDataException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang.reflect.A", sQLTimeoutException0.toString());
      assertEquals("java.lang.reflect.A", sQLTimeoutException0.getMessage());
      assertEquals("java.lang.reflect.A", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.lang.reflect.A", sQLDataException1.toString());
      assertEquals("java.lang.reflect.A", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.lang.reflect.A", sQLDataException1.getMessage());
      assertNotNull(sQLDataException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      
      // Undeclared exception!
      ClassUtil.getRootCause(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Character", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Iterator<Double> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<Error> class2 = Error.class;
      boolean boolean1 = ClassUtil.isConcrete(class2);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      String string0 = mockError0.getLocalizedMessage();
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "`&I!a0|&]=w2-P~x");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2899));
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(16385, class1.getModifiers());
      assertNotNull(class1);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, ".cglib");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertTrue(class1.isEnum());
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertTrue(class1.isEnum());
      assertNull(class2);
      
      System.setCurrentTimeMillis((-4964L));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<MapType> class1 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertNotNull(simpleType0);
      
      SimpleType simpleType1 = simpleType0.withTypeHandler(class0);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType1.isInterface());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.hasHandlers());
      assertTrue(simpleType1.isFinal());
      assertNotNull(simpleType1);
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class1, (JavaType) simpleType1);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType1.isInterface());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.hasHandlers());
      assertTrue(simpleType1.isFinal());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertNotNull(collectionLikeType0);
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      
      Class<Double> class2 = Double.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class2, false);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType1.isInterface());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasValueHandler());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.hasHandlers());
      assertTrue(simpleType1.isFinal());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "org.hibernate.proxy.java.lang.String", true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1126);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('9');
      assertEquals(1, pipedInputStream0.available());
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1653544906), objectReader0, printStream0, byteArray0, (byte) (-128), true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-128), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1653544906), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNotNull(uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)84, (byte)1, (byte) (-128), (byte) (-5), (byte)3}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(8, deserializationFeatureArray0.length);
      
      PrettyPrinter prettyPrinter0 = uTF8JsonGenerator0.getPrettyPrinter();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-128), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1653544906), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(prettyPrinter0);
      assertArrayEquals(new byte[] {(byte)84, (byte)1, (byte) (-128), (byte) (-5), (byte)3}, byteArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(5, byteArray0.length);
      assertEquals(8, deserializationFeatureArray0.length);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1, pipedInputStream0.available());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-128), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1653544906), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals((-1653544906), uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals((-128), uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertNotNull(uTF8JsonGenerator1);
      assertArrayEquals(new byte[] {(byte)84, (byte)1, (byte) (-128), (byte) (-5), (byte)3}, byteArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(5, byteArray0.length);
      assertEquals(8, deserializationFeatureArray0.length);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      MockIOException mockIOException0 = new MockIOException("java.lang.String", sQLNonTransientException0);
      assertNotNull(mockIOException0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedOutputStream0, "%", mockIOException0);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<Double> class2 = Double.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertNotNull(fieldArray0);
      assertEquals(13, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType");
      assertFalse(boolean0);
      
      Class<String> class0 = String.class;
      String string1 = ClassUtil.createInstance(class0, false);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = ClassUtil.hasClass("", class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", "", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 58);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper1);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(6, deserializationFeatureArray0.length);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(objectMapper2);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      ObjectReader objectReader0 = objectMapper2.reader();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(objectReader0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(typeFactory0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(arrayType0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertEquals(6, deserializationFeatureArray0.length);
      
      TypeBindings typeBindings0 = arrayType0.getBindings();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(typeBindings0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertEquals(6, deserializationFeatureArray0.length);
      
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      javaTypeArray0[2] = (JavaType) arrayType0;
      javaTypeArray0[3] = (JavaType) arrayType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, javaTypeArray0, (JavaType) arrayType0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isEnumType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertNotNull(referenceType0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertEquals(6, deserializationFeatureArray0.length);
      assertEquals(4, javaTypeArray0.length);
      
      try { 
        objectMapper0.convertValue((Object) "JSON", javaTypeArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.util.AccessPattern[]` out of VALUE_STRING token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<ReferenceType> class2 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class2, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<JsonMappingException> class3 = JsonMappingException.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class3, class0, true);
      assertEquals(9, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0, (-2318), 10);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(1, charArray0.length);
      
      Class<Integer> class2 = Integer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class2, jsonToken0, "W");
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(mismatchedInputException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(1, charArray0.length);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mismatchedInputException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: W
         //  at [Source: (char[])\".\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("I:&\"x !gY,%hV^,c#Pq");
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3376));
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertTrue(class2.isEnum());
      assertNotNull(class2);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray1 = constructor0.getDeclaredAnnotationsByType(class1);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray1);
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertNotSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotatedTypeArray0);
      assertEquals(0, annotatedTypeArray0.length);
      
      Class<Annotation> class2 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class2);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(boolean0);
      assertSame(class2, class1);
      
      TypeVariable<Constructor<Error>>[] typeVariableArray0 = constructor0.getTypeParameters();
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(typeVariableArray0);
      assertEquals(0, typeVariableArray0.length);
      
      Annotation[] annotationArray2 = constructor0.getDeclaredAnnotationsByType(class1);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray2);
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertFalse(annotationArray2.equals((Object)annotationArray1));
      assertSame(class1, class2);
      assertNotSame(annotationArray2, annotationArray0);
      assertNotSame(annotationArray2, annotationArray1);
      assertEquals(0, annotationArray2.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Class<NoClass> class3 = NoClass.class;
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<String> class5 = String.class;
      Class<?> class6 = ClassUtil.getDeclaringClass(class5);
      assertNull(class6);
      
      Class<Float> class7 = Float.class;
      Class<JsonMappingException> class8 = JsonMappingException.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class7, class8, false);
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class8, class0, list0);
      assertFalse(list2.isEmpty());
      assertEquals(8, list2.size());
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list2);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list0.equals((Object)list1));
      assertSame(list2, list0);
      assertSame(list0, list2);
      
      Class<AccessPattern> class9 = AccessPattern.class;
      String string0 = ClassUtil.isLocalType(class9, false);
      assertNull(string0);
      
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(class1, class2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<Character> class1 = Character.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      Class<?> class2 = ClassUtil.primitiveType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
      
      Class<Long> class3 = Long.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class3);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)114);
      assertEquals((short)114, (short)short0);
      assertNotNull(short0);
      
      Short short1 = ClassUtil.nonNull((Short) null, short0);
      assertEquals((short)114, (short)short1);
      assertNotNull(short1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Object> class2 = Object.class;
      boolean boolean2 = ClassUtil.isProxyType(class2);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(9, jsonParser_FeatureArray0.length);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)37;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, byteArrayOutputStream0, byteArray0, (byte)101, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(101, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-41), (byte)101, (byte)96, (byte)37}, byteArray0);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertEquals(5, byteArray0.length);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      SerializableString serializableString0 = jsonpCharacterEscapes0.getEscapeSequence((byte)101);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNull(serializableString0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(101, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(101, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(uTF8JsonGenerator1);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-41), (byte)101, (byte)96, (byte)37}, byteArray0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertEquals(5, byteArray0.length);
      
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.java.lang.Byte");
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: org.hibernate.proxy.java.lang.Byte", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.Byte", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: org.hibernate.proxy.java.lang.Byte
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfRTE(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertNotNull(sQLDataException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Class<Error> class0 = Error.class;
      Class<SimpleType> class1 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isPrimitive());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertNotNull(simpleType0);
      
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isPrimitive());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertNotNull(referenceType0);
      assertEquals(1, javaTypeArray0.length);
      
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(sQLDataException1);
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isPrimitive());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertNotNull(referenceType1);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertEquals(1, javaTypeArray0.length);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, referenceType1, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isPrimitive());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertEquals(1, javaTypeArray0.length);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isPrimitive());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(1, javaTypeArray0.length);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, mapperFeatureArray0.length);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(0, mapperFeatureArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)27;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper2, pipedOutputStream0, byteArray0, 55, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isPrimitive());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(55, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertArrayEquals(new byte[] {(byte)95, (byte)18, (byte) (-67), (byte)33, (byte) (-70), (byte)2, (byte) (-6), (byte)2, (byte)27}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, javaTypeArray0.length);
      assertEquals(0, mapperFeatureArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("com.fasterxml.jackson.databind.util.JSONPObject");
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      
      MockFile mockFile0 = new MockFile("net.sf.cglib.proxy.");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "JSON");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((File) mockFile1, jsonEncoding0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("net.sf.cglib.proxy.", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("net.sf.cglib.proxy.", mockFile0.getName());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("JSON", mockFile1.getName());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/experiment/net.sf.cglib.proxy./JSON", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("/experiment/net.sf.cglib.proxy.", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(27, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.util.JSONPObject", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) sQLDataException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, true);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class1, class1, list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("IVxyPeEz;yT!Rzuj9*");
      assertNotNull(mockRuntimeException0);
      
      String string0 = mockRuntimeException0.getLocalizedMessage();
      assertEquals("IVxyPeEz;yT!Rzuj9*", string0);
      assertNotNull(string0);
      
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLException0.getSQLState());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLException0.toString());
      assertNotNull(sQLException0);
      
      mockRuntimeException0.addSuppressed(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLException0.getSQLState());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLException0.toString());
      
      String string1 = ClassUtil.getClassDescription(mockRuntimeException0);
      assertEquals("`org.evosuite.runtime.mock.java.lang.MockRuntimeException`", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Double> class1 = Double.class;
      String string2 = ClassUtil.getPackageName(class1);
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(parameterArray0);
      assertEquals(0, parameterArray0.length);
      
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-10123));
      assertEquals((short) (-10123), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = ClassUtil.nonNull(short0, short1);
      assertEquals((short)8, (short)short2);
      assertNotNull(short2);
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(boolean0);
      
      Class<IOException> class1 = IOException.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, (Class<?>) null, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      Class<Byte> class1 = Byte.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("byte", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2116));
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertEquals(16385, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('F');
      assertEquals("F", stringWriter0.toString());
      assertEquals("F", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((Writer) stringWriter1);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("F", stringWriter0.toString());
      assertEquals("F", stringWriter1.toString());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2434);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Integer> class1 = Integer.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Number", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("net.sf.cglib.proxy.java.lang.Void/net.sf.cglib.proxy.java.lang.Void");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      MockFile mockFile0 = new MockFile("net.sf.cglib.proxy.java.lang.Void", "net.sf.cglib.proxy.java.lang.Void");
      assertNotNull(mockFile0);
      
      try { 
        objectMapper0.writeValue((File) mockFile0, (Object) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(serializerProvider0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON");
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(jsonMappingException0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = ClassUtil.nonNull((Short) null, (Short) null);
      assertNull(short0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNull(annotation0);
      
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("p?ltpS-gD-2e'", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      assertEquals("java.sql.SQLTimeoutException: p?ltpS-gD-2e'", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", sQLTimeoutException0.getSQLState());
      assertEquals("p?ltpS-gD-2e'", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: p?ltpS-gD-2e'", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", sQLTimeoutException0.getSQLState());
      assertEquals("p?ltpS-gD-2e'", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: p?ltpS-gD-2e'", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("p?ltpS-gD-2e'", sQLTimeoutException1.getMessage());
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      
      String string1 = ClassUtil.isLocalType(class0, true);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLRecoverableException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLDataException0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLRecoverableException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLRecoverableException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectReader0, byteArrayBuilder0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLRecoverableException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLRecoverableException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwIfRTE(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertNull(sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNotNull(sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      JsonDeserializer<Module> jsonDeserializer1 = ClassUtil.nonNull(jsonDeserializer0, jsonDeserializer0);
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      assertNotNull(jsonDeserializer1);
      assertSame(jsonDeserializer1, jsonDeserializer0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean0);
      
      Class<ArrayType> class3 = ArrayType.class;
      String string0 = ClassUtil.canBeABeanType(class3);
      assertNull(string0);
      
      String string1 = ClassUtil.nullOrToString(jsonDeserializer1);
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      assertNotNull(string1);
      assertSame(jsonDeserializer1, jsonDeserializer0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class3);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
      
      Class<Short> class4 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class4, true);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<Double> class5 = Double.class;
      TypeBindings typeBindings0 = null;
      Class<JsonMappingException> class6 = JsonMappingException.class;
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class6, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.JsonMappingException with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertTrue(boolean0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1017, 1017);
      assertNotNull(lRUMap0);
      
      int int0 = lRUMap0.size();
      assertEquals(0, int0);
      
      Class<LinkedList> class1 = LinkedList.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      deserializationFeatureArray0[2] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[3] = deserializationFeature2;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectReader0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1017);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(placeholderForType0);
      
      ObjectReader objectReader1 = objectReader0.forType((JavaType) placeholderForType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(typeFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(typeFactory1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(typeFactory2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertEquals(6, deserializationFeatureArray0.length);
      
      Class<Object> class2 = Object.class;
      CollectionType collectionType0 = typeFactory2.constructCollectionType(class1, class2);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertNotNull(collectionType0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertSame(class2, class0);
      assertEquals(6, deserializationFeatureArray0.length);
      
      JavaType javaType0 = typeFactory1.moreSpecificType(placeholderForType0, placeholderForType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertNotNull(javaType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotSame(objectReader0, objectReader1);
      assertSame(placeholderForType0, javaType0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(javaType0, placeholderForType0);
      assertEquals(6, deserializationFeatureArray0.length);
      
      Class<ReferenceType> class3 = ReferenceType.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class3);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        typeFactory0.findClass("ns");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class 'ns.class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      MockFile mockFile0 = new MockFile("*GS1?b[@");
      assertNotNull(mockFile0);
      
      try { 
        objectMapper1.writeValue((File) mockFile0, (Object) objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(objectMapper2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertNotNull(mapType0);
      
      try { 
        objectMapper2.convertValue((Object) mapType0, (JavaType) mapType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct instance of `java.util.HashMap` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('java.util.HashMap<java.lang.Object,java.lang.Object>')
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = "net.sf.cglib.proxy.java.lang.Void";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Void");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<MapType> class1 = MapType.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertNotNull(constructor1);
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor1);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(boolean0);
      
      String string0 = "ns";
      String string1 = ClassUtil.backticked("ns");
      assertEquals("`ns`", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ClassUtil.quotedOr(classUtil_Ctor0, "!T$&}OSVLJ_aXa@G*r~");
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = ClassUtil.isLocalType(class0, true);
      assertNull(string3);
      
      Class<IOException> class1 = IOException.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "ns", true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"com.fasterxml.jackson.databind.util.ClassUtil$Ctor@1\"");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, 1853);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      assertEquals(4, byteArrayBuilder0.size());
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(objectOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, objectOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.nonNullString("q>/1Ck^pDOO");
      assertEquals("q>/1Ck^pDOO", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.backticked("q>/1Ck^pDOO");
      assertEquals("`q>/1Ck^pDOO`", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class2 = ClassUtil.classOf((Object) null);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = null;
      String string1 = ClassUtil.nonNullString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Class<Character> class0 = Character.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Class<IOException> class1 = IOException.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) "fqABk[:I@yhrK2RZ\"H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      System.setCurrentTimeMillis(0L);
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator((OutputDecorator) null);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, false);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertNotNull(jsonFactory3);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('%');
      assertEquals("%", stringWriter0.toString());
      assertEquals("%", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Constructor<Byte> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double(1008.4017610625);
      assertEquals(1008.4017610625, (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Class<MapType> class2 = MapType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (-1056));
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      String string0 = ClassUtil.getClassDescription(double0);
      assertEquals("`java.lang.Double`", string0);
      assertNotNull(string0);
      
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      Class<MapType> class4 = MapType.class;
      boolean boolean0 = ClassUtil.isProxyType(class4);
      assertFalse(boolean0);
      assertSame(class4, class2);
      
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class5.toString());
      assertTrue(class5.isEnum());
      assertFalse(class5.isAnnotation());
      assertEquals(16385, class5.getModifiers());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertFalse(class5.isPrimitive());
      assertNotNull(class5);
      assertSame(class2, class4);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1056);
      intArray0[1] = (-1612);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`java.lang.Double`", "FDvu2(!|G'!FBg#", (-1056), intArray0, mockException0);
      assertEquals("java.sql.BatchUpdateException: `java.lang.Double`", batchUpdateException0.toString());
      assertEquals((-1056), batchUpdateException0.getErrorCode());
      assertEquals("FDvu2(!|G'!FBg#", batchUpdateException0.getSQLState());
      assertEquals("`java.lang.Double`", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1056), (-1612)}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(0.0F, object0);
      assertNotNull(object0);
      
      Class<Error> class1 = Error.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Throwable throwable0 = null;
      Throwable throwable1 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable1);
      
      Class<Character> class1 = Character.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class3, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertNull(class1);
      
      Short short0 = ClassUtil.nonNull((Short) null, (Short) null);
      assertNull(short0);
      
      Class<String> class2 = String.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short short0 = new Short((short)687);
      assertEquals((short)687, (short)short0);
      assertNotNull(short0);
      
      Short short1 = ClassUtil.nonNull(short0, short0);
      assertEquals((short)687, (short)short1);
      assertNotNull(short1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertNull(jsonGenerator0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (Throwable) null);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Annotation> class1 = Annotation.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(boolean0);
      
      Class<Byte> class2 = Byte.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      System.setCurrentTimeMillis(0L);
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator((OutputDecorator) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, false);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertNotNull(jsonFactory3);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('%');
      assertEquals("%", stringWriter0.toString());
      assertEquals("%", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((Writer) stringWriter1);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("%", stringWriter0.toString());
      assertEquals("%", stringWriter1.toString());
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON");
      assertEquals("JSON", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: JSON", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double(249.756);
      assertEquals(249.756, (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("``", string0);
      assertNotNull(string0);
      
      Class<Void> class2 = Void.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (-1612));
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      String string1 = ClassUtil.getClassDescription(accessPattern0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Object> class3 = Object.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      Class<Integer> class5 = Integer.class;
      boolean boolean0 = ClassUtil.isProxyType(class5);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class6 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertTrue(class6.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class6.toString());
      assertEquals(16385, class6.getModifiers());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isPrimitive());
      assertNotNull(class6);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1612);
      intArray0[1] = (-1612);
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockException0);
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("``", "9s-2zT'~3VWtq(KE", sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals("``", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ``", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("9s-2zT'~3VWtq(KE", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`com.fasterxml.jackson.databind.util.AccessPattern`", "``", (-1612), intArray0, sQLRecoverableException0);
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals("``", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ``", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("9s-2zT'~3VWtq(KE", sQLRecoverableException0.getSQLState());
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: `com.fasterxml.jackson.databind.util.AccessPattern`", batchUpdateException0.toString());
      assertEquals("``", batchUpdateException0.getSQLState());
      assertEquals((-1612), batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1612), (-1612)}, intArray0);
      assertEquals(2, intArray0.length);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("``", "``", batchUpdateException0);
      assertEquals("java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLTransientConnectionException0.getMessage());
      assertEquals("``", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ``", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("9s-2zT'~3VWtq(KE", sQLRecoverableException0.getSQLState());
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: `com.fasterxml.jackson.databind.util.AccessPattern`", batchUpdateException0.toString());
      assertEquals("``", batchUpdateException0.getSQLState());
      assertEquals((-1612), batchUpdateException0.getErrorCode());
      assertEquals("``", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ``", sQLNonTransientException0.toString());
      assertEquals("``", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      assertArrayEquals(new int[] {(-1612), (-1612)}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double(246.71409962434137);
      assertEquals(246.71409962434137, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ClassUtil.backticked("8");
      assertEquals("`8`", string0);
      assertNotNull(string0);
      
      Iterator<Enum<AccessPattern>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Short short0 = new Short((short)796);
      assertEquals((short)796, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1017);
      assertEquals((short)1017, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = ClassUtil.nonNull(short1, short0);
      assertEquals((short)1017, (short)short2);
      assertNotNull(short2);
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short2.equals((Object)short0));
      
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class2);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertSame(class2, class3);
      assertSame(class3, class2);
      assertNotSame(list1, list0);
      
      Class<SimpleModule> class4 = SimpleModule.class;
      Class<?> class5 = ClassUtil.getDeclaringClass(class4);
      assertNull(class5);
      
      Class<Error> class6 = Error.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class6);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(5, classUtil_CtorArray0.length);
      
      Stack<JavaType> stack0 = new Stack<JavaType>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      assertSame(class3, class2);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertNotNull(resolvedRecursiveType0);
      
      boolean boolean0 = resolvedRecursiveType0.isReferenceType();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(boolean0);
      assertSame(class3, class2);
      
      JavaType javaType0 = resolvedRecursiveType0.getSuperClass();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertNull(javaType0);
      assertSame(class3, class2);
      
      List<JavaType> list2 = ClassUtil.findSuperTypes((JavaType) null, class1, false);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<NoClass> class1 = NoClass.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class1, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.create(class0, list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      javaTypeArray0[5] = null;
      javaTypeArray0[6] = null;
      javaTypeArray0[7] = null;
      javaTypeArray0[8] = null;
      // Undeclared exception!
      try { 
        CollectionType.construct(class0, typeBindings0, (JavaType) null, javaTypeArray0, javaTypeArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Module> class1 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.Module()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.Module()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.Module()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.Module()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.Module()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.Module()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.fasterxml.jackson.databind.Module()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.quotedOr(mockRuntimeException0, "elementType");
      assertEquals("\"org.evosuite.runtime.mock.java.lang.MockThrowable\"", string0);
      assertNotNull(string0);
      
      Iterator<Enum<AccessPattern>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Short> class2 = Short.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertFalse(class3.isInterface());
      assertEquals("short", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      Short short0 = new Short((short)1017);
      assertEquals((short)1017, (short)short0);
      assertNotNull(short0);
      
      Short short1 = ClassUtil.nonNull(short0, short0);
      assertEquals((short)1017, (short)short1);
      assertNotNull(short1);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<t \"");
      assertFalse(boolean0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<Short> class2 = Short.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(2, typeArray0.length);
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class0);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertNotNull(class3);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl1);
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class2, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Class<AccessPattern> class4 = AccessPattern.class;
      boolean boolean1 = ClassUtil.isBogusClass(class4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.nonNullString("java.lang.String");
      assertEquals("java.lang.String", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<Short> class2 = Short.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class0);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertNotNull(class3);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      boolean boolean1 = false;
      MockFile mockFile0 = new MockFile("\"%s\"");
      assertNotNull(mockFile0);
      
      objectMapper1.writeValue((File) mockFile0, (Object) deserializationFeature0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertFalse(mockFile0.isHidden());
      assertEquals("\"%s\"", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(28L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("\"%s\"", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(3, deserializationFeatureArray0.length);
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      TypeReference<JsonMappingException> typeReference0 = (TypeReference<JsonMappingException>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Class<?>) null).when(typeReference0).getType();
      ObjectReader objectReader0 = objectMapper2.readerFor(class2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(objectReader0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(3, deserializationFeatureArray0.length);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      // Undeclared exception!
      try { 
        objectMapper2.writerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<t \"");
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
      assertNotNull(string0);
      
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double(249.756);
      assertEquals(249.756, (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNotNull(beanProperty_Bogus0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus1.isRequired());
      assertFalse(beanProperty_Bogus1.isVirtual());
      assertEquals("", beanProperty_Bogus1.getName());
      assertNotNull(beanProperty_Bogus1);
      assertFalse(beanProperty_Bogus1.equals((Object)beanProperty_Bogus0));
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string2 = mockRuntimeException0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string2);
      assertNotNull(string2);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", mockRuntimeException0);
      assertEquals("java.sql.SQLTransactionRollbackException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Short`", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double(246.71409962434137);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isConcrete(class0);
      String string0 = ClassUtil.nullOrToString("xe");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasClass(class0, class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getParameterCount();
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      String string0 = "t7d-yr[X*=&O+";
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("BS2", (String) null, "(C@Ta\"*", (-583));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<ArrayType> class1 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1, 1);
      lRUMap0.size();
      lRUMap0.size();
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<LinkedList> class0 = LinkedList.class;
      typeFactory1.constructCollectionType(class0, class0);
      ClassUtil.isObjectOrPrimitive(class0);
      try { 
        typeFactory0.findClass("Cannot figure out type for EnumSet (odd JDK platform?)");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class 'Cannot figure out type for EnumSet (odd JDK platform?).class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6-f&hp6Pbc:p6J", "6-f&hp6Pbc:p6J");
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jackson.databind.deser.ValueInstantiators$Base");
      Class<Object> class0 = Object.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.backticked("8RG");
      Class<String> class2 = String.class;
      Class<IOException> class3 = IOException.class;
      ClassUtil.getGenericSuperclass(class3);
      ClassUtil.backticked(") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with ");
      Double double0 = new Double((-2415.852));
      ClassUtil.isJacksonStdImpl((Object) class2);
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hibernate.proxy.java.lang.reflect.AccessibleObject", "com.fasterxml.jacks", "8RG", (-4496));
      ClassUtil.quotedOr(") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with ", (String) null);
      Class<Integer> class4 = Integer.TYPE;
      Class<Character> class5 = Character.class;
      ClassUtil.findRawSuperTypes(class2, class5, false);
      Class<AccessibleObject> class6 = AccessibleObject.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class6);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1, 1);
      lRUMap0.size();
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<LinkedList> class0 = LinkedList.class;
      typeFactory1.constructCollectionType(class0, class0);
      try { 
        typeFactory0.findClass("Cannot figure out type for EnumSet (odd JDK platform?)");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class 'Cannot figure out type for EnumSet (odd JDK platform?).class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class2);
      constructor0.getAnnotatedReturnType();
      Double double0 = new Double((-1.0));
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertTrue(boolean1 == boolean0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("@vw#o%#LR|F ", "@vw#o%#LR|F ", "elementType", (-6));
      String string0 = ClassUtil.quotedOr(classUtil_Ctor0, (String) null);
      assertFalse(constructor0.isAccessible());
      assertNotNull(string0);
      
      Class<MapLikeType> class3 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class3, true);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.findEnumType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.PRC;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      objectMapper2.enable(mapperFeatureArray0);
      objectMapper1.getDeserializationContext();
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.backticked("q>/1Ck^pDOO");
      Class<String> class2 = String.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.backticked("n&F.7k_1hOZ=^B4=2a");
      Object object0 = new Object();
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "yERs+L_t!r(IWN\"o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor1.getParameterAnnotations();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Double double0 = new Double(249.756);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4);
      ClassUtil.classNameOf("j|$!{");
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes(class0, class2);
      ClassUtil.getDeclaringClass(class1);
      Class<Long> class3 = Long.class;
      ClassUtil.getConstructors(class3);
      Class<Long> class4 = Long.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class4, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.findEnumType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      MockFile mockFile0 = new MockFile("\"%s\"");
      objectMapper1.writeValue((File) mockFile0, (Object) deserializationFeature0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      deserializationFeatureArray0[2] = deserializationFeature0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"%s\"", "\"%s\"");
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwIfRTE(sQLRecoverableException0);
      assertEquals("\"%s\"", sQLRecoverableException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.findEnumType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      MockFile mockFile0 = new MockFile("\"%s\"");
      objectMapper1.writeValue((File) mockFile0, (Object) deserializationFeature0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      TypeReference<JsonMappingException> typeReference0 = (TypeReference<JsonMappingException>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper2.writerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.backticked("q>/1Ck^pDOO");
      Class<String> class2 = String.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.backticked("n&F.7k_1hOZ=^B4=2a");
      Double double0 = new Double((-2415.852));
      ClassUtil.isJacksonStdImpl((Object) "q>/1Ck^pDOO");
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "Cannot figure out type for EnumSet (odd JDK platform?)", 192);
      ClassUtil.quotedOr((Object) null, "net.sf.cglib.proxy.java.lang.String");
      Class<Integer> class3 = Integer.TYPE;
      ClassUtil.findRawSuperTypes(class3, class1, false);
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonFactory2.configure(jsonGenerator_Feature0, false);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      ClassUtil.getDeclaredMethods(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isBogusClass(class1);
      Double double1 = new Double((-752.6219));
      ClassUtil.isJacksonStdImpl((Object) double1);
      StackTraceElement stackTraceElement0 = new StackTraceElement("elementType", "@vw#o%#LR|F ", "elementType", 1087);
      ClassUtil.quotedOr("V48&qv", "cvhq8m,$");
      Class<Object> class2 = Object.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Character> class0 = Character.class;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLWarning sQLWarning0 = new SQLWarning("Y7x*55", "Y7x*55");
      sQLWarning0.spliterator();
      ClassUtil.getRootCause(sQLWarning0);
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("Y7x*55", sQLWarning0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Y7x*55
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParameterAnnotations();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.ser.std.StringSerializer");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.StringSerializer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<t \"");
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      String string1 = ClassUtil.classNameOf(class0);
      assertEquals("`java.lang.Class`", string1);
      
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<Void> class3 = Void.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      assertEquals(1, list0.size());
      
      Class<Object> class4 = Object.class;
      Class<CollectionLikeType> class5 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class5);
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil.backticked((String) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findClassAnnotations(class0);
      Short short0 = new Short((short) (-8764));
      ClassUtil.nonNull(short0, short0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isProxyType(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class2);
      Class<SimpleType> class3 = SimpleType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass((Object) null, class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      jsonFactory3.createGenerator((Writer) mockFileWriter0);
      DataTruncation dataTruncation0 = new DataTruncation(57343, false, false, 57343, 55296);
      dataTruncation0.spliterator();
      Throwable throwable0 = ClassUtil.getRootCause(dataTruncation0);
      ClassUtil.primitiveType(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      MockException mockException0 = new MockException(throwable0);
      MockIOException mockIOException0 = new MockIOException("JSON", mockException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLWarning sQLWarning0 = new SQLWarning("{", "{");
      sQLWarning0.spliterator();
      ClassUtil.getRootCause(sQLWarning0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("expected a hex-digit for character escape sequence", sQLWarning0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // expected a hex-digit for character escape sequence
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass((Object) null, class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      jsonFactory3.createGenerator((Writer) mockFileWriter0);
      String string0 = "serialVersionUID";
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = MockURL.URL(uRL0, "?a5BB{RO");
      // Undeclared exception!
      try { 
        jsonFactory2.createParser(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(108, 2);
      TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      Class<?> class2 = ClassUtil.rawClass(collectionType0);
      assertNotNull(class2);
      
      String string0 = ClassUtil.nullOrToString(class1);
      assertNotNull(string0);
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNotNull(string1);
      assertEquals("primitive", string1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<t \"");
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      String string1 = ClassUtil.classNameOf(fileSystemHandling0);
      assertEquals("`org.evosuite.runtime.testdata.FileSystemHandling`", string1);
      
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<ArrayType> class2 = ArrayType.class;
      Class<IOException> class3 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      assertEquals(6, list0.size());
      
      Class<Object> class4 = Object.class;
      ClassUtil.getDeclaringClass(class4);
      Class<Short> class5 = Short.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class5);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) null);
      assertFalse(boolean1 == boolean0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("V48&qv", "V48&qv", "@vw#o%#LR|F ", 1087);
      String string0 = ClassUtil.quotedOr((Object) null, "net.sf.cglib.proxy.double");
      assertEquals("net.sf.cglib.proxy.double", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParameterAnnotations();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double double0 = new Double(249.756);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Void> class0 = Void.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1612));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.getClassDescription(accessPattern0);
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class1);
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Character> class1 = Character.TYPE;
      Object object0 = ClassUtil.defaultValue(class1);
      assertEquals('\u0000', object0);
      
      Class<NoClass> class2 = NoClass.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertEquals("``", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.backticked("");
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.hasEnclosingMethod(class2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Short short0 = new Short((short) (-4777));
      ClassUtil.nonNull(short0, short0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.isProxyType(class3);
      Class<String> class4 = String.class;
      ClassUtil.getDeclaredFields(class4);
      ClassUtil.getOuterClass(class1);
      Class<ArrayType> class5 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Void> class1 = Void.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-1612));
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.getClassDescription(class1);
      Class<NoClass> class2 = NoClass.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Throwable throwable0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "No digit following minus sign";
      ClassUtil.nonNullString("No digit following minus sign");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{aOS%P>*e@");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getClassMethods(class1);
      Class<Boolean> class2 = Boolean.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaredFields(class0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("V48&qv", "keyUniverse", "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT", (-3528));
      stackTraceElementArray0[0] = stackTraceElement0;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.findSuperTypes(class0, (Class<?>) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.isJacksonStdImpl(class2);
      MockIOException mockIOException0 = new MockIOException(" for format ");
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Boolean boolean0 = new Boolean("6-f&hp6Pbc:p6J");
      Short short0 = new Short((short)5480);
      Short short1 = new Short((short) (-2));
      Short short2 = new Short((short)5480);
      ClassUtil.nonNull(short1, short2);
      Class<MapType> class0 = MapType.class;
      ClassUtil.isProxyType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.findSuperTypes(class0, (Class<?>) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = null;
      ClassUtil.nonNullString((String) null);
      Class<Character> class0 = Character.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getPackageName(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getEnclosingClass(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      String string1 = "NULL";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("NULL", "NULL");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // NULL
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Float> class1 = Float.class;
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.classOf(class0);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.nonNullString("Missing external type id property '%s'");
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.findClassAnnotations(class1);
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-3));
      ClassUtil.nonNull(short1, short0);
      ClassUtil.isProxyType(class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.getOuterClass(class2);
      Class<CollectionType> class3 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<String> class3 = String.class;
      ClassUtil.getDeclaringClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Double double0 = new Double(249.756);
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.nonNullString("vals");
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getAnnotatedParameterTypes();
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      constructor0.getTypeParameters();
      Class<Error> class4 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class4, false);
      constructor1.getDeclaredAnnotationsByType(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      Class<Byte> class5 = Byte.class;
      Class<Short> class6 = Short.class;
      ClassUtil.findSuperTypes(class5, class6);
      Class<?> class7 = ClassUtil.getDeclaringClass(class2);
      assertNull(class7);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertEquals("double", class2.toString());
      
      ClassUtil.nonNullString("+f;GC6");
      ClassUtil.getEnclosingClass(class0);
      String string0 = ClassUtil.nonNullString("primitive");
      assertEquals("primitive", string0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<NoClass> class3 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class3, true);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Double double0 = new Double(249.756);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLNonTransientException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      constructor0.getAnnotatedParameterTypes();
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      constructor0.getTypeParameters();
      constructor0.getName();
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      
      Class<NoClass> class3 = NoClass.class;
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      assertEquals(0, list0.size());
      
      Class<String> class5 = String.class;
      ClassUtil.getDeclaringClass(class5);
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "0WS9", 1450);
      sQLSyntaxErrorException0.printStackTrace();
      sQLClientInfoException0.setNextException(sQLSyntaxErrorException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("0WS9", (String) null, map0, sQLClientInfoException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("keyType", clientInfoStatus0);
      hashMap0.entrySet();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("0WS9", "0WS9", sQLClientInfoException1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.nonNullString("primitive");
      Short short0 = new Short((short) (-1116));
      ClassUtil.classOf(short0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getGenericExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      SQLException sQLException0 = new SQLException("vals", "g4", (short) (-1116));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("primitive", "vals", (Map<String, ClientInfoStatus>) null, sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0, "nn8`Hm%QHXL;dk/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nn8`Hm%QHXL;dk/
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = "u;?n7--~S";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "u;?n7--~S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // u;?n7--~S
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Double double0 = new Double(249.756);
      String string0 = ClassUtil.quotedOr(double0, "NULL");
      assertEquals("\"249.756\"", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      String string0 = "vals";
      ClassUtil.nonNullString("vals");
      Class<Object> class1 = Object.class;
      ClassUtil.primitiveType(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("elementType", "elementType", 3429, mockThrowable0);
      sQLTransactionRollbackException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "elementType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.backticked("'<s}#p9|R#HW|");
      String string0 = "?ymA(=f\"";
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, (-11));
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Class<?> class2 = ClassUtil.rawClass(collectionType1);
      assertFalse(class2.isEnum());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isConcrete(class1);
      String string0 = ClassUtil.nullOrToString(">ej");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.CollectionType) must override method ''
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaredFields(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("ACCEPT_EMPTY_STRING_AS_NULL_OBJECT");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT", (Throwable) sQLTransientException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("V48&qv", "keyUniverse", "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT", (-3528));
      stackTraceElementArray0[0] = stackTraceElement0;
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
      String string0 = ClassUtil.nonNullString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.findEnumType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(mapperFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientConnectionException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<Integer> class1 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "serialVersionUID", "serialVersionUID");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Integer` from String \"serialVersionUID\": serialVersionUID
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      int int0 = 50;
      SQLDataException sQLDataException0 = new SQLDataException("Cannot access ", "nue]o(=@!'QTn#t", 50);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot access 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`short`", string0);
      
      String string1 = ClassUtil.backticked("5:g=5gh");
      assertEquals("`5:g=5gh`", string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("Default constructor for ", "Default constructor for ");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, javaTypeArray0, (JavaType) arrayType0);
      try { 
        objectMapper0.convertValue((Object) referenceType0, (JavaType) arrayType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize instance of `java.lang.RuntimeException[]` out of VALUE_STRING token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      Class<Void> class0 = Void.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "entrySet", "yGz;y^i8kY+");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("NL*B2iNUIdbgw%s,d", (Class<?>) null, "NL*B2iNUIdbgw%s,d");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type [null] from String \"NL*B2iNUIdbgw%s,d\": NL*B2iNUIdbgw%s,d
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<t \"");
      ClassUtil.backticked("<t \"");
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.classNameOf(fileSystemHandling0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6-f&1p6Pbc:p6J");
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<CollectionLikeType>[] classArray0 = (Class<CollectionLikeType>[]) Array.newInstance(Class.class, 6);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      classArray0[0] = class2;
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      classArray0[1] = class3;
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      classArray0[2] = class4;
      Class<CollectionLikeType> class5 = CollectionLikeType.class;
      classArray0[3] = class5;
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      classArray0[4] = class6;
      Class<CollectionLikeType> class7 = CollectionLikeType.class;
      classArray0[5] = class7;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      int int0 = 862;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.disableDefaultTyping();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) constructor0;
      constructor0.getAnnotations();
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      constructor0.getAnnotations();
      Object object0 = new Object();
      objectArray0[4] = object0;
      try { 
        constructor0.newInstance(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.classOf(class0);
      SQLDataException sQLDataException0 = new SQLDataException("Missing external type id property '%s'", "WXGZ&n");
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfIOE(sQLDataException0);
      assertEquals(0, sQLDataException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class0, class0, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot access ", "[YuD-?O2", mockRuntimeException0);
      mockRuntimeException0.addSuppressed(sQLTransientConnectionException0);
      mockRuntimeException0.getStackTrace();
      mockRuntimeException0.toString();
      mockRuntimeException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "elementType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.getClassMethods(class1);
      Constructor<RuntimeException> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = false;
      ClassUtil.createInstance(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "serialVersionUID");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jackson.databind.deser.ValueInstantiators$Base");
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.hasEnclosingMethod(class0);
      Short short0 = new Short((short) (-1408));
      ClassUtil.nonNull(short0, short0);
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getOuterClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      MockIOException mockIOException0 = new MockIOException("X=(oBhR:MnmXG;$Qwu");
      mockIOException0.getCause();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8[<mju+1!(.Q3", mockIOException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
