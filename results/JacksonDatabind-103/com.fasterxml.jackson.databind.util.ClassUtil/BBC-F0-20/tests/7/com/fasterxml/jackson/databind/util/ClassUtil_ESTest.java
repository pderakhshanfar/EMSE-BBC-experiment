/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:34:14 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.Named;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '1';
      charArray0[2] = ';';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Object> class1 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaTypeArray0[6], javaTypeArray0[6]);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) collectionLikeType0);
      JavaType[] javaTypeArray1 = new JavaType[5];
      javaTypeArray1[0] = (JavaType) collectionLikeType0;
      javaTypeArray1[1] = (JavaType) collectionLikeType0;
      javaTypeArray1[2] = (JavaType) collectionLikeType0;
      javaTypeArray1[3] = (JavaType) collectionType0;
      javaTypeArray1[4] = (JavaType) collectionType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, javaTypeArray1, javaTypeArray1[0], javaTypeArray0[4]);
      MapType mapType1 = mapType0.withContentTypeHandler(deserializerFactory0);
      MockError mockError0 = new MockError();
      MapType mapType2 = mapType1.withKeyValueHandler(mockError0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) mapType2, jsonToken0, "java.lang.annotation");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: java.lang.annotation
         //  at [Source: (char[])\"/1;\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(6);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) placeholderForType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("[`/uii+TEh//f");
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[`/uii+TEh//f");
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      javaTypeArray0[7] = (JavaType) placeholderForType0;
      javaTypeArray0[8] = (JavaType) placeholderForType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings1, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[1]);
      CollectionType collectionType1 = collectionType0.withValueHandler(typeBindings1);
      ClassUtil.rawClass(collectionType1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Crrent context not Ojecw buB");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(14);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone(timeZone0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      jsonParser_FeatureArray0[5] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper4 = objectMapper3.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SimpleModule> priorityQueue0 = new PriorityQueue<SimpleModule>(comparator0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      objectMapper3.enable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper5 = objectMapper4.registerModules((Iterable<? extends Module>) priorityQueue0);
      // Undeclared exception!
      try { 
        objectMapper5.writeValue((DataOutput) null, (Object) jsonParser_Feature3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.DataOutputAsStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<String> class0 = String.class;
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("VQ", "VQ", 3453, hashMap0);
      sQLClientInfoException0.printStackTrace();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      ClassUtil.findEnumType(class1);
      Class<String> class2 = String.class;
      ClassUtil.getConstructors(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class3 = Object.class;
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      Class<ArrayType> class4 = ArrayType.class;
      Class<IOException> class5 = IOException.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class4, class5);
      Class<MapLikeType> class6 = MapLikeType.class;
      collectionLikeType0.isTypeOrSubTypeOf(class6);
      typeFactory0.constructArrayType((JavaType) collectionLikeType0);
      ArrayType arrayType0 = typeFactory0.constructArrayType(class3);
      MockError mockError0 = new MockError("0hm6WwoI<m&", throwable0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(mockError0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      ArrayType arrayType3 = arrayType2.withValueHandler(mockError0);
      ClassUtil.rawClass(arrayType3);
      ClassUtil.hasEnclosingMethod(class0);
      Class<String> class7 = String.class;
      ClassUtil.getDeclaredFields(class7);
      Class<IOException> class8 = IOException.class;
      ClassUtil.getDeclaredFields(class8);
      ClassUtil.canBeABeanType(class5);
      Class<SettableBeanProperty> class9 = SettableBeanProperty.class;
      ClassUtil.primitiveType(class9);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<IOException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang.reflect.P", "ksm:BkHj~A9Is");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0, "Sub-class %s (of class %s) must override method '%s'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sub-class %s (of class %s) must override method '%s'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "disable");
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Double double0 = new Double((-2141.62));
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.Void");
      Class<IOException> class0 = IOException.class;
      ClassUtil.createInstance(class0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "[Z)RLH:EeRN$WJw|gt-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "WXSrv`/g3K";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "WXSrv`/g3K");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      Double double0 = new Double((-1.0));
      ClassUtil.findEnumType(enumMap0);
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.java.lang.reflect.AccessibleObject", "WXSrv`/g3K", 4298, (Throwable) null);
      sQLWarning0.getSuppressed();
      // Undeclared exception!
      try { 
        sQLWarning0.initCause((Throwable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with a null
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "WXSrv`/g3K";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "WXSrv`/g3K");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Double double0 = new Double((-1.0));
      enumMap0.put(accessPattern0, double0);
      ClassUtil.findEnumType(enumMap0);
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.java.lang.reflect.AccessibleObject", "WXSrv`/g3K", 4298, (Throwable) null);
      sQLWarning0.getSuppressed();
      // Undeclared exception!
      try { 
        sQLWarning0.initCause((Throwable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with a null
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String string0 = "Leading zeroes not allowed";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "[null]", 2622);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{n`QUc", "Leading zeroes not allowed", sQLSyntaxErrorException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.lang.reflect.Co", hashMap0, sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) null, "[null]");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.reflect.Co (through reference chain: UNKNOWN[\"[null]\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.backticked("harOffset");
      ClassUtil.canBeABeanType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("primitive");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("harOffset", (String) null, (-1653959476), sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      Class<?> class0 = ClassUtil.classOf(accessPattern1);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) enumSet0);
      Predicate<Object> predicate1 = predicate0.negate();
      enumSet0.removeIf(predicate1);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      MockError mockError0 = new MockError();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.", mockError0);
      mockError0.addSuppressed(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, " (from class ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(constructor0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectReader0.withHandler(deserializationProblemHandler0);
      String string0 = "1133M.&";
      String string1 = "Illegal unquoted character (";
      boolean boolean0 = false;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory.defaultInstance();
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ObjectMapper objectMapper1 = new ObjectMapper();
      objectMapper1.canSerialize(class0);
      objectMapper1.readerForUpdating(constructor0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jsonFactory_Feature0;
      objectArray0[1] = (Object) jsonFactory1;
      objectArray0[2] = (Object) jsonParser_Feature0;
      objectArray0[3] = (Object) byteArrayBuilder0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format(locale0, "JSON", objectArray0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((Writer) mockPrintWriter1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern2, accessPattern1, accessPattern2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      List<Class<?>> list0 = new Vector<Class<InputStream>>();
      Class<String> class1 = String.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<SimpleType> class0 = SimpleType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "#$Cu=5", "#$Cu=5");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.SimpleType` from String \"#$Cu=5\": #$Cu=5
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.getClassDescription(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "com.fasterxml.jackson.databind.jsontype.TypeDeserializer");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[6];
      iOContext0.allocBase64Buffer();
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-52);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 124, objectMapper1, pipedOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper1);
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.jsontype.TypeDeserializer", "com.fasterxml.jackson.databind.jsontype.TypeDeserializer");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) pipedInputStream0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-6));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.isProxyType(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      String string0 = "Z]9 :\"P@X\"kN%/$vn";
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "f|#WGJ%e", "Z]9 :\"P@X\"kN%/$vn");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'f|#WGJ%e' as a subtype of [simple type, class java.lang.Object]: Z]9 :\"P@X\"kN%/$vn
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      MockError mockError0 = new MockError();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("/ui80", "/ui80", hashMap0, mockError0);
      mockError0.initCause(sQLClientInfoException0);
      mockError0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.setAccessible(false);
      constructor0.getAnnotationsByType(class1);
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.isJacksonStdImpl(class0);
      Class<CollectionType> class2 = CollectionType.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.backticked((String) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class3 = String.class;
      ClassUtil.getDeclaredFields(class3);
      Class<Error> class4 = Error.class;
      Class<AccessibleObject> class5 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.create(class5, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, resolvedRecursiveType0, "BwJZS6$");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.ResolvedRecursiveType (of class com.fasterxml.jackson.databind.type.CollectionType) must override method 'BwJZS6$'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.nameOf(class0);
      ClassUtil.findEnumType(class0);
      Class<String> class1 = String.class;
      String string0 = "'null', 'true', 'false' or NaN";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.verifyMustOverride(class1, "`com.fasterxml.jackson.databind.type.CollectionLikeType`", "'null', 'true', 'false' or NaN");
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2230);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class4);
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ClassUtil.getOuterClass(class5);
      String string0 = "java.sql.ClientInfoS";
      int[] intArray0 = new int[2];
      intArray0[0] = (-828);
      intArray0[1] = (-131072);
      DataTruncation dataTruncation0 = new DataTruncation((-2014059526), false, true, (-2014059526), 2557);
      MockError mockError0 = new MockError("java.sql.ClientInfoS", dataTruncation0);
      dataTruncation0.initCause(mockError0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.sql.ClientInfoS", intArray0, dataTruncation0);
      batchUpdateException0.getSuppressed();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      objectMapper0.setTypeFactory(typeFactory0);
      objectMapper0.readerFor(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory2.disable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("]$$u}<Fk2+gP?,");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "*Tbu)Q) *2J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"*Tbu)Q) *2J\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLException sQLException0 = new SQLException("ohz$NvdtITjW");
      sQLException0.printStackTrace();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 116, sQLException0);
      sQLNonTransientException0.getStackTrace();
      sQLException0.initCause(sQLNonTransientException0);
      sQLException0.spliterator();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.createInstance(class0, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isLocalType(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<K{TYy3-o");
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Locale.lookup(stack0, hashSet0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "<K{TYy3-o";
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) stack0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "<K{TYy3-o", objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, printStream0, byteArray0, (-1744094291), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLException sQLException0 = new SQLException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("P5$bulR89f{jJ,]+", sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: P5$bulR89f{jJ,]+
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isLocalType(class0, false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isConcrete(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      List<Class<?>> list0 = new ArrayList<Class<JsonMappingException>>();
      Class<InputStream> class3 = InputStream.class;
      ClassUtil.getDeclaringClass(class3);
      ClassUtil.isBogusClass(class2);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getUpdateCounts();
      ClassUtil.getRootCause(batchUpdateException0);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<Void> class4 = Void.class;
      ClassUtil.findSuperTypes(class4, class0, list0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Object> class1 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isObjectOrPrimitive(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder");
      Class<Annotation> class2 = Annotation.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 13);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class3);
      Class<String> class4 = String.class;
      ClassUtil.isLocalType(class4, false);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.isConcrete(class5);
      Class<AccessibleObject> class6 = AccessibleObject.class;
      Class<MapType> class7 = MapType.class;
      ClassUtil.findSuperTypes(class6, class7);
      Class<Float> class8 = Float.class;
      ClassUtil.getDeclaringClass(class8);
      ClassUtil.isBogusClass(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator((InputDecorator) null);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "C^mtFUCQs7^f#Y~ ]", (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&c1XHabi+2;mpa1^");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      MockError mockError0 = new MockError("&c1XHabi+2;mpa1^", sQLInvalidAuthorizationSpecException0);
      mockError0.getCause();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "$cQa3j]/hyvJz*=sE";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$cQa3j]/hyvJz*=sE");
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.findEnumType(class1);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.nonNullString("-eIIsa_-Iiw~a");
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      try { 
        ClassUtil.throwIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(") [");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "7mN6WFaPGKW^J";
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.hasEnclosingMethod(class0);
      System.setCurrentTimeMillis((-763L));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      String string0 = null;
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Boolean> class2 = Boolean.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      sQLFeatureNotSupportedException0.getStackTrace();
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.classNameOf(class0);
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      Class<Object> class2 = Object.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findRawSuperTypes(class0, class0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getDeclaringClass(class1);
      Class<Double> class2 = Double.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.findConstructor(class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterCount();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findEnumType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.canBeABeanType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nameOf((Class<?>) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("PJ3f.Zj_.8G&7z");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "JKLLxHLU0cRU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType";
      ClassUtil.quotedOr((Object) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.java.lang.Character");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Cannot parse date \"%s\": not compatible with any of standard forms (%s)", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findEnumType(class1);
      Class<Double> class2 = Double.TYPE;
      ClassUtil.primitiveType(class2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ClassUtil.nameOf(class2);
      Class<Module> class3 = Module.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getEnclosingClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, (Object) null, "O=yy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      Class<Object> class1 = Object.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class1);
      objectReader0.getTypeFactory();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLSyntaxErrorException0);
      ClassUtil.throwIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findEnumType(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.primitiveType(class2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nonNullString("charOffset");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Double double0 = new Double(0.0);
      String string0 = null;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(double0, class0, (String) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from number 0.0: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      Boolean boolean0 = new Boolean((String) null);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Throwable throwable0 = sQLSyntaxErrorException0.fillInStackTrace();
      throwable0.getSuppressed();
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      ClassUtil.throwIfRTE(throwable0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2385), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(1, class0, "size");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from number 1: size
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      jsonFactory3.setRootValueSeparator("ypg5B+f:F*S%<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h");
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockPrintWriter0);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      SQLDataException sQLDataException1 = new SQLDataException("h", "vals", throwable0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      mockIOException0.getMessage();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.isLocalType(class0, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.findEnumType(class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.isLocalType(class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.canBeABeanType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TypeFactory typeFactory1 = objectReader0.getTypeFactory();
      Class<IOException> class1 = IOException.class;
      Class<Short> class2 = Short.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.hasClass(collectionLikeType0, class3);
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature1);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[6] = deserializationFeature1;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      TypeFactory typeFactory1 = objectReader1.getTypeFactory();
      Class<IOException> class1 = IOException.class;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(4413, 4413);
      lRUMap0.readResolve();
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      typeFactory2.constructCollectionLikeType(class0, class2);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.fillInStackTrace();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withTypeHandler((Object) null);
      ClassUtil.rawClass(mapType1);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Short");
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      Class<SimpleType> class0 = SimpleType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) referenceType0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, javaType0, javaTypeArray0);
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, javaType1);
      ArrayType arrayType0 = ArrayType.construct(javaType1, typeBindings0, (Object) null, (Object) class1);
      StringBuilder stringBuilder0 = new StringBuilder("`net.sf.cglib.proxy.java.lang.Short`");
      StringBuilder stringBuilder1 = arrayType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = referenceType1.getGenericSignature(stringBuilder1);
      collectionLikeType0.getErasedSignature(stringBuilder2);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded(class1, javaType0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings1);
      TypeBindings typeBindings2 = arrayType1.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings2);
      JavaType javaType2 = resolvedRecursiveType0.withContentType(javaType0);
      ClassUtil.findSuperTypes(javaType2, class1, true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<ArrayType> class2 = ArrayType.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      Class<Byte> class3 = Byte.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      MapType mapType1 = mapType0.withContentTypeHandler(resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, mapType0);
      int[] intArray0 = new int[5];
      intArray0[0] = 123;
      intArray0[1] = 3166;
      intArray0[2] = 2411;
      intArray0[3] = 6;
      intArray0[4] = (-1197);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.", batchUpdateException0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(mockRuntimeException0);
      MapType mapType2 = mapType1.withContentValueHandler(referenceType1);
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      Class<IOException> class4 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class4, false);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getClassMethods(class1);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor1.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Object");
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 494;
      intArray0[1] = 96;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot figure out type for EnumSet (odd JDK platform?)", "org.hibernate.proxy.", batchUpdateException0);
      SQLException sQLException0 = new SQLException("java.lang.Object", "org.hibernate.proxy.", sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("java.lang.Object", "wKb_.%kl2o*A3>O", 96, intArray0, sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException1, "wKb_.%kl2o*A3>O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wKb_.%kl2o*A3>O
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<IOException> class1 = IOException.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Character> class2 = Character.TYPE;
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings1, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(referenceType0);
      ClassUtil.rawClass(javaType0);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findSuperTypes(javaType0, class3, false);
      Class<AccessPattern> class4 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector<Class<ReferenceType>> vector0 = new Vector<Class<ReferenceType>>();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.hasClass("/", class0);
      Class<MissingNode> class1 = MissingNode.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Float> class1 = Float.class;
      Class<Character> class2 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<Float> class3 = Float.class;
      ClassUtil.findClassAnnotations(class3);
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.findSuperTypes(class1, class2, list0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      try { 
        ClassUtil.createInstance(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nonNullString((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.io.IOException");
      ClassUtil.isJacksonStdImpl((Object) null);
      Boolean boolean0 = new Boolean(true);
      ClassUtil.classOf((Object) null);
      ClassUtil.emptyIterator();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<IOException> class1 = IOException.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Character> class2 = Character.class;
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings1, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(referenceType0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.classNameOf(class1);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/)>Z?KQl[t");
      ClassUtil.nonNullString(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getDeclaringClass(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      boolean boolean0 = true;
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      Class<Void> class1 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Void>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(",xVPq", ",xVPq");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) sequenceInputStream0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: ,xVPq
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassUtil.nonNull("", "");
      Class<Boolean> class0 = Boolean.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(16, methodArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Void> class1 = Void.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Module> class0 = Module.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.findSuperTypes(class0, class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getClassMethods(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.classNameOf(class0);
      ClassUtil.quotedOr("`java.lang.Class`", "`java.lang.Class`");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getDeclaredFields(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("7m!Vz)m\"v3Eg?", "7m!Vz)m\"v3Eg?", 811);
      sQLNonTransientException0.getSuppressed();
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.reflect.Ac", "java.lang.reflect.Ac", sQLNonTransientException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.getSuppressed();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang.Short");
      sQLDataException0.addSuppressed(sQLTransientConnectionException0);
      sQLDataException0.forEach(consumer0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassUtil.nonNull("0)B", "0)B");
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getClassDescription((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "com.fasterxml.jackson.databind.exc.InvalidFormatException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.nullOrToString(class0);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte) (-105);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "JSON");
      ClassUtil.hasClass(jsonMappingException0, class0);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.getClassMethods(class3);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: JSON
         //  at [Source: (byte[])\"*]\uFFFDv\u02D7\uFFFDa\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getPackageName(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.backticked(",=S=z");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("keyUniverse", "`,=S=z`");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("&ezO\"@jcjrHf5%)N<?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.fasterxml.jackson.annotation.JsonProperty$Access");
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((Writer) mockPrintWriter0);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintWriter0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockError mockError0 = new MockError("\"%s\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLDataException sQLDataException0 = new SQLDataException(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "_m");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.canBeABeanType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.backticked(",=S=z");
      MockException mockException0 = new MockException("[]");
      mockException0.toString();
      SQLWarning sQLWarning0 = new SQLWarning("", "`com.fasterxml.jackson.databind.node.MissingNode`", (-1936), mockException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.getRootCause(sQLWarning0);
      Class<Double> class1 = Double.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, "~bSi$Pe0KJUr[n)Mq5q");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Throwable throwable0 = sQLSyntaxErrorException0.fillInStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      ClassUtil.throwIfRTE(throwable0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.findConstructor(class0, true);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Module> class0 = Module.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor1.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockFile mockFile0 = new MockFile((File) null, "elementType");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isConcrete(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<Long> class0 = Long.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1496);
      JavaType javaType0 = typeFactory0.constructReferenceType(class0, placeholderForType0);
      typeFactory0.constructArrayType(javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "-%C=uyXKSr-ho9ENJ", javaType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<IOException> class1 = IOException.class;
      ClassUtil.hasClass(placeholderForType0, class1);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.backticked("lD`Jk");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.isConcrete(class1);
      Class<ReferenceType> class3 = ReferenceType.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<IOException> class4 = IOException.class;
      ClassUtil.hasClass(class2, class3);
      ClassUtil.isCollectionMapOrArray(class4);
      ClassUtil.backticked("primitive");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassUtil.nonNull("0)B", "0)B");
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getOuterClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "keyType");
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "keyType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Double double0 = new Double((-755.36));
      Double double1 = new Double(2905.647007);
      ClassUtil.nonNull((Double) null, double1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapType> class0 = MapType.class;
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<String> class2 = String.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.findClassAnnotations(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isConcrete(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.quotedOr(class0, "net.sf.cglib.proxy.");
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Float float0 = new Float((-1652.0F));
      ClassUtil.getClassDescription(float0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Object> class2 = Object.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3010);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getPackageName(class0);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "S5R7+", (int[]) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockFile mockFile0 = new MockFile((File) null, "elementType");
      mockFile0.setReadable(false, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println((-9.223372036854776E18));
      mockPrintStream0.write(3);
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double double0 = new Double((-560.48));
      Double double1 = new Double((-560.48));
      ClassUtil.nonNull((Double) null, (Double) null);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-5002);
      intArray0[2] = 1536;
      intArray0[3] = 55;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<String> class1 = String.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getDeclaredMethods(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.isProxyType(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      linkedList0.pollFirst();
      Class<Long> class4 = Long.class;
      ClassUtil.getDeclaredMethods(class4);
      ClassUtil.backticked((String) null);
      Class<Short> class5 = Short.class;
      ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder");
      Class<Annotation> class0 = Annotation.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 757);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("RClc/s*YPW(j%Qph^^!");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 27, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("RClc/s*YPW(j%Qph^^!", "Failed to narrow type %s with annotation (value %s), from '%s': %s");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("RClc/s*YPW(j%Qph^^!", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.fillInStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getConstructors(class0);
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Float float0 = new Float((-1652.0F));
      ClassUtil.getClassDescription(float0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Object> class2 = Object.class;
      ClassUtil.getGenericSuperclass(class2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.printStackTrace();
      Class<Integer> class0 = Integer.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "size");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.primitiveType(class3);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isNonStaticInnerClass(class4);
      ClassUtil.isProxyType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findEnumType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findClassAnnotations(class0);
      Object object0 = new Object();
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getOuterClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.nameOf(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.canBeABeanType(class2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("java.lang", "java.lang", "java.lang", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("'3'", "java.lang", "USW?", 1536);
      stackTraceElementArray0[1] = stackTraceElement1;
      Float float0 = new Float((-1652.3661F));
      ClassUtil.getClassDescription(class0);
      Class<String> class3 = String.class;
      ClassUtil.nameOf(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(0);
      PlaceholderForType placeholderForType2 = new PlaceholderForType(2821);
      // Undeclared exception!
      try { 
        placeholderForType1.withContentValueHandler(placeholderForType2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassUtil.nonNullString("[null]");
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.backticked("g[`s&W");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockException mockException0 = new MockException(mockError0);
      mockError0.initCause(mockException0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "java.lang.RuntimeExc");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("kKuU5KX>y9mAIW]!", "vals");
      SQLTransientException sQLTransientException0 = new SQLTransientException("Cannot find a Value deserializer for abstract type ", sQLSyntaxErrorException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      sQLSyntaxErrorException0.initCause(sQLTransientException0);
      sQLSyntaxErrorException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "D6jo\"l_f+<VvmNkRe[");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "size");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassUtil.backticked("P -IEN'A+V!");
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, "`P -IEN'A+V!`", "Mo)yZ7XK\bS");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.Integer) must override method 'Mo)yZ7XK\bS'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      ClassUtil.nonNull(float0, float1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      String string0 = "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator";
      boolean boolean0 = true;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((String) null, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", true, 'w', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 61)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Float float0 = new Float((-1652.3661F));
      ClassUtil.getClassDescription(float0);
      Class<String> class2 = String.class;
      ClassUtil.nameOf(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(65599);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentValueHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-5002);
      intArray0[2] = 1536;
      intArray0[3] = 55;
      intArray0[4] = (-2334);
      intArray0[5] = 632;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapLikeType0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      SerializedString serializedString0 = new SerializedString("primitive");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      String string0 = "vals";
      MockThrowable mockThrowable0 = new MockThrowable("]n0|");
      mockThrowable0.getLocalizedMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(byte[].class) , anyInt() , anyInt());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      // Undeclared exception!
      try { 
        jsonFactory3.createParser(byteArray0, 1, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3010);
      ClassUtil.nameOf((Named) null);
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, "[null]", "java.lang.Long");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.Byte) must override method 'java.lang.Long'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<Character> class1 = Character.class;
      ClassUtil.findClassAnnotations(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class2, true);
      Throwable throwable0 = null;
      SQLException sQLException0 = new SQLException((String) null, (Throwable) null);
      sQLException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "z(FJ7u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // z(FJ7u
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3010);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(placeholderForType0, "X/pKC&sKnu/+cX.EXC", "S@}");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("x", "x", 93, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<String> class1 = String.class;
      ClassUtil.findClassAnnotations(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Double double0 = new Double(252.0);
      Double double1 = new Double((-3383.0));
      ClassUtil.nonNull(double1, double1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class4 = String.class;
      ClassUtil.isObjectOrPrimitive(class4);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class0);
      ClassUtil.primitiveType(class0);
      Class<Float> class3 = Float.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<String> class1 = String.class;
      ClassUtil.findClassAnnotations(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class3);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockFile mockFile0 = new MockFile((File) null, "elementType");
      mockFile0.setReadable(false, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println((-9.223372036854776E18));
      mockPrintStream0.write(3);
      sQLFeatureNotSupportedException0.printStackTrace((PrintStream) mockPrintStream0);
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredFields(class0);
      String string0 = "entrySet";
      String string1 = "ghYF[Z)c";
      String string2 = "vals";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vals");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      String string3 = "com.fasterxml.jackson.databind.ser.std.SerializableSerializer";
      int int0 = (-1845);
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, (String) null, "com.fasterxml.jackson.databind.ser.std.SerializableSerializer", (-1845));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil classUtil0 = new ClassUtil();
      Class<SimpleType> class1 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Float> class0 = Float.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getInterfaces();
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      linkedList0.add(javaType0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.getClassDescription(resolvedRecursiveType1);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      linkedList0.pollFirst();
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.backticked("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`");
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isProxyType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, false);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectMapper objectMapper4 = objectMapper3.disable(deserializationFeature0, deserializationFeatureArray0);
      SerializationFeature serializationFeature1 = SerializationFeature.CLOSE_CLOSEABLE;
      objectMapper4.disable(serializationFeature1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper4.readerFor(class0);
      objectReader0.getTypeFactory();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "JSON");
      SQLDataException sQLDataException0 = new SQLDataException("JSON", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      assertEquals("JSON", sQLSyntaxErrorException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ClassLoader classLoader0 = null;
      TypeFactory typeFactory2 = typeFactory1.withClassLoader((ClassLoader) null);
      Class<HashMap> class1 = HashMap.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructRawMapType(class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1637557758) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = ClassUtil.nonNullString(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", string0);
      
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      Class<?> class1 = ClassUtil.classOf(iOException0);
      assertNotNull(class1);
      
      ClassUtil.emptyIterator();
      Class<NoClass> class2 = NoClass.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (-2169));
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      boolean boolean0 = ClassUtil.hasClass(accessPattern0, class1);
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.nameOf(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.canBeABeanType(class2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("java.lang", "java.lang", "java.lang", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("'3'", "java.lang", "USW?", 1536);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("java.lang", "'3'", "ZERO_LENGTH_ENUM_ARRAY", 1536);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("NULL", "NULL", "com.fasterxml.jackson.databind.cfg.ConfigOverride", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("P-5B-", "]x", "gT}1~;(", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("com.fasterxml.jackson.databind.module.SimpleSerializers", "primitive", "]Nxx$,=Ow*jqj ", 1536);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("com.fasterxml.jackson.databind.cfg.ConfigOverride", "", "USW?", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer", "com.fasterxml.jackson.databind.cfg.ConfigOverride", "]x", 0);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("NULL", "com.fasterxml.jackson.databind.cfg.ConfigOverride", "USW?", 373);
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      SQLDataException sQLDataException0 = new SQLDataException("$", (Throwable) null);
      // Undeclared exception!
      try { 
        sQLDataException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ClassUtil.nonNullString("Z}F/fXHI");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.ArrayType with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1496);
      JavaType javaType0 = typeFactory0.constructReferenceType(class0, placeholderForType0);
      typeFactory0.constructArrayType(javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "-%C=uyXKSr-ho9ENJ", javaType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<IOException> class1 = IOException.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayType0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 968, objectMapper0, pipedOutputStream0, byteArray0, (byte)1, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("~VptrD%ZV");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "vals", (Throwable) mockRuntimeException0);
      try { 
        virtualAnnotatedMember0.getValue(jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot get virtual property '-%C=uyXKSr-ho9ENJ'
         //
         verifyException("com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isProxyType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.backticked("STYLE");
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 299;
      intArray0[2] = 0;
      intArray0[3] = (-2154);
      intArray0[4] = 0;
      intArray0[5] = 22;
      intArray0[6] = (-128);
      intArray0[7] = (-722);
      intArray0[8] = 1950;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "FRZG!]2M-", batchUpdateException0);
      ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.nameOf(class0);
      SQLException sQLException0 = new SQLException("`java.lang.RuntimeException`");
      sQLException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "`java.lang.RuntimeException`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `java.lang.RuntimeException`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findClassAnnotations(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
