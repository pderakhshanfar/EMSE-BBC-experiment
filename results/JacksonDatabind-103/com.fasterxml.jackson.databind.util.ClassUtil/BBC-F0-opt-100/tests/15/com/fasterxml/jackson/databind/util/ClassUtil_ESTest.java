/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:35:57 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isConcrete(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findConstructor(class2, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getOuterClass(class3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("8xa");
      SQLDataException sQLDataException0 = new SQLDataException("8xa", "8xa");
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getConstructors(class0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      // Undeclared exception!
      try { 
        ClassUtil.quotedOr(bigIntegerNode0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getConstructors(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.wrapperType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      typeFactory0.constructRawCollectionType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "AcM!*rW-7|i,>]!SuW");
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.nameOf((Named) null);
      ClassUtil.getDeclaredFields(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[null]");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("[null]", sQLInvalidAuthorizationSpecException0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      sQLInvalidAuthorizationSpecException0.addSuppressed(mockRuntimeException0);
      mockRuntimeException0.printStackTrace();
      byte[] byteArray0 = new byte[2];
      sQLInvalidAuthorizationSpecException0.initCause(mockRuntimeException0);
      mockRuntimeException0.getStackTrace();
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLInvalidAuthorizationSpecException0.setNextException((SQLException) null);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      // Undeclared exception!
      ClassUtil.getRootCause(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<SettableBeanProperty> class2 = SettableBeanProperty.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.wrapperType(class1);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "\"%s\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"%s\"
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, (-1749));
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (-1749));
      sQLWarning0.getSuppressed();
      sQLFeatureNotSupportedException0.spliterator();
      sQLWarning0.getStackTrace();
      sQLWarning0.initCause(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLWarning0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Long> class0 = Long.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "java.lang.Object", "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Long` from String \"java.lang.Object\": JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getEnclosingClass(class0);
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class0, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getConstructors(class1);
      Class<InputStream> class2 = InputStream.class;
      SimpleModule simpleModule0 = new SimpleModule();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, simpleModule0, "kaT.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.module.SimpleModule (of class java.io.InputStream) must override method 'kaT.'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class1 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) resolvedRecursiveType0);
      ArrayType arrayType1 = arrayType0.withValueHandler((Object) null);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class1);
      Class<Double> class2 = Double.class;
      Class<Integer> class3 = Integer.class;
      mapType0.findTypeParameters(class3);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class2, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = ' ';
      charArray0[2] = '(';
      charArray0[3] = 's';
      charArray0[4] = 'g';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      Class<Integer> class4 = Integer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class4, jsonToken0, "JSON");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: JSON
         //  at [Source: (char[])\"X (sg\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", at char #");
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "\"~QH3*QvBN");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.nameOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`com.fasterxml.jackson.databind.JsonMappingException`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`com.fasterxml.jackson.databind.JsonMappingException`");
      Locale locale0 = new Locale("pNSch5");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "pNSch5";
      objectArray0[3] = (Object) mockRuntimeException0;
      objectArray0[4] = (Object) mockRuntimeException0;
      objectArray0[5] = (Object) "`com.fasterxml.jackson.databind.JsonMappingException`";
      objectArray0[6] = (Object) "\"~QH3*QvBN";
      objectArray0[7] = (Object) "}'@{u";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "}'@{u", objectArray0);
      mockRuntimeException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType";
      String string1 = "Otxe<[UFZ e-14=\\d";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "|BZIXvfhWy");
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "Otxe<[UFZ e-14=d", sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      sQLDataException0.getStackTrace();
      sQLTransientConnectionException0.printStackTrace();
      sQLDataException0.getStackTrace();
      sQLWarning0.setNextException(sQLDataException0);
      sQLDataException0.fillInStackTrace();
      sQLTransientConnectionException0.setNextException(sQLDataException0);
      ClassUtil.getRootCause(sQLDataException0);
      ClassUtil.defaultValue(class1);
      File file0 = MockFile.createTempFile("glA\"B|", "Otxe<[UFZ e-14=d");
      try { 
        MockFile.createTempFile("ac80aoW*2gbzm*dPkt", "~Dep<f?5R5d9v_{&a", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.canBeABeanType(class0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        beanSerializerBuilder0.getClassInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.canBeABeanType(class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus0, clientInfoStatus1, clientInfoStatus2);
      TreeSet<IOException> treeSet0 = new TreeSet<IOException>();
      treeSet0.clone();
      enumSet0.retainAll(treeSet0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "write raw value");
      Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Short> class0 = Short.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isConcrete(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.findEnumType(class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.nullOrToString(class2);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.findConstructor(class4, true);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class2, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      Long long0 = new Long((-901L));
      ClassUtil.verifyMustOverride(class1, long0, "net.sf.cglib.proxy.java.io.PushbackInputStream");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockError mockError0 = new MockError(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.throwIfError((Throwable) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`zHwD@", true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Failed to instantiate class ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "^8{<vk", "`zHwD@");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `double` from String \"^8{<vk\": `zHwD@
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Long> class1 = Long.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.emptyIterator();
      MockError mockError0 = new MockError();
      String string0 = "nSZ15WWsp{P,V^\\NA;";
      MockPrintStream mockPrintStream0 = new MockPrintStream("nSZ15WWsp{P,V^NA;");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "annotation");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockError0.printStackTrace();
      Integer integer0 = new Integer((-857));
      mockPrintStream1.print((Object) integer0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "nSZ15WWsp{P,V^NA;");
      mockError0.printStackTrace(printStream0);
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      mockPrintStream0.println();
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.isConcrete(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[8];
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatus0;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[3] = clientInfoStatus1;
      clientInfoStatusArray0[4] = clientInfoStatus0;
      clientInfoStatusArray0[5] = clientInfoStatus0;
      clientInfoStatusArray0[6] = clientInfoStatus0;
      clientInfoStatusArray0[7] = clientInfoStatus0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatusArray0);
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1000);
      CollectionType collectionType1 = collectionType0.withValueHandler(placeholderForType0);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.hasClass(collectionType1, class2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[null]");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, "[null]");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "5Urqn", (Throwable) sQLSyntaxErrorException0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLSyntaxErrorException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOException iOException0 = ClassUtil.nonNull((IOException) jsonMappingException0, (IOException) jsonMappingException1);
      Class<Character> class0 = Character.class;
      JsonMappingException jsonMappingException2 = defaultDeserializationContext_Impl0.weirdNativeValueException(iOException0, class0);
      jsonMappingException1.printStackTrace();
      JsonMappingException jsonMappingException3 = JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
      jsonMappingException3.getMessage();
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidFormatException): Cannot deserialize value of type `java.lang.Character` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.JsonMappingException`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isLocalType(class0, true);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<NoClass> class4 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class4, "r>dqP]VHxHmD", "W>&G?B$");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("r>dqP]VHxHmD", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.annotation.NoClass` from String \"r>dqP]VHxHmD\": W>&G?B$
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "rBv-`b8N=j=0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer((-1810600065));
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-726), objectMapper3, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("from-boolean");
      MockIOException mockIOException0 = new MockIOException(sQLFeatureNotSupportedException0);
      mockIOException0.addSuppressed(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(mockIOException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "from-boolean");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nonNull((String) null, (String) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getClassMethods(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.findSuperTypes(class2, class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      Integer integer0 = new Integer(3);
      Integer integer1 = ClassUtil.nonNull((Integer) null, integer0);
      MapType mapType2 = mapType1.withContentValueHandler(integer1);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType3 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) mapType1, (JavaType) mapType2);
      MapLikeType mapLikeType0 = mapType2.withContentValueHandler(mapType3);
      ClassUtil.hasClass(mapLikeType0, class1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", sQLTransactionRollbackException0);
      Throwable throwable0 = sQLTransactionRollbackException0.initCause(sQLNonTransientException0);
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE(throwable0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      System.setCurrentTimeMillis(650L);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-10));
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) referenceType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      CollectionType collectionType1 = collectionType0.withValueHandler(typeBindings0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<Long> class2 = Long.class;
      ReferenceType.upgradeFrom(collectionType1, collectionType1);
      collectionType0.isTypeOrSuperTypeOf(class2);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, false);
      Class<MapType> class3 = MapType.class;
      ClassUtil.isJacksonStdImpl(class3);
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Boolean boolean0 = Boolean.valueOf("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      Integer integer0 = new Integer((-3120));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", integer0, (String) null);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.DEFAULT;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls1);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName1, (AnnotatedMember) null, propertyMetadata2);
      ClassUtil.nameOf((Named) beanProperty_Std0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Exponent indicator not followed by a digit");
      Class<Annotation> class0 = Annotation.class;
      String string0 = null;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      ClassUtil.getConstructors(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.emptyIterator();
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.nameOf(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.backticked((String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonFactory3.enable(jsonGenerator_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      String string0 = "org.hibernate.proxy.java.lang.Character";
      String string1 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType";
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '`';
      charArray0[2] = 'A';
      charArray0[3] = 'x';
      charArray0[4] = 'L';
      charArray0[5] = '4';
      charArray0[6] = 'K';
      // Undeclared exception!
      try { 
        jsonFactory3.createParser(charArray0, (-131072), (-3123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (RuntimeException) mockRuntimeException0);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.backticked("");
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getConstructors(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isConcrete(class0);
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.nonNullString("~tsYc'j0`qSzg");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "Cannot access ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.RuntimeExc", sQLClientInfoException0);
      ClassUtil.getRootCause(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.quotedOr(class0, "q;vJ1DvYKA");
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      mockRuntimeException0.getStackTrace();
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getPackageName(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator("com.fasterxml.jackson.databind.type");
      ClassUtil.backticked("JSON");
      ClassUtil.getConstructors(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = ClassUtil.nonNull(accessPattern0, accessPattern0);
      ClassUtil.isJacksonStdImpl((Object) accessPattern1);
      Class<ArrayType> class0 = ArrayType.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)91;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockIOException mockIOException0 = new MockIOException(">");
      mockIOException0.printStackTrace();
      mockIOException0.printStackTrace();
      mockIOException0.getSuppressed();
      mockIOException0.getSuppressed();
      mockIOException0.initCause((Throwable) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.classOf(mockIOException0);
      mockIOException0.getMessage();
      ClassUtil.throwIfError((Throwable) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.primitiveType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<Byte> class2 = Byte.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<Error> class3 = Error.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      MapLikeType mapLikeType0 = mapType0.withTypeHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.primitiveType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<Byte> class2 = Byte.class;
      Class<Error> class3 = Error.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      MapLikeType mapLikeType0 = mapType0.withTypeHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NULL");
      Long long0 = new Long(9223372036854775807L);
      Long long1 = Long.valueOf(9223372036854775807L);
      Long long2 = new Long(0L);
      ClassUtil.nonNull(long1, long0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      sQLIntegrityConstraintViolationException0.printStackTrace();
      ClassUtil.throwIfError((Throwable) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      MockError mockError0 = new MockError();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.createInstance(class2, true);
      ClassUtil.getOuterClass(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      MockError mockError0 = new MockError();
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class2);
      EnumMap<AccessPattern, RuntimeException> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, RuntimeException> enumMap2 = enumMap1.clone();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      enumMap2.put(accessPattern0, (RuntimeException) mockRuntimeException0);
      EnumMap<AccessPattern, RuntimeException> enumMap3 = new EnumMap<AccessPattern, RuntimeException>(enumMap2);
      ClassUtil.findEnumType(enumMap3);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "9yP\b5IwHZ)<}l<", (Throwable) mockThrowable0);
      SQLException sQLException0 = new SQLException(")X5b^tU-6R3J3,O", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", jsonMappingException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("S':9GauvUJy", "!t[~>sM &[<j>0", 3, sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Object object0 = new Object();
      ClassUtil.isJacksonStdImpl(object0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.withUnboundVariable(" has no default (no arg) constructor");
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("H");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings1);
      typeBindings0.toString();
      resolvedRecursiveType0.isThrowable();
      resolvedRecursiveType0.getInterfaces();
      ClassUtil.hasClass(resolvedRecursiveType0, class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.nameOf(class3);
      ClassUtil.getDeclaredFields(class3);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.nameOf(class4);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.getConstructors(class5);
      String string0 = "m\\N";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!u,|&HL", "mN", 8);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<Character> class6 = Character.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<JsonMappingException> class7 = JsonMappingException.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class7);
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      MockError mockError0 = new MockError();
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class2);
      EnumMap<AccessPattern, RuntimeException> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, RuntimeException> enumMap2 = enumMap1.clone();
      EnumMap<AccessPattern, RuntimeException> enumMap3 = new EnumMap<AccessPattern, RuntimeException>(enumMap2);
      ClassUtil.findEnumType(enumMap3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      objectMapper1.readerFor(class0);
      MockFile mockFile0 = new MockFile("UTF16_BE");
      File file0 = MockFile.createTempFile("JSON", "UTF16_BE", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("UTF16_BE");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockPrintStream0.append('y');
      SQLWarning sQLWarning0 = new SQLWarning("kVz_\"5");
      ClassUtil.getRootCause(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("MODIFIED-FOR-URL");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature1, true);
      JsonFactory jsonFactory5 = jsonFactory4.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((OutputStream) mockPrintStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "%", (Throwable) mockThrowable0);
      SQLException sQLException0 = new SQLException("$N>H]\"tC*&HIw9", "com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap", jsonMappingException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MODIFIED-FOR-URL", "", (-1244651605), sQLException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // %
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.hasEnclosingMethod(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Module> class1 = Module.class;
      ClassUtil.getPackageName(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.fasterxml.jackson.databind", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Class<Void> class1 = Void.class;
      ClassUtil.getConstructors(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, "no long/Long-argument constructor/factory method to deserialize from Number value (%s)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no long/Long-argument constructor/factory method to deserialize from Number value (%s)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Error> class1 = Error.class;
      boolean boolean0 = false;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Float> class2 = Float.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class3);
      ClassUtil.findSuperTypes(javaType0, class0, false);
      Class<Double> class4 = Double.class;
      ClassUtil.findRawSuperTypes(class4, (Class<?>) null, false);
      ClassUtil.getOuterClass(class0);
      Class<ClientInfoStatus> class5 = ClientInfoStatus.class;
      ClassUtil.getDeclaredFields(class5);
      Class<SimpleModule> class6 = SimpleModule.class;
      ClassUtil.getDeclaredFields(class6);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException((String) null, (String) null, 2, mockThrowable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("28]-hq[H", "[null]", 56319, sQLException0);
      JsonMappingException.from(jsonGenerator0, (String) null, (Throwable) sQLNonTransientException0);
      SQLException sQLException1 = new SQLException((String) null, "com.fasterxml.jackson.databind.DeserializationContext", sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, (-605166913), sQLException1);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator0.enable(jsonGenerator_Feature1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator1, (Closeable) jsonGenerator0, (Exception) sQLException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<MapLikeType> class1 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      Class<Void> class2 = Void.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
      Class<Module> class3 = Module.class;
      ClassUtil.isJacksonStdImpl(class3);
      Long long0 = new Long((-384L));
      Long long1 = new Long((-384L));
      Long long2 = new Long((-384L));
      Long long3 = new Long((-633L));
      ClassUtil.nonNull(long2, long3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "\"%s\"", 1069);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=fN3", "org.hibernate.proxy.java.io.IOException", 1536);
      sQLSyntaxErrorException0.setNextException(sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("[null]", "!cA:wGYc2#A>;", (String) null, 46);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
      Class<Character> class2 = Character.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      objectMapper1.readerFor(class0);
      MockFile mockFile0 = new MockFile("UTF16_BE");
      File file0 = MockFile.createTempFile("JSON", "UTF16_BE", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.append('y');
      SQLWarning sQLWarning0 = new SQLWarning("kVz_\"5");
      ClassUtil.quotedOr(objectMapper1, "35)");
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.quotedOr((Object) null, "|hSav<nF{lk{?QNlpr");
      Class<BigIntegerNode> class2 = BigIntegerNode.class;
      ClassUtil.isLocalType(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.io.IOException");
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.class;
      ClassUtil.getEnclosingClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory1.configure(jsonFactory_Feature0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.getOuterClass(class2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("serialVersionUID", "JSON", (-11));
      sQLRecoverableException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      Object object0 = new Object();
      ClassUtil.isJacksonStdImpl(object0);
      ClassUtil.quotedOr(sQLRecoverableException0, "-|wbEAhj");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Long> class2 = Long.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class2);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class3 = LinkedList.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      JavaType javaType0 = mapLikeType0.containedTypeOrUnknown((-2081));
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class3, javaType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(objectReader1);
      ClassUtil.rawClass(collectionType1);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")GW/W9'}\"rAG/nF");
      MockIOException mockIOException0 = new MockIOException("JSON", sQLSyntaxErrorException0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!cA:wGYc2#A>;", (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("[null]", "!cA:wGYc2#A>;", (String) null, 46);
      sQLSyntaxErrorException0.fillInStackTrace();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.getOuterClass(class1);
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      ClassUtil.isJacksonStdImpl((Object) "!cA:wGYc2#A>;");
      ClassUtil.nonNull((Object) constructor0, (Object) sQLSyntaxErrorException0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      System.setCurrentTimeMillis(0L);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.nonNullString("p`cElmS<aFxcM.`d");
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.isProxyType(class3);
      ClassUtil.getOuterClass(class1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClassUtil.nonNull(clientInfoStatus0, clientInfoStatus1);
      ClassUtil.emptyIterator();
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus1);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.hasClass((Object) null, class0);
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<RuntimeException> class4 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class4, true);
      ClassUtil.findSuperTypes(class2, class1, list0);
      Class<Object> class5 = Object.class;
      ClassUtil.getDeclaringClass(class5);
      ClassUtil.isJacksonStdImpl(class3);
      Long long0 = new Long((-384L));
      Long long1 = new Long((-384L));
      ClassUtil.nonNull(long0, long1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Error> class1 = Error.class;
      boolean boolean0 = false;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("f{$\"i5L_)O=\"XN8a(rn", hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("f{$\"i5L_)O=\"XN8a(rn", "f{$\"i5L_)O=\"XN8a(rn", (-2), sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // f{$\"i5L_)O=\"XN8a(rn
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      ClassUtil.findConstructor(class2, true);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      Class<SimpleType> class4 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class4);
      Class<CollectionLikeType> class5 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class5, (JavaType) simpleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.CollectionLikeType with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.ROOT;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(6);
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) placeholderForType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(mapType0);
      ObjectReader objectReader2 = objectReader1.withoutAttribute(locale0);
      TypeFactory typeFactory1 = objectReader2.getTypeFactory();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<ArrayType> class3 = ArrayType.class;
      MapType mapType1 = typeFactory1.constructMapType(class1, class2, class3);
      MapLikeType mapLikeType0 = mapType1.withTypeHandler(objectMapper1);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[null]", (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("[null]", "[null]", (String) null, 46);
      sQLSyntaxErrorException0.fillInStackTrace();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.getOuterClass(class1);
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.isConcrete(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("entrySet", "entrySet", (-1));
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-1), (-1));
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.hasClass(class0, class1);
      Class<Object> class2 = Object.class;
      Class<MapType> class3 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class3, true);
      Class<Module> class4 = Module.class;
      ClassUtil.findSuperTypes(class0, class4, list0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, false);
      PipedReader pipedReader0 = new PipedReader(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '?';
      charArray0[2] = 'm';
      charArray0[3] = 'I';
      charArray0[4] = '3';
      charArray0[5] = '_';
      charArray0[6] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1744094291), pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, (-1149), 1645, true);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      Class<BigIntegerNode> class5 = BigIntegerNode.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class5, jsonToken0, "JSON");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: JSON
         //  at [Source: (com.fasterxml.jackson.databind.deser.BeanDeserializerFactory); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      MockFile mockFile0 = new MockFile(" has no default (no arg) constructor");
      File file0 = MockFile.createTempFile("JSON", " has no default (no arg) constructor", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append('y');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader0, printStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(619);
      SQLWarning sQLWarning0 = new SQLWarning("kVz_\"5");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: kVz_\"5
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<String> class1 = String.class;
      Class<Byte> class2 = Byte.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      mapType0.withTypeHandler(class1);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class3, true);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", (-661868634));
      IOContext iOContext0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      Class<IOException> class1 = IOException.class;
      Class<Boolean> class2 = Boolean.class;
      objectReader0.forType(class2);
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("T`b", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      BigInteger bigInteger0 = BigInteger.ONE;
      defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, (String) null);
      String string0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, (-661868634));
      IOContext iOContext0 = null;
      int int0 = 3;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      Class<IOException> class1 = IOException.class;
      objectReader0.forType(class1);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.getStackTrace();
      ClassUtil.throwIfIOE(sQLTransientException0);
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, (String) null);
      jsonMappingException0.getCause();
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Character> class1 = Character.class;
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "&CTA(Br/c9n]R8|", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      Double double0 = new Double(0.8);
      ClassUtil.hasClass(double0, class0);
      Class<Integer> class1 = Integer.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Long> class2 = Long.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class3 = LinkedList.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      JavaType javaType0 = mapLikeType0.containedTypeOrUnknown((-2081));
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class3, javaType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(objectReader1);
      ClassUtil.rawClass(collectionType1);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class5 = Object.class;
      classArray0[0] = class5;
      Class<Object> class6 = Object.class;
      classArray0[1] = class6;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Void> class1 = Void.class;
      ClassUtil.getOuterClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.isConcrete(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findConstructor(class2, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getOuterClass(class3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("8xa");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<Short> class2 = Short.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Module> class0 = Module.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Locale locale0 = new Locale("cclPKA]x+jCgi");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "cclPKA]x+jCgi", objectArray0);
      sQLTransientException0.printStackTrace(printStream0);
      sQLTransientException0.spliterator();
      sQLTransientException0.getStackTrace();
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Long> class2 = Long.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class2);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class3 = LinkedList.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      JavaType javaType0 = mapLikeType0.containedTypeOrUnknown((-2081));
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class3, javaType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(objectReader1);
      ClassUtil.rawClass(collectionType1);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class5);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "JSON");
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.printStackTrace();
      ClassUtil.throwIfRTE(sQLTimeoutException0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getOuterClass(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classOf(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("p6[_o");
      JsonFactory jsonFactory4 = jsonFactory3.copy();
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonParser_Feature1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory6 = jsonFactory5.configure(jsonFactory_Feature0, true);
      jsonFactory1.copy();
      MockFile mockFile0 = new MockFile("local/anonymous");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory6.createGenerator((DataOutput) objectOutputStream0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("serialVersionUID", "JSON", 345);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "p6[_o", (Throwable) sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // p6[_o
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.io.IOException");
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.class;
      ClassUtil.getEnclosingClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(")/", "org.hibernate.proxy.java.io.IOException", 345);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, (String) null, (Throwable) sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nonNullString("");
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor1.getParamCount();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Double> class1 = Double.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<Object> class3 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class2, false);
      Class<Character> class4 = Character.class;
      ClassUtil.hasEnclosingMethod(class4);
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<MapType> class5 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class5, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.printStackTrace();
      ClassUtil.throwIfRTE(sQLTimeoutException0);
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getConstructors(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("|~ Banpmh~]ml", "v;0qTqgU@`", "Jv5-e94F%", (-3335));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      sQLTransientException0.getStackTrace();
      ClassUtil.throwIfIOE(sQLTransientException0);
      ClassUtil.isJacksonStdImpl((Object) "Jv5-e94F%");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.classNameOf((Object) null);
      TypeResolutionContext typeResolutionContext0 = null;
      String string0 = "{97JE@'xV";
      Class<BigIntegerNode> class2 = BigIntegerNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) null, (JavaType) simpleType0, (JavaType) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getClassMethods(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class1);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      objectReader1.getTypeFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ClassUtil.getConstructors(class2);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Im !~GH:Zl}mO/b", "Im !~GH:Zl}mO/b", (-10));
      SQLTransientException sQLTransientException0 = new SQLTransientException("Im !~GH:Zl}mO/b", "/yeie.4^zanLYc'qJ");
      sQLTimeoutException0.initCause(sQLTransientException0);
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.nonNullString("mC{[*]X4_JsAsTVP");
      Class<Float> class1 = Float.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.findSuperTypes(class3, class3, list0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      boolean boolean0 = new Boolean(false);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.classNameOf(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.backticked("*xnnv(I&4!Sje]+i");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Double> class1 = Double.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<Object> class3 = Object.class;
      ClassUtil.findRawSuperTypes(class3, class2, false);
      Class<Character> class4 = Character.class;
      ClassUtil.hasEnclosingMethod(class4);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "8%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nonNullString("");
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.backticked("");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!cA:wGYc2#A>;", (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("[null]", "!cA:wGYc2#A>;", (String) null, 46);
      sQLSyntaxErrorException0.fillInStackTrace();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.getOuterClass(class1);
      Class<Object> class3 = Object.class;
      ClassUtil.getPackageName(class3);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.getOuterClass(class0);
      Class<Object> class3 = Object.class;
      ClassUtil.getPackageName(class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "java.lang", false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, filterOutputStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Unexpected end-of-input when trying to deserialize a ", "q,Eb/hrrXSe=%)");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: Unexpected end-of-input when trying to deserialize a 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.emptyIterator();
      ClassUtil.getGenericInterfaces(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getConstructors(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.isConcrete(class3);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.hasClass(class0, class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class1, false);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.getClassMethods(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      ObjectReader objectReader0 = objectMapper1.readerWithView(class2);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class4 = LinkedList.class;
      Class<ReferenceType> class5 = ReferenceType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class5);
      JavaType javaType0 = mapLikeType0.containedTypeOrUnknown((-1981));
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class4, javaType0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class3);
      ClassUtil.rawClass(collectionType1);
      Class<String> class6 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class6, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<ReferenceType> class7 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class7);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.hasClass(class0, class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, false);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.classNameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getParameterTypes();
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.getEnclosingClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-499));
      ClassUtil.getClassDescription(placeholderForType0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, (Class<?>) null, (String) null);
      jsonMappingException0.getCause();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type [null] from number 0: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nonNullString("");
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked("");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException((Class<?>) null, "\t", "``");
      jsonMappingException0.getCause();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type [null] from String \"\t\": ``
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Module> class2 = Module.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.getEnclosingClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-499));
      ClassUtil.getClassDescription(placeholderForType0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 8232);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.nullOrToString(accessPattern0);
      Class<MapType> class1 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      String string0 = "!cA:wGYc2#A>;";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!cA:wGYc2#A>;", (String) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("[null]", "!cA:wGYc2#A>;", (String) null, 46);
      sQLSyntaxErrorException0.fillInStackTrace();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MockURL.toURI((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.backticked((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!cA:wGYc2#A>;", (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[null]", "!cA:wGYc2#A>;", (String) null, 46);
      sQLSyntaxErrorException0.fillInStackTrace();
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement((String) null, "[null]", "[null]", (-2828));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Float float0 = new Float((-878.862));
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasClass(float0, class0);
      ClassUtil.getClassDescription(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findConstructor(class2, false);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Long long0 = new Long((-3896L));
      ClassUtil.classOf(long0);
      ClassUtil.classOf((Object) null);
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nonNullString("");
      Class<Float> class1 = Float.TYPE;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getClassDescription((Object) null);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator");
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      List<Class<?>> list0 = new Stack<Class<Error>>();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = "), types (";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "), types (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.getDeclaredFields(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<CollectionType>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
      ClassUtil.getOuterClass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.flush();
      MockException mockException0 = new MockException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "B?wX%sPV5Y", mockException0);
      MockIOException mockIOException0 = new MockIOException("V4", jsonMappingException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // V4
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, (String) null);
      jsonMappingException0.getCause();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.SimpleType` from number 1: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.nonNullString("Cik<INJ.A[+UB~\r");
      ClassUtil.getConstructors(class1);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.findRawSuperTypes(class2, class2, false);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<String> class1 = String.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<MapType> class0 = MapType.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.isProxyType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.getClassDescription(class0);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, (String) null);
      jsonMappingException0.getCause();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.BeanProperty$Bogus");
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockPrintStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", (Throwable) mockThrowable0);
      SQLException sQLException0 = new SQLException("JSON", "JSON", jsonMappingException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap", "com.fasterxml.jackson.databind.BeanProperty$Bogus", (-1244651605), sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Long long0 = new Long((-3896L));
      ClassUtil.classOf(long0);
      String string0 = "c";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("c");
      Class<Long> class0 = Long.class;
      mockRuntimeException0.printStackTrace();
      mockRuntimeException0.getCause();
      ClassUtil.hasClass(mockRuntimeException0, class0);
      Float float0 = new Float((float) (-3896L));
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, float0, "NULL");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Float (of class java.lang.Long) must override method 'NULL'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLException0);
      sQLException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getClassMethods(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class1);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<LinkedList> class3 = LinkedList.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructRawMapLikeType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.LinkedList with 2 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.rawClass((JavaType) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      String string0 = "t%f&Y:!(zfQZ9";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "t%f&Y:!(zfQZ9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // t%f&Y:!(zfQZ9
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.emptyIterator();
      ClassUtil.getGenericInterfaces(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getConstructors(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.isConcrete(class3);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Class ");
      sQLIntegrityConstraintViolationException0.getStackTrace();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.configure(jsonFactory_Feature0, false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<SimpleType> class1 = SimpleType.class;
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getDeclaredMethods(class3);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, class3, ",@4M");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method ',@4M'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "HP3Ck1qUyL&6Eb4";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      hashMap0.putAll(hashMap1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("HP3Ck1qUyL&6Eb4", "HP3Ck1qUyL&6Eb4", hashMap0);
      sQLClientInfoException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HP3Ck1qUyL&6Eb4
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findConstructor(class0, false);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      Class<Void> class1 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator");
      Throwable throwable0 = sQLRecoverableException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        sQLRecoverableException0.addSuppressed(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<MapType> class0 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      batchUpdateException0.setNextException(sQLTransientConnectionException0);
      batchUpdateException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.printStackTrace();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        sQLTimeoutException0.initCause(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-causation not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      
      ClassUtil.getDeclaredMethods(class0);
      Class<?> class2 = ClassUtil.wrapperType(class1);
      assertEquals("class java.lang.Character", class2.toString());
      
      ClassUtil.getDeclaredMethods(class1);
      assertEquals("char", class1.toString());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nonNullString("");
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      assertEquals(10, list0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.isConcrete(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "elementType");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }
}
