/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:27:52 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      ClassUtil.quotedOr(class0, "");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "net.sf.cglib.proxy.java.lang.Float";
      int int0 = (-1174);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.java.lang.Float", "net.sf.cglib.proxy.java.lang.Float", (-1174));
      MockIOException mockIOException0 = new MockIOException(sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      String string1 = "_*7cK\"gCM7$4v";
      StackTraceElement stackTraceElement0 = new StackTraceElement("net.sf.cglib.proxy.java.lang.Float", "_*7cK\"gCM7$4v", "_*7cK\"gCM7$4v", (-1174));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      mockIOException0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sQLTransientConnectionException0.initCause(mockIOException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("org.hibernate.proxy.java.lang.Object");
      MockFile mockFile0 = new MockFile("'MD-#=!1{UP0X.<", "xvYlq3e(@m,P,~ r[RO");
      MockFile mockFile1 = new MockFile(mockFile0, "Invalid input: JSON Pointer expression must start with '/': \"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", hashMap0);
      MockIOException mockIOException0 = new MockIOException(sQLClientInfoException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AyYZ1,Rj{AO2GpWKU_");
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class2 = Object.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class2);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      collectionLikeType1.isReferenceType();
      JavaType javaType0 = defaultDeserializationContext_Impl0.constructSpecializedType(collectionLikeType1, class0);
      Class<Error> class3 = Error.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      collectionLikeType0.withStaticTyping();
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      CollectionLikeType.construct((Class<?>) class3, typeBindings0, (JavaType) collectionLikeType1, javaTypeArray0, (JavaType) collectionLikeType1);
      Class<?> class4 = ClassUtil.rawClass(javaType0);
      ClassUtil.hasEnclosingMethod(class4);
      ClassUtil.nonNullString("org.hibernate.proxy.java.lang.Double");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.java.lang.Double");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.java.lang.Double", sQLSyntaxErrorException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.java.lang.Double", "org.hibernate.proxy.java.lang.Double", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern1);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      deserializationFeatureArray0[4] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[5] = deserializationFeature2;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) injectableValues_Std0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-93);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1746839910), objectReader2, pipedOutputStream0, byteArray0, 2266, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(3291);
      DataTruncation dataTruncation0 = new DataTruncation((-3908), true, false, 2239, 1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(dataTruncation0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "70jS#I?!Hlm,pp(a*=-");
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.findClassAnnotations(class2);
      Class<Double> class3 = Double.class;
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class3, class4, true);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.getConstructors(class5);
      ClassUtil.getClassDescription("70jS#I?!Hlm,pp(a*=-");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getClassMethods(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("'r1I;(t c#9y", "'r1I;(t c#9y");
      sQLTransientException0.getSuppressed();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":m&R", sQLTransientException0);
      sQLTransientException0.initCause(sQLFeatureNotSupportedException0);
      sQLTransientException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      CollectionType collectionType0 = null;
      enumMap0.put(accessPattern0, (CollectionType) null);
      ClassUtil.findEnumType(enumMap0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(typeBindings0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.");
      ClassUtil.getOuterClass(class0);
      String string0 = "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator";
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      List<JavaType> list0 = new LinkedList<JavaType>();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      ClassUtil.isConcrete(class0);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "cu", "8*BFJaJj 1w);S&gx!", (-1017));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "cu", (-1017));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("8*BFJaJj 1w);S&gx!", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", (-1017));
      stackTraceElementArray0[2] = stackTraceElement2;
      mockError0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType
         //
         verifyException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(objectNode0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected FIELD_NAME
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "Z5");
      jsonMappingException0.getPath();
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Z5
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getClassMethods(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      MockIOException mockIOException0 = new MockIOException("aMPUF_Il");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockIOException0.setStackTrace(stackTraceElementArray0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // aMPUF_Il
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation((-663), true, true, (-663), (-393805500), sQLTransientException0);
      MockError mockError0 = new MockError(dataTruncation0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "WGiYb]!*Z^JE?W<LJ+");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet.of(accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString("java.util");
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isConcrete(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassUtil.nonNullString("0I[N='*)GmB#3");
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      String string0 = "net.sf.cglib.proxy.java.lang.Long";
      ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Long");
      ClassUtil.classNameOf(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ClassUtil.canBeABeanType(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.getDeclaredMethods(class2);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "0I[N='*)GmB#3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.nonNull((Object) null, (Object) class1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      MapType mapType1 = mapType0.withKeyValueHandler(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType1, mapType1);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      MapType mapType2 = mapType1.withContentTypeHandler(referenceType1);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("2+(4x13z+izgU", version0);
      MapType mapType3 = mapType2.withTypeHandler(simpleModule0);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      mockRuntimeException0.getStackTrace();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, mockRuntimeException0);
      mockRuntimeException0.addSuppressed(sQLClientInfoException0);
      intArray0[0] = (-12);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("enum", "enum", intArray0, mockRuntimeException0);
      mockRuntimeException0.getLocalizedMessage();
      batchUpdateException0.fillInStackTrace();
      mockRuntimeException0.initCause(batchUpdateException0);
      mockRuntimeException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      ClassUtil.hasClass(simpleObjectIdResolver0, class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Module> class0 = Module.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Module>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.wrapperType(class0);
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.nullOrToString(object0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassUtil.nonNull((ReferenceType) null, (ReferenceType) null);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      enumSet0.retainAll(arrayDeque0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "(H#sG,J");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("(H#sG,J");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass";
      objectArray0[1] = (Object) jsonMappingException0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass";
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) mockPrintStream1;
      PrintStream printStream0 = mockPrintStream1.format("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)97;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(3, 0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (H#sG,J
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".A9W<d");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "not a valid double value (as String to convert)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" is not a primitive type");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)73, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "", (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.");
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "JSON", "UoQ");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) byteArrayOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.MapType` from String \"JSON\": UoQ
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<RuntimeException> class0 = RuntimeException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      Class<Boolean> class2 = Boolean.TYPE;
      ClassUtil.getEnclosingClass(class2);
      Class<Integer> class3 = Integer.class;
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findSuperClasses(class3, class4, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<String> class0 = String.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2279, 83);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType1, typeBindings0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(class0);
      JavaType javaType0 = typeFactory1.constructType((Type) collectionType1);
      CollectionType collectionType2 = collectionType1.withTypeHandler(arrayType1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      boolean boolean0 = false;
      ClassUtil.findSuperTypes((JavaType) collectionType2, (Class<?>) class2, false);
      ClassUtil.primitiveType(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.weirdKeyException(class2, "~!", "~!");
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(javaType0, "dV^BMEa", "com.fasterxml.jackson.databind.KeyDeserializer$None");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("dV^BMEa", "dV^BMEa", jsonMappingException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Could not find JsonDeserializer for type %s (via property %s)");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0, false);
      Locale locale0 = Locale.PRC;
      PrintStream printStream0 = mockPrintStream1.format(locale0, "~!", (Object[]) classUtil_CtorArray0);
      sQLFeatureNotSupportedException0.printStackTrace(printStream0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'dV^BMEa' as a subtype of [collection type; class java.util.LinkedList, contains [simple type, class java.lang.Object]]: com.fasterxml.jackson.databind.KeyDeserializer$None
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ArrayType> class0 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Short> class1 = Short.class;
      ClassUtil.getConstructors(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class2);
      Class<Long> class3 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class3, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.createInstance(class1, true);
      MockThrowable mockThrowable0 = new MockThrowable("e(SZ4lB", (Throwable) null);
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isLocalType(class0, true);
      Class<Module> class1 = Module.class;
      ClassUtil.isProxyType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ObjectReader objectReader1 = objectReader0.forType((JavaType) placeholderForType0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('p');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 580, objectReader1, charArrayWriter1);
      placeholderForType0.serialize(writerBasedJsonGenerator0, defaultSerializerProvider_Impl0);
      ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      Class<Character> class2 = Character.class;
      ClassUtil.getDeclaringClass(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.wrapperType(class3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass(class0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1075);
      longArray0[1] = (long) (-1075);
      longArray0[2] = (long) (-1075);
      longArray0[3] = (long) (-1075);
      longArray0[4] = (long) (-1075);
      longArray0[5] = 0L;
      longArray0[6] = (long) (-1075);
      longArray0[7] = (long) (-1075);
      longArray0[8] = (long) (-1075);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("E5Pv.Dpv_g#Fz<X");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("E5Pv.Dpv_g#Fz<X", "G|/$0Q9<Q", (-1075), longArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateException0.getSuppressed();
      ClassUtil.throwIfError(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.quotedOr(list0, "Default constructor for ");
      LinkedList<IOException> linkedList0 = new LinkedList<IOException>();
      IOException iOException0 = null;
      linkedList0.clear();
      linkedList0.add((IOException) null);
      ClassUtil.nonNull(linkedList0, linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.double", "Z`wME.K1[l", intArray0);
      batchUpdateException0.getNextException();
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getConstructors(class0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Z[!'TOV'L2HI!UxJ[B", (Throwable) sQLClientInfoException0);
      sQLClientInfoException0.initCause(jsonMappingException0);
      sQLClientInfoException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IntNode.valueOf(76);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-212));
      ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Character> class0 = Character.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, pipedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<AccessPattern> class1 = AccessPattern.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("; failed to set access: ", class1, "; failed to set access: ");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.util.AccessPattern` from String \"; failed to set access: \": ; failed to set access: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getConstructors(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.isLocalType(class1, false);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.quotedOr(class0, "com.fasterxml.jacks");
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getEnclosingClass(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-110);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3830), objectReader0, printStream0, byteArray0, (-3), true);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Character> class0 = Character.TYPE;
      Class<Float> class1 = Float.class;
      ClassUtil.hasClass(sQLInvalidAuthorizationSpecException0, class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.createInstance(class2, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class3);
      EnumMap<AccessPattern, CollectionType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, CollectionType> enumMap2 = enumMap1.clone();
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "va71~j\"\"-i/GGU";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "va71~j\"\"-i/GGU");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Character> class0 = Character.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Character> class0 = Character.TYPE;
      Class<Float> class1 = Float.class;
      ClassUtil.hasClass(sQLInvalidAuthorizationSpecException0, class1);
      Integer integer0 = new Integer((-1245));
      ClassUtil.isJacksonStdImpl((Object) class0);
      TypeFactory.defaultInstance();
      ClassUtil.isObjectOrPrimitive(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<IntNode> class0 = IntNode.class;
      ClassUtil.isLocalType(class0, false);
      Class<Error> class1 = Error.class;
      ClassUtil.getClassMethods(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.nameOf(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.getPackageName(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<IntNode> class0 = IntNode.class;
      ClassUtil.getConstructors(class0);
      Class<Module> class1 = Module.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.nonNull((Annotation) null, (Annotation) null);
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Character> class0 = Character.TYPE;
      Class<Float> class1 = Float.class;
      ClassUtil.hasClass(sQLInvalidAuthorizationSpecException0, class1);
      Integer integer0 = new Integer((-1245));
      ClassUtil.isJacksonStdImpl((Object) class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Double> class2 = Double.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class2);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!$Nq&E/ 9bOZ=&$_@N6", "com.fasterxml.jackso", sQLNonTransientException0);
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.java.lang.reflect.AccessibleObject");
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.wrapperType(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<IntNode> class2 = IntNode.class;
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperTypes(class2, class3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      ClassUtil.verifyMustOverride(class0, object0, ":ooW");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1627);
      longArray0[1] = (long) (-1627);
      MockException mockException0 = new MockException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(mockException0);
      SQLException sQLException0 = new SQLException(sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Fcdurdu]x8(|\"xY", "BmT1qkWD)_TH", (-1627), longArray0, sQLException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Fcdurdu]x8(|\"xY");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      batchUpdateException0.printStackTrace((PrintWriter) mockPrintWriter1);
      ClassUtil.throwIfError(batchUpdateException0);
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes(class2, class1, list0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-60);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "Default constructor for ");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapType` from number 8966669349176457412: Default constructor for 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      MockError mockError0 = new MockError("O(`XmRQ");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.findClassAnnotations(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NUMBER_INT");
      Class<Integer> class0 = Integer.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.throwIfError((Throwable) null);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isConcrete(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.quotedOr(class0, "6V");
      Class<Integer> class1 = Integer.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nameOf(class1);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getOuterClass(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.java.lang.Long");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.backticked((String) null);
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer integer0 = new Integer(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.nullOrToString(integer0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.backticked("net.sf.cglib.proxy.");
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      constructor0.getDeclaredAnnotation(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      constructor0.getGenericExceptionTypes();
      constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getDeclaredFields(class1);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.getConstructors(class4);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      Long long0 = new Long(0L);
      MapType mapType1 = mapType0.withKeyTypeHandler(long0);
      MapType mapType2 = mapType1.withKeyType(mapType0);
      javaTypeArray0[0] = (JavaType) mapType2;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      MapType mapType3 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType2, javaTypeArray0, (JavaType) mapType0, (JavaType) mapType1);
      Long long1 = new Long((-7L));
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[0], typeBindings0);
      Long long2 = new Long((-1L));
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(long2);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("com.fasterxml.jackson.databind.ser.std.EnumSetSerializer", version0);
      ArrayType arrayType2 = arrayType1.withContentValueHandler(simpleModule0);
      ArrayType arrayType3 = arrayType2.withStaticTyping();
      ArrayType arrayType4 = arrayType3.withTypeHandler(version0);
      MapType mapType4 = mapType0.withKeyValueHandler(arrayType4);
      mapType4.withStaticTyping();
      mapType3.withKeyType(arrayType0);
      MapType mapType5 = mapType4.withContentTypeHandler(class1);
      mapType5.withHandlersFrom(mapType2);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException();
      mapType3.withValueHandler(arrayType1);
      ClassUtil.rawClass(arrayType1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.nonNullString("org.hibernate.proxy.java.lang.reflect.AccessibleObject");
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.primitiveType(class2);
      ClassUtil.getEnclosingClass(class0);
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ClassUtil.isConcrete(class3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getGenericSuperclass(class0);
      MockIOException mockIOException0 = new MockIOException("java.lang.Double");
      SQLDataException sQLDataException0 = new SQLDataException(mockIOException0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.throwIfError(mockRuntimeException0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isConcrete(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")gGWhivC=pFb?JI[");
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(";");
      Class<Double> class0 = Double.TYPE;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.java.lang.reflect.AccessibleObject");
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|Uw<bi(;C3");
      ClassUtil.nonNullString("tYD<y9`Yg.FB_");
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockIOException mockIOException0 = new MockIOException("|Uw<bi(;C3");
      SQLDataException sQLDataException0 = new SQLDataException(mockIOException0);
      sQLDataException0.getStackTrace();
      ClassUtil.throwIfError(mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "tYD<y9`Yg.FB_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tYD<y9`Yg.FB_
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("}K$&{0IhGqG2mFhWEQ", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8qnM%AWA=CD?");
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      MockIOException mockIOException0 = new MockIOException("EH{3]BCjL>0", sQLClientInfoException1);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getConstructors(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.createInstance(class1, true);
      Class<Character> class2 = Character.class;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<Short> class4 = Short.class;
      ClassUtil.findConstructor(class4, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<MapType> class5 = MapType.class;
      ClassUtil.primitiveType(class5);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<?> class0 = ClassUtil.classOf(mockRuntimeException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "tYD<y9`Yg.FB_";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|Uw<bi(;C3");
      ClassUtil.nonNullString("tYD<y9`Yg.FB_");
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|Uw<bi(;C3");
      ClassUtil.nonNullString("tYD<y9`Yg.FB_");
      Class<Character> class0 = Character.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNull((Annotation) null, (Annotation) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("|Uw<bi(;C3", " does not support them", 0, hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.classOf(mockRuntimeException0);
      Class<Character> class0 = Character.TYPE;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.quotedOr((Object) null, (String) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("No Object Id found for an instance of %s, to assign to property '%s'", "{kM,", 675);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.lang.reflect.Ac", sQLRecoverableException0);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", alwaysAsId=", "{pTUeVY(", 675, sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.util.NavigableSet", hashMap0, sQLFeatureNotSupportedException0);
      SQLException sQLException0 = new SQLException("No Object Id found for an instance of %s, to assign to property '%s'", "{kM,", sQLClientInfoException0);
      MockError mockError0 = new MockError(sQLRecoverableException0);
      MockError mockError1 = new MockError("{pTUeVY(");
      ClassUtil.nonNull((Error) mockError0, (Error) mockError1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<?> class0 = ClassUtil.classOf(mockRuntimeException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString((String) null);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isProxyType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "serialVersionUID");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getConstructors(class0);
      ClassUtil.throwIfError((Throwable) null);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isConcrete(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("a9uX=50zN", "a9uX=50zN", (-3519), (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("a9uX=50zN", sQLInvalidAuthorizationSpecException0);
      mockRuntimeException0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Xl#mM{Eq82y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<?> class0 = ClassUtil.classOf(mockRuntimeException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockDateFormat.getDateInstance();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "uAyWK");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `org.evosuite.runtime.mock.java.lang.MockRuntimeException` from number 10: uAyWK
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("tYD<y9`Yg.FB_", "tYD<y9`Yg.FB_", (-1654975209), mockRuntimeException0);
      mockRuntimeException0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "G]WuMt*)db@N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class0 = LinkedList.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      ClassUtil.quotedOr(collectionType1, "Conflicting %s creators: already had %s creator %s, encountered another: %s");
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<Error> class1 = Error.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.nullOrToString(list0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.util.Collections$EmptyList@0000000001");
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassUtil.nonNullString("Gu~r|#gc=");
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl((Object) "Gu~r|#gc=");
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, true);
      Class<Double> class2 = Double.class;
      ClassUtil.hasClass((Object) null, class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassUtil.nonNullString("Gu~r|#gc=");
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl((Object) "Gu~r|#gc=");
      int[] intArray0 = new int[2];
      intArray0[0] = (-360);
      intArray0[1] = (-2199);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Gu~r|#gc=", intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0, "dhx1(a[_v<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dhx1(a[_v<
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isProxyType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.nonNullString((String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.canBeABeanType(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getOuterClass(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.weirdNativeValueException(simpleKeyDeserializers0, class1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassUtil.backticked("6/JjJ_/ExH");
      ClassUtil.backticked("6/JjJ_/ExH");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((DataOutput) objectOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "6/JjJ_/ExH");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasClass(jsonMappingException0, class0);
      Class<Integer> class1 = Integer.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) stack0);
      Class<NoClass> class3 = NoClass.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[5], javaTypeArray0[5]);
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1248);
      intArray0[2] = 1059;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, true);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, true);
      Class<Character> class3 = Character.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.quotedOr(list0, (String) null);
      Class<Integer> class4 = Integer.class;
      ClassUtil.primitiveType(class4);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, constructor0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.reflect.Constructor (of class java.lang.RuntimeException) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" bdbB", "org.hibernate.proxy.java.lang.String");
      sQLNonTransientConnectionException0.spliterator();
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      Class<Long> class1 = Long.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.hasClass(throwable0, class1);
      ClassUtil.classNameOf(throwable0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isLocalType(class2, false);
      Class<Short> class3 = Short.class;
      ClassUtil.getDeclaringClass(class3);
      Class<ArrayType> class4 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getConstructors(class0);
      ClassUtil.throwIfError((Throwable) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isConcrete(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")gGWhivC=pFb?JI[");
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNull((Annotation) null, (Annotation) null);
      Class<Float> class1 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, true);
      Class<Character> class3 = Character.class;
      ClassUtil.isProxyType(class0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.isLocalType(class4, false);
      ClassUtil.primitiveType(class3);
      Class<AccessPattern> class5 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature1);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      Class<SimpleType> class1 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-798), "NULL");
      ObjectReader objectReader1 = objectReader0.with((TimeZone) simpleTimeZone0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) null, jsonEncoding0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-798);
      intArray0[1] = (-798);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("NULL", (String) null, intArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)53;
      jsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, true);
      Class<Character> class3 = Character.class;
      ClassUtil.findConstructor(class3, true);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.primitiveType(class4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil.nonNullString("h?-<{|cJ%9hyq");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "h?-<{|cJ%9hyq", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-92);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader1, (OutputStream) null, byteArray0, 6, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("h?-<{|cJ%9hyq");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("entrySet", "h?-<{|cJ%9hyq");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: entrySet
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.backticked("keyType");
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nonNullString("keyType");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<CollectionType> class3 = CollectionType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class3, class2);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, (String) null, collectionLikeType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassUtil.backticked("9VP");
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[7];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<Short> class2 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1248);
      intArray0[1] = 1059;
      intArray0[2] = 1059;
      intArray0[3] = 1059;
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1248);
      intArray0[1] = 1059;
      intArray0[2] = 1059;
      intArray0[3] = 1059;
      intArray0[4] = 1059;
      intArray0[5] = 1059;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/Zyi*PqF'>)", (String) null, 1059, intArray0, sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, batchUpdateException0);
      ClassUtil.getRootCause(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?R/F]QNk,");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.getOuterClass(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.JsonSerializable$Base");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float(0.0F);
      Class<NoClass> class1 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(float0, class1);
      Throwable throwable0 = sQLTransientException0.initCause(jsonMappingException0);
      sQLTransientException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.JsonSerializable$Base
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClassUtil.nullOrToString(integer0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.backticked("net.sf.cglib.proxy.");
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      constructor0.getDeclaredAnnotation(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      constructor0.getGenericExceptionTypes();
      constructor0.getExceptionTypes();
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getClassDescription("net.sf.cglib.proxy.");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      Class<Error> class2 = Error.class;
      ClassUtil.findConstructor(class2, false);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClassUtil.nullOrToString(integer0);
      ClassUtil.backticked("net.sf.cglib.proxy.");
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      constructor0.getDeclaredAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      constructor0.getGenericExceptionTypes();
      constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getDeclaredFields(class0);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getConstructors(class3);
      Class<String> class4 = String.class;
      ClassUtil.isLocalType(class4, false);
      Class<Integer> class5 = Integer.class;
      ClassUtil.primitiveType(class5);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.");
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLRecoverableException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredFields(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "localizedMessage", (Throwable) batchUpdateException0);
      ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "";
      ClassUtil.backticked("");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      String string0 = "NULL";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NULL", (Throwable) null);
      // Undeclared exception!
      try { 
        sQLNonTransientException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      SQLWarning sQLWarning0 = new SQLWarning("entrySet");
      ClassUtil.getRootCause(sQLWarning0);
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      String string0 = "7Qq!+";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7Qq!+");
      ClassUtil.findSuperClasses(class1, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<Error> class1 = Error.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.nullOrToString(list0);
      Class<String> class2 = String.class;
      ClassUtil.primitiveType(class2);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "H#W_rVwA<@g_U>", (JavaType) null);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<NoClass> class1 = NoClass.class;
      String string0 = "7";
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      arrayType0.isReferenceType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "7", arrayType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getPackageName(class0);
      Constructor<AccessPattern> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil.emptyIterator();
      String string0 = "VALUE_STRING";
      SQLDataException sQLDataException0 = new SQLDataException("VALUE_STRING", "VALUE_STRING");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VALUE_STRING
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      DeserializationContext deserializationContext0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "keyType", (Throwable) sQLClientInfoException0);
      ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
      ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
      ClassUtil.wrapperType(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.findEnumType((Enum<?>) jsonParser_Feature0);
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      ClassUtil.backticked(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("5WqTarG$+|&,pJ", "5WqTarG$+|&,pJ", (-1654975209), mockRuntimeException0);
      ClassUtil.nonNullString("5WqTarG$+|&,pJ");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = "Broken surrogate pair: first char 0x";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Broken surrogate pair: first char 0x", "Broken surrogate pair: first char 0x", false, '|', (-2580));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 36)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Short short0 = new Short((short) (-1786));
      objectMapper0.readerForUpdating(short0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Broken surrogate pair: first char 0x", "Broken surrogate pair: first char 0x", false, '|', (-2580));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 36)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.classOf(mockRuntimeException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<Object> class3 = Object.class;
      Class<RuntimeException> class4 = RuntimeException.class;
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes(class3, class4, true);
      ClassUtil.getOuterClass(class1);
      ClassUtil.findConstructor(class3, false);
      Class<CollectionType> class5 = CollectionType.class;
      try { 
        ClassUtil.createInstance(class5, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.nameOf(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NUMBER_INT");
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.getGenericSuperclass(class0);
      MockIOException mockIOException0 = new MockIOException((String) null);
      SQLDataException sQLDataException0 = new SQLDataException(mockIOException0);
      sQLDataException0.getStackTrace();
      ClassUtil.throwIfError(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.nameOf(class0);
      Class<Double> class1 = Double.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]L8iw]z7%V_i");
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.getGenericSuperclass(class1);
      MockIOException mockIOException0 = new MockIOException("1\"@@Ni7*aJ6C");
      SQLDataException sQLDataException0 = new SQLDataException(mockIOException0);
      sQLDataException0.getStackTrace();
      ClassUtil.throwIfError(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("com.fasterxml.jackson.databind.util.ClassUtil");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setOutputDecorator(outputDecorator0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.findSuperTypes(class0, class0);
      String string0 = "SuTrkgq_je";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.spliterator();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("SuTrkgq_je", "SuTrkgq_je", (Map<String, ClientInfoStatus>) null);
      SQLException sQLException0 = new SQLException("Cannot figure out type for EnumSet (odd JDK platform?)", sQLClientInfoException1);
      sQLClientInfoException1.addSuppressed(sQLException0);
      sQLClientInfoException1.getFailedProperties();
      sQLClientInfoException0.getSuppressed();
      sQLClientInfoException1.getSuppressed();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isLocalType(class0, true);
      Class<Byte> class1 = Byte.class;
      ClassUtil.hasClass(class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isProxyType(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("elementType");
      SQLException sQLException0 = new SQLException("2H_rj", sQLTransientException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      Object[] objectArray0 = new Object[3];
      sQLException0.getLocalizedMessage();
      objectArray0[0] = (Object) sQLException0;
      objectArray0[1] = (Object) byteArrayBuilder0;
      objectArray0[2] = (Object) sQLTransientException0;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "a", objectArray0);
      sQLException0.printStackTrace(printStream0);
      ClassUtil.throwIfError(sQLException0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      Class<Void> class1 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<String> class0 = String.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(3, typeArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature1);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory_Feature0, jsonFactory_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory_Feature1, jsonFactory_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory_Feature0.equals((Object)jsonFactory_Feature1));
      assertFalse(jsonFactory_Feature1.equals((Object)jsonFactory_Feature0));
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory_Feature0.equals((Object)jsonFactory_Feature1));
      
      Class<SimpleType> class1 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-798), "NULL");
      ObjectReader objectReader1 = objectReader0.with((TimeZone) simpleTimeZone0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) null, jsonEncoding0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-798);
      intArray0[1] = (-798);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("NULL", (String) null, intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Iterator<LinkedList<ReferenceType>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class0 = Integer.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, typeArray0.length);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertSame(annotationArray2, annotationArray1);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray2.length);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNull(string0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Object()", constructor1.toString());
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      SQLException sQLException0 = new SQLException((String) null, (String) null, (-490), sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals((-490), sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals((-490), sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray1.length);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      String string0 = null;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.BatchUpdateException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLFeatureNotSupportedException0);
      assertNotNull(mockRuntimeException0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(mockRuntimeException0, deserializerFactoryConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.String`", string0);
      
      String string1 = ClassUtil.getClassDescription(class0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("`java.lang.String`", string1);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertSame(class2, class1);
      assertEquals(0, annotationArray0.length);
      
      Class<Byte> class3 = Byte.class;
      Class<?> class4 = ClassUtil.primitiveType(class3);
      assertNotNull(class4);
      assertFalse(class4.isAnnotation());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("byte", class4.toString());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      String string0 = ClassUtil.backticked(" has no default (no arg) constructor");
      assertNotNull(string0);
      assertEquals("` has no default (no arg) constructor`", string0);
      
      String string1 = "unknown";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("unknown", "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$10", (-1556), (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: unknown", sQLNonTransientConnectionException0.toString());
      assertEquals("unknown", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1556), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$10", sQLNonTransientConnectionException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("unknown", "Xy5,YGBe", "` has no default (no arg) constructor`", (-1556));
      assertNotNull(stackTraceElement0);
      assertEquals("` has no default (no arg) constructor`", stackTraceElement0.getFileName());
      assertEquals("Xy5,YGBe", stackTraceElement0.getMethodName());
      assertEquals("unknown.Xy5,YGBe(` has no default (no arg) constructor`)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("unknown", stackTraceElement0.getClassName());
      assertEquals((-1556), stackTraceElement0.getLineNumber());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("key serializer", "Xy5,YGBe", "key serializer", (-1420));
      assertNotNull(stackTraceElement1);
      assertEquals("key serializer", stackTraceElement1.getClassName());
      assertEquals("Xy5,YGBe", stackTraceElement1.getMethodName());
      assertEquals((-1420), stackTraceElement1.getLineNumber());
      assertEquals("key serializer.Xy5,YGBe(key serializer)", stackTraceElement1.toString());
      assertEquals("key serializer", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "od@Mq>f2lSe8i+jSFYq", "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$10", (-1904));
      assertNotNull(stackTraceElement2);
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$10", stackTraceElement2.getFileName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals((-1904), stackTraceElement2.getLineNumber());
      assertEquals("od@Mq>f2lSe8i+jSFYq", stackTraceElement2.getMethodName());
      assertEquals(".od@Mq>f2lSe8i+jSFYq(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$10)", stackTraceElement2.toString());
      assertEquals("", stackTraceElement2.getClassName());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("NULL", "od@Mq>f2lSe8i+jSFYq", "vals", (-2));
      assertNotNull(stackTraceElement3);
      assertEquals("NULL", stackTraceElement3.getClassName());
      assertTrue(stackTraceElement3.isNativeMethod());
      assertEquals("NULL.od@Mq>f2lSe8i+jSFYq(Native Method)", stackTraceElement3.toString());
      assertEquals("vals", stackTraceElement3.getFileName());
      assertEquals((-2), stackTraceElement3.getLineNumber());
      assertEquals("od@Mq>f2lSe8i+jSFYq", stackTraceElement3.getMethodName());
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("key serializer", "size", "Xy5,YGBe", (-1904));
      assertNotNull(stackTraceElement4);
      assertEquals("key serializer", stackTraceElement4.getClassName());
      assertEquals("size", stackTraceElement4.getMethodName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("key serializer.size(Xy5,YGBe)", stackTraceElement4.toString());
      assertEquals("Xy5,YGBe", stackTraceElement4.getFileName());
      assertEquals((-1904), stackTraceElement4.getLineNumber());
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("od@Mq>f2lSe8i+jSFYq", "Xy5,YGBe", "org.hibernate.proxy.", (-1904));
      assertNotNull(stackTraceElement5);
      assertEquals("od@Mq>f2lSe8i+jSFYq", stackTraceElement5.getClassName());
      assertEquals((-1904), stackTraceElement5.getLineNumber());
      assertEquals("od@Mq>f2lSe8i+jSFYq.Xy5,YGBe(org.hibernate.proxy.)", stackTraceElement5.toString());
      assertEquals("org.hibernate.proxy.", stackTraceElement5.getFileName());
      assertEquals("Xy5,YGBe", stackTraceElement5.getMethodName());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "", "uB3v\":W", 1);
      assertNotNull(stackTraceElement6);
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor.(uB3v\":W:1)", stackTraceElement6.toString());
      assertEquals(1, stackTraceElement6.getLineNumber());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", stackTraceElement6.getClassName());
      assertEquals("uB3v\":W", stackTraceElement6.getFileName());
      assertFalse(stackTraceElement6.isNativeMethod());
      assertEquals("", stackTraceElement6.getMethodName());
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      assertEquals("java.sql.SQLNonTransientConnectionException: unknown", sQLNonTransientConnectionException0.toString());
      assertEquals("unknown", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1556), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$10", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(7, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException0.initCause((Throwable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with a null
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = ClassUtil.backticked("9VP");
      assertNotNull(string0);
      assertEquals("`9VP`", string0);
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      assertNotNull(annotationMap1);
      assertSame(annotationMap0, annotationMap1);
      assertSame(annotationMap1, annotationMap0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[7];
      annotationMapArray0[0] = annotationMap1;
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap1;
      annotationMapArray0[5] = annotationMap1;
      annotationMapArray0[6] = annotationMap0;
      Class<Short> class1 = Short.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertEquals("short", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = ClassUtil.backticked("9VP");
      assertNotNull(string0);
      assertEquals("`9VP`", string0);
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      assertNotNull(beanSerializerBuilder0);
      assertFalse(beanSerializerBuilder0.hasProperties());
      
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      assertNull(annotatedClass0);
      assertFalse(beanSerializerBuilder0.hasProperties());
      
      Constructor<Double> constructor0 = null;
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      assertNotNull(annotationMap1);
      assertSame(annotationMap0, annotationMap1);
      assertSame(annotationMap1, annotationMap0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[7];
      annotationMapArray0[0] = annotationMap1;
      annotationMapArray0[1] = annotationMap0;
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultConstructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "Unsuitable method (";
      SQLDataException sQLDataException0 = new SQLDataException("Unsuitable method (", "Unsuitable method (");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Unsuitable method (", sQLDataException0.getSQLState());
      assertEquals("Unsuitable method (", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Unsuitable method (", sQLDataException0.toString());
      
      MockFile mockFile0 = new MockFile("Unsuitable method (");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-109);
      mockFileOutputStream0.write(byteArray0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Unsuitable method (", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(9L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Unsuitable method (", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte) (-22), (byte)1, (byte)8, (byte)34, (byte) (-65), (byte)2, (byte) (-109)}, byteArray0);
      
      mockFileOutputStream0.flush();
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Unsuitable method (", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(9L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Unsuitable method (", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "=wp;OJ");
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Unsuitable method (", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(15L, mockFile0.length());
      assertEquals("Unsuitable method (", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      
      mockPrintStream0.close();
      assertSame(mockPrintStream0, printStream0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Unsuitable method (", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(15L, mockFile0.length());
      assertEquals("Unsuitable method (", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      
      sQLDataException0.printStackTrace((PrintStream) mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Unsuitable method (", sQLDataException0.getSQLState());
      assertEquals("Unsuitable method (", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Unsuitable method (", sQLDataException0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Unsuitable method (", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(15L, mockFile0.length());
      assertEquals("Unsuitable method (", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Unsuitable method (", "=wp;OJ", sQLDataException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Unsuitable method (", sQLDataException0.getSQLState());
      assertEquals("Unsuitable method (", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Unsuitable method (", sQLDataException0.toString());
      assertEquals("Unsuitable method (", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("=wp;OJ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Unsuitable method (", sQLFeatureNotSupportedException0.toString());
      
      sQLDataException0.setNextException(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Unsuitable method (", sQLDataException0.getSQLState());
      assertEquals("Unsuitable method (", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Unsuitable method (", sQLDataException0.toString());
      assertEquals("Unsuitable method (", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("=wp;OJ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Unsuitable method (", sQLFeatureNotSupportedException0.toString());
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfRTE(sQLDataException0);
      assertNotNull(sQLDataException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Unsuitable method (", sQLDataException0.getSQLState());
      assertEquals("Unsuitable method (", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Unsuitable method (", sQLDataException0.toString());
      assertEquals("Unsuitable method (", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: Unsuitable method (", sQLDataException1.toString());
      assertEquals("Unsuitable method (", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "Unsuitable method (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsuitable method (
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Throwable throwable1 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "keyType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.backticked("keyType");
      assertNotNull(string0);
      assertEquals("`keyType`", string0);
      
      Class<Character> class1 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      boolean boolean1 = ClassUtil.hasClass(class0, class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = ClassUtil.nonNullString("keyType");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("keyType", string1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string0 = ClassUtil.nullOrToString(integer0);
      assertNotNull(string0);
      
      Class<Byte> class0 = Byte.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      String string1 = ClassUtil.backticked("net.sf.cglib.proxy.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`net.sf.cglib.proxy.`", string1);
      
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Class<Annotation> class3 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(boolean0);
      
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class3);
      assertNull(annotation0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Class<Annotation> class4 = Annotation.class;
      boolean boolean1 = constructor0.isAnnotationPresent(class4);
      assertSame(class4, class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, typeArray0.length);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, classArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, int0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      Class<ReferenceType> class5 = ReferenceType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class5);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.JsonSerializable$Base");
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(sQLTransientException0, (Class<?>) null);
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)sQLTransientException0.initCause(jsonMappingException0);
      assertNotNull(sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException1.getMessage());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      SQLTransientException sQLTransientException2 = (SQLTransientException)sQLTransientException0.fillInStackTrace();
      assertNotNull(sQLTransientException2);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException2);
      assertSame(sQLTransientException2, sQLTransientException0);
      assertSame(sQLTransientException2, sQLTransientException1);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException0.toString());
      assertEquals("com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException2.getMessage());
      assertEquals("java.sql.SQLTransientException: com.fasterxml.jackson.databind.JsonSerializable$Base", sQLTransientException2.toString());
      assertNull(sQLTransientException2.getSQLState());
      assertEquals(0, sQLTransientException2.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.JsonSerializable$Base
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(5, fieldArray0.length);
      
      Class<Double> class1 = Double.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      
      boolean boolean0 = false;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      AccessibleObject.setAccessible((AccessibleObject[]) fieldArray0, true);
      assertEquals(5, fieldArray0.length);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotationsByType(class2);
      assertNotNull(annotationArray1);
      assertNotSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray1.length);
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertNotNull(parameterArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, parameterArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, int0);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray2);
      assertNotSame(annotationArray2, annotationArray1);
      assertSame(annotationArray2, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray2.length);
      assertFalse(annotationArray2.equals((Object)annotationArray1));
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray3);
      assertNotSame(annotationArray3, annotationArray1);
      assertSame(annotationArray3, annotationArray2);
      assertSame(annotationArray3, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray3.length);
      assertFalse(annotationArray3.equals((Object)annotationArray1));
      
      Annotation[] annotationArray4 = constructor0.getAnnotations();
      assertNotNull(annotationArray4);
      assertSame(annotationArray4, annotationArray2);
      assertSame(annotationArray4, annotationArray0);
      assertSame(annotationArray4, annotationArray3);
      assertNotSame(annotationArray4, annotationArray1);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray4.length);
      assertFalse(annotationArray4.equals((Object)annotationArray1));
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertEquals("public java.lang.String()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Annotation[][] annotationArray5 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray5);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray5.length);
      
      String string1 = ClassUtil.nameOf((Named) null);
      assertNotNull(string1);
      assertEquals("[null]", string1);
      
      Class<?> class3 = ClassUtil.primitiveType(class1);
      assertNotNull(class3);
      assertEquals("double", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertTrue(class3.isPrimitive());
      
      Class<ArrayType> class4 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "/~e#U>$+D.4s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.ResolvedRecursiveType) must override method '/~e#U>$+D.4s'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClassUtil.backticked("6/JjJ_/ExH");
      ClassUtil.backticked("6/JjJ_/ExH");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((DataOutput) objectOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "6/JjJ_/ExH");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasClass(jsonMappingException0, class0);
      Class<Integer> class1 = Integer.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) stack0);
      Class<NoClass> class3 = NoClass.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[5], javaTypeArray0[5]);
      Long long0 = new Long(1L);
      MapType mapType1 = mapType0.withKeyValueHandler(long0);
      MapType mapType2 = mapType1.withStaticTyping();
      MapType mapType3 = mapType2.withKeyType(javaTypeArray0[6]);
      mapType1.withHandlersFrom(javaTypeArray0[1]);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MapType mapType4 = mapType3.withValueHandler(mockRuntimeException0);
      ClassUtil.rawClass(mapType4);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2592));
      MapType mapType5 = mapType3.withKeyTypeHandler(stack0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(placeholderForType0, mapType5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
