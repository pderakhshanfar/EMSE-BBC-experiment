/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:39:43 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.Date;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      MapType mapType1 = mapType0.withContentTypeHandler(typeBindings0);
      MapType mapType2 = mapType1.withTypeHandler(class1);
      MapType mapType3 = mapType2.withStaticTyping();
      MapType mapType4 = mapType3.withKeyValueHandler(resolvedRecursiveType0);
      ClassUtil.findSuperTypes((JavaType) mapType4, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<List> class0 = List.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassUtil.emptyIterator();
      byte[] byteArray0 = new byte[20];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vu");
      SQLException sQLException0 = new SQLException("JlF=u1+5A[1S:KD?ew", (String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLException0.addSuppressed(sQLRecoverableException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JlF=u1+5A[1S:KD?ew", "_wt+RLB**0T>cZ,", sQLException0);
      sQLException0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.classNameOf((Object) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("*Z%N.Lc*oo", "*Z%N.Lc*oo");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*Z%N.Lc*oo", "*Z%N.Lc*oo", sQLWarning0);
      sQLWarning0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.nameOf((Named) null);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float(0.0);
      ClassUtil.isJacksonStdImpl((Object) float0);
      ClassUtil.backticked("");
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float1 = new Float((double) 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float1, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, charArrayReader0, objectMapper0, charsToNameCanonicalizer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      JavaType javaType0 = referenceType0.getContentType();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, javaType0, jsonToken0, "org.hibernate.proxy.java.lang.annotation.Annotation");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: org.hibernate.proxy.java.lang.annotation.Annotation
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.isConcrete((Member) constructor0);
      Class<IOException> class2 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class2, true);
      try { 
        ClassUtil.throwRootCauseIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<DoubleNode> class0 = DoubleNode.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.isProxyType(class0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Void> class0 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Void>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      DataTruncation dataTruncation0 = new DataTruncation((-806), false, true, (-806), (-806));
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Sub-class %s (of class %s) must override method '%s'");
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ClassUtil.canBeABeanType(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "bA%fgj<g-Ur");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLTransactionRollbackException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 895, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "elementType", (Throwable) sQLNonTransientException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("elementType", jsonMappingException1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): elementType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.writer();
      objectMapper0.readerForUpdating(jsonEncoding0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonEncoding0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.without(formatFeature0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0, deserializationFeatureArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader2, (OutputStream) null);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      int int0 = 2232;
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader((InputStream) null, charsetDecoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockError mockError0 = new MockError(";^Ko3>`kpN_q{pq/");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "%XIfYO0/{");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Ak`%#]>/");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SQLDataException sQLDataException0 = new SQLDataException("\"4!HDN=*4; PIl]c");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLDataException0.fillInStackTrace();
      MockError mockError0 = new MockError("\"4!HDN=*4; PIl]c", sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "K<Q");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "`F4i6wTSX!OuO{kP";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`F4i6wTSX!OuO{kP");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module", "`F4i6wTSX!OuO{kP", sQLTimeoutException0);
      Throwable throwable0 = sQLTimeoutException0.fillInStackTrace();
      sQLInvalidAuthorizationSpecException0.addSuppressed(throwable0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      sQLTimeoutException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      sQLTimeoutException0.forEach(consumer0);
      Throwable throwable1 = ClassUtil.getRootCause(sQLTimeoutException0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      String string1 = null;
      ClassUtil.backticked((String) null);
      ClassUtil.primitiveType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getRootCause(throwable1);
      Class<Character> class2 = Character.class;
      ClassUtil.canBeABeanType(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      RuntimeException runtimeException1 = (RuntimeException)ClassUtil.getRootCause(runtimeException0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.isTypeOrSuperTypeOf(class0);
      ClassUtil.classOf(simpleType0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Short> class1 = Short.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isLocalType(class1, true);
      Class<SimpleType> class2 = SimpleType.class;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.isBogusClass(class2);
      ClassUtil.backticked((String) null);
      Class<Long> class3 = Long.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.getDeclaringClass(class1);
      Class<Integer> class4 = Integer.class;
      ClassUtil.getPackageName(class4);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockError mockError0 = new MockError("V*P$Kx");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<RuntimeException> class1 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class1);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      enumSet0.add(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isProxyType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Short");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.hasClass(class0, class1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Long long0 = new Long((-1L));
      enumMap0.put(accessPattern0, long0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.canBeABeanType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory3.setOutputDecorator(outputDecorator0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3650));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.nameOf(class0);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      ClassUtil.quotedOr("[]", "_:FP\"]&");
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass("_:FP\"]&", class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("M!w16-klZ Q2Xw7z!D");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, class0);
      ClassUtil.classOf(list0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.Void");
      sQLNonTransientException0.setNextException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassUtil.backticked("iY");
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(resolvedRecursiveType1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class2, true);
      ClassUtil.primitiveType(class2);
      Class<Long> class3 = Long.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class4 = HashMap.class;
      Class<DoubleNode> class5 = DoubleNode.class;
      Class<Object> class6 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class4, class5, class6);
      MapType mapType1 = MapType.construct((Class<?>) class3, typeBindings0, (JavaType) mapType0, javaTypeArray0, javaType0, javaType0);
      MapType mapType2 = mapType1.withKeyType(referenceType0);
      ClassUtil.verifyMustOverride(class0, mapType2, "org.hibernate.proxy.java.lang.Void");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.quotedOr(class0, "`com.fasterxml.jackson.databind.type.ReferenceType`");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`com.fasterxml.jackson.databind.type.ReferenceType`", false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Sub-class %s (of class %s) must override method '%s'");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper2, mockPrintStream1, byteArray0, (-298), false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      Class<Long> class2 = Long.class;
      Class<Object> class3 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class3, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(resolvedRecursiveType0);
      CollectionType collectionType2 = collectionType0.withTypeHandler(collectionType1);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(collectionType2, (String) null, "BVd");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockPrintStream1, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' as a subtype of [collection type; class java.util.LinkedList, contains [simple type, class java.lang.Object]]: BVd
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getGenericInterfaces(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ArrayType arrayType2 = arrayType1.withValueHandler(typeFactory0);
      Byte byte0 = new Byte((byte) (-1));
      ArrayType arrayType3 = arrayType2.withContentValueHandler(byte0);
      ClassUtil.rawClass(arrayType3);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class2, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(sQLClientInfoException0);
      ReferenceType.upgradeFrom(javaType0, resolvedRecursiveType1);
      ClassUtil.findSuperTypes(javaType0, class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Y TKR:]J/L b");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(">OD>79%GDY$hX", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module", 1574);
      Throwable throwable0 = ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(throwable0);
      ClassUtil.throwIfRTE(sQLTransientException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass(class0, class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactoryConfig0, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getEnclosingClass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, constructor0, "ALLOW_COERCION_OF_SCALARS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.nameOf((Class<?>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap", "[null]", (-1080), hashMap0, (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(":x&yLsV<[FY8:", "org.hibernate.proxy.java.lang.Class", (-1080), sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: :x&yLsV<[FY8:
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      ClassUtil.classOf(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Long long0 = new Long((-409L));
      JavaType javaType0 = resolvedRecursiveType1.withValueHandler(long0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType1, javaType0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getOuterClass(class3);
      Class<Byte> class4 = Byte.class;
      ClassUtil.primitiveType(class4);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      File file0 = MockFile.createTempFile("Argument #%d of factory method %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", (File) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1024);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper2, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator1, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.setAccessible(false);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "7";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7");
      Class<Integer> class0 = Integer.class;
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
      JsonGenerator jsonGenerator0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = null;
      int int0 = 114;
      SQLWarning sQLWarning0 = new SQLWarning("(IFQ&E~Bm'\":}sg!V", (String) null);
      // Undeclared exception!
      try { 
        sQLWarning0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<Class<AccessibleObject>> stack0 = new Stack<Class<AccessibleObject>>();
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<Class<AccessibleObject>> stack0 = new Stack<Class<AccessibleObject>>();
      Class<Boolean> class0 = Boolean.class;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory4 = jsonFactory3.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((OutputStream) byteArrayOutputStream0);
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jsonFactory1.isEnabled(jsonFactory_Feature0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "(aliases: ");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Boolean` from number 1: (aliases: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("com.fasterxml.jackson.databind.ser.PropertyBuilder", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("zaR'J*@T", "java.lang.Object", hashMap0);
      sQLClientInfoException0.getLocalizedMessage();
      ClassUtil.throwIfRTE(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      ClassUtil.classOf(jsonGenerator_Feature0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isProxyType(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("JSON", "net.sf.cglib.proxy.java.lang.Character", (Map<String, ClientInfoStatus>) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException1, (Object) objectMapper0, 84);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[84])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Character");
      ClassUtil.nonNullString("1#qt_tfq3e+TGg9g~");
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      Throwable throwable0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.nonNullString("java.lang.Character");
      ClassUtil.getClassDescription(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType1.withValueHandler(class1);
      ReferenceType.upgradeFrom(resolvedRecursiveType0, javaType0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType1, (Class<?>) class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JavaType[] javaTypeArray0 = resolvedRecursiveType0.findTypeParameters(class0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(arrayType0);
      TypeBindings.create(class0, javaTypeArray0);
      Class<Integer> class1 = Integer.class;
      TypeBindings.create(class0, list0);
      ClassUtil.findSuperTypes(javaType0, class1, false);
      ClassUtil.nullOrToString(typeFactory0);
      ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.type.TypeFactory@0000000005");
      System.setCurrentTimeMillis(1586L);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      ClassUtil.isConcrete(class1);
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findConstructor(class0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('9');
      ClassUtil.isJacksonStdImpl((Object) character0);
      Double double0 = Double.valueOf(0.0);
      Double double1 = new Double(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNull(double0, double1);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.primitiveType(class1);
      ClassUtil.emptyIterator();
      Class<Float> class2 = Float.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 19, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "FV@hat.`jQ", (Throwable) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // FV@hat.`jQ
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.getGenericSuperclass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isProxyType(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<AccessPattern> class1 = AccessPattern.class;
      constructor0.setAccessible(true);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class1);
      Version version0 = new Version(1085, 3, 3, (String) null, (String) null, (String) null);
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<AccessPattern> class2 = AccessPattern.class;
      SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class1, class2);
      JsonSerializer<ArrayType> jsonSerializer0 = (JsonSerializer<ArrayType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonSerializer0).handledType();
      // Undeclared exception!
      try { 
        simpleModule1.addSerializer(jsonSerializer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // JsonSerializer of type com.fasterxml.jackson.databind.JsonSerializer$MockitoMock$1486415460 does not define valid handledType() -- must either register with method that takes type argument  or make serializer extend 'com.fasterxml.jackson.databind.ser.std.StdSerializer'
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleSerializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Long> class2 = Long.class;
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class3, class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<String> class1 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectReader objectReader2 = objectReader1.withoutFeatures(jsonParser_FeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 8);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 68, objectReader2, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Module> class1 = Module.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType1.withValueHandler(class0);
      ReferenceType.upgradeFrom(javaType0, javaType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2181);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      objectReader0.forType((JavaType) resolvedRecursiveType0);
      Class<Float> class2 = Float.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf("``sP");
      ClassUtil.getGenericSuperclass(class0);
      MockError mockError0 = new MockError("B`%Tuy4K");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(resolvedRecursiveType1);
      ReferenceType.upgradeFrom(javaType0, javaType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2181);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      objectReader0.forType(javaType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.hasClass((Object) null, class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf("``sP");
      ClassUtil.getGenericSuperclass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.getClassDescription(class1);
      Class<?> class2 = ClassUtil.wrapperType(class0);
      ClassUtil.getConstructors(class1);
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.nonNullString("org.hibernate.proxy.java.lang.Character");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      Class<Float> class2 = Float.class;
      TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) placeholderForType0);
      typeFactory0.constructArrayType((JavaType) placeholderForType0);
      System.setCurrentTimeMillis(492L);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~QU~Dj");
      ClassUtil.isLocalType(class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "JSON");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getClassDescription(class0);
      Class<?> class1 = ClassUtil.wrapperType(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, false);
      Class<Object> class3 = Object.class;
      ClassUtil.nameOf(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.findSuperTypes(class1, class4);
      Class<IOException> class5 = IOException.class;
      ClassUtil.isBogusClass(class5);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ClassUtil.throwIfRTE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Void> class0 = Void.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~QU~Dj");
      ClassUtil.isLocalType(class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, true);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isProxyType(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class3);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "W<=DnD[", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<Class<AccessibleObject>> stack0 = new Stack<Class<AccessibleObject>>();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isLocalType(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getConstructors(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("J1H", (String) null, 1308);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("J1H", "J1H");
      sQLFeatureNotSupportedException0.setNextException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTimeoutException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: java.sql.SQLFeatureNotSupportedException: J1H
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<Class<AccessibleObject>> stack0 = new Stack<Class<AccessibleObject>>();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isLocalType(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getConstructors(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isLocalType(class2, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockError mockError0 = new MockError(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~QU~Dj");
      ClassUtil.isLocalType(class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar(3);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isLocalType(class1, false);
      Class<Void> class2 = Void.class;
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.getClassMethods(class2);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, true);
      ClassUtil.getConstructors(class1);
      ClassUtil.findSuperClasses(class2, class2, true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.nonNullString("org.hibernate.proxy.java.lang.Character");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      Class<Error> class4 = Error.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1158));
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class4, (JavaType) placeholderForType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class2, (JavaType) resolvedRecursiveType0);
      CollectionType collectionType1 = collectionType0.withTypeHandler(class4);
      ClassUtil.classNameOf(collectionType1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "java.lang.RuntimeExc";
      SQLWarning sQLWarning0 = new SQLWarning("java.lang.RuntimeExc", "Tz2#xv?'b{nb]B/", (-1200));
      sQLWarning0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Tz2#xv?'b{nb]B/", (Throwable) sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.RuntimeExc
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=bXh;^Z,S");
      String string0 = "org.hibernate.proxy.";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" $p<CWP%F-d@Q8jS]]", "org.hibernate.proxy.");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 2746);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      String string1 = null;
      int int0 = (-3354);
      jsonMappingException_Reference0.toString();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=bXh;^Z,S", (String) null, (-3354), jsonMappingException0);
      Class<Short> class0 = Short.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3354));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) accessPattern0, "L.5GS>");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  $p<CWP%F-d@Q8jS]] (through reference chain: UNKNOWN[2746])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~QU~Dj");
      ClassUtil.isLocalType(class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      objectOutputStream0.writeChar((-219));
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class1, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 60000);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      File file0 = MockFile.createTempFile("uIaV", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, mockFileOutputStream0, byteArray0, 1, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileOutputStream0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot call getValue() on constructor parameter of ", "Cannot call getValue() on constructor parameter of ", intArray0, sQLNonTransientException0);
      sQLNonTransientException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "9R{lQ>HFm[3");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-4440));
      ClassUtil.getClassDescription(placeholderForType0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`com.fasterxml.jackson.databind.type.PlaceholderForType`", "``sP", (-4440));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "`com.fasterxml.jackson.databind.type.PlaceholderForType`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `com.fasterxml.jackson.databind.type.PlaceholderForType`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.printStackTrace();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
      try { 
        sQLClientInfoException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.classNameOf(class0);
      System.setCurrentTimeMillis(267L);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getClassMethods(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", "`java.lang.Class`");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("`java.lang.Class`", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(XC[DcRo|04ZCMWdF2", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", 68, sQLTransientConnectionException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.classOf("``sP");
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getGenericSuperclass(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isProxyType(class2);
      Float float0 = new Float(922.3F);
      ClassUtil.isJacksonStdImpl((Object) float0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      TypeBindings.emptyBindings();
      Stack<JavaType> stack0 = new Stack<JavaType>();
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getConstructors(class3);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class1);
      Class<String> class4 = String.class;
      ClassUtil.findSuperTypes(class4, class0, list0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.classOf("``sP");
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getGenericSuperclass(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isProxyType(class2);
      Float float0 = new Float(922.3F);
      ClassUtil.isJacksonStdImpl((Object) float0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<MapLikeType> class3 = MapLikeType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "AUTO_DETECT_CREATORS", "Failed to instantiate class ", 0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findSuperTypes(class0, (Class<?>) null);
      ClassUtil.quotedOr((Object) null, "'AJwAfYWzYttA#*");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getConstructors(class1);
      ClassUtil.emptyIterator();
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class0, class3, false);
      Class<Byte> class4 = Byte.class;
      ClassUtil.findSuperTypes(class2, class4);
      Short short0 = new Short((short) (-1032));
      ClassUtil.nullOrToString(short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.createInstance(class0, false);
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, false);
      ClassUtil.findSuperTypes(class1, class0, list0);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withValueHandler(javaType0);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) arrayType1);
      typeBindings1.getBoundType((-393805500));
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.classOf("``sP");
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getGenericSuperclass(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isProxyType(class2);
      Float float0 = new Float(922.3F);
      ClassUtil.isJacksonStdImpl((Object) float0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Stack<JavaType> stack0 = new Stack<JavaType>();
      Class<ArrayType> class3 = ArrayType.class;
      TypeBindings.create((Class<?>) class3, (List<JavaType>) stack0);
      Class<MapLikeType> class4 = MapLikeType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "AUTO_DETECT_CREATORS", "Failed to instantiate class ", 0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2M,");
      ClassUtil.getGenericInterfaces(class0);
      Class<SimpleType> class1 = SimpleType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.backticked("com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo");
      ClassUtil.backticked("`com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo`");
      Integer integer0 = new Integer((byte)28);
      ClassUtil.nullOrToString(integer0);
      Class<Object> class2 = Object.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.nameOf(class1);
      Boolean boolean0 = Boolean.valueOf(true);
      ClassUtil.quotedOr(boolean0, "`com.fasterxml.jackson.databind.type.SimpleType`");
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class3, class4);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getSuppressed();
      ClassUtil.throwIfRTE(batchUpdateException0);
      Class<Long> class5 = Long.class;
      ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.getConstructors(class1);
      SQLException sQLException0 = new SQLException("unknown", "v1.oRe7)RbRynOiKt");
      sQLException0.fillInStackTrace();
      sQLException0.getLocalizedMessage();
      ClassUtil.getRootCause(sQLException0);
      Class<Float> class2 = Float.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.getGenericSuperclass(class3);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2M,");
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class2);
      int[] intArray0 = new int[5];
      intArray0[0] = 36;
      intArray0[1] = 3;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1707);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Failed to find default constructor of class ", "Failed to find default constructor of class ", intArray0, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2415, 0);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<Short> class0 = Short.class;
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory2.constructCollectionType(class1, class1);
      typeFactory0.constructCollectionType(class1, class0);
      ClassUtil.quotedOr(collectionType0, "ZERO_LENGTH_ENUM_ARRAY");
      ClassUtil.emptyIterator();
      Class<Character> class2 = Character.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2M,");
      ClassUtil.getGenericInterfaces(class0);
      Class<SimpleType> class1 = SimpleType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.backticked("com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo");
      ClassUtil.backticked("`com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo`");
      Integer integer0 = new Integer((byte)28);
      ClassUtil.nullOrToString(integer0);
      Class<Object> class2 = Object.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.nameOf(class1);
      Boolean boolean0 = Boolean.valueOf(true);
      ClassUtil.quotedOr(boolean0, "`com.fasterxml.jackson.databind.type.SimpleType`");
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.createInstance(class2, true);
      ClassUtil.getConstructors(class1);
      SQLException sQLException0 = new SQLException("java.lang.Integer@0000000001", "Incompatible types: declared root type (%s) vs %s");
      sQLException0.getLocalizedMessage();
      ClassUtil.getRootCause(sQLException0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      resolvedRecursiveType0.getSelfReferencedType();
      ClassUtil.rawClass(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<Integer> class4 = Integer.class;
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.findSuperClasses(class4, class5, false);
      Class<Object> class6 = Object.class;
      ClassUtil.nameOf(class6);
      ClassUtil.getPackageName(class3);
      MockThrowable mockThrowable0 = new MockThrowable("java.lang");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("jC_IPJIcd9/W3A/%pya", mockThrowable0);
      Class<SimpleType> class7 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class7, class1, true);
      Class<AccessibleObject> class8 = AccessibleObject.class;
      ClassUtil.hasClass("java.lang", class8);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      int[] intArray0 = new int[6];
      intArray0[0] = 285;
      intArray0[1] = (-605166913);
      intArray0[2] = 722;
      intArray0[3] = (-721483190);
      intArray0[4] = 285;
      intArray0[5] = (-721483190);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("FJqd)~o&", (String) null, 285, intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("FJqd)~o&", "", (-721483190), batchUpdateException0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getClassDescription(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.nameOf(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, true);
      int[] intArray0 = new int[5];
      intArray0[0] = 3495;
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = 1;
      intArray0[4] = (-211);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findSuperTypes(class0, (Class<?>) null);
      Class<String> class1 = String.class;
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Long long0 = new Long(4364L);
      ClassUtil.nonNull(long0, (Long) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
      Class<Short> class1 = Short.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperTypes(class1, class2);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.findSuperTypes(class0, class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Long long0 = new Long(3937L);
      ClassUtil.nonNull(long0, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Long long0 = new Long(533L);
      Long long1 = ClassUtil.nonNull((Long) null, long0);
      assertEquals(533L, (long)long1);
      
      Class<MapType> class0 = MapType.class;
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(resolvedRecursiveType1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class2, false);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Long long0 = new Long(533L);
      System.setCurrentTimeMillis(533L);
      Class<DoubleNode> class0 = DoubleNode.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "enum");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isConcrete(class0);
      Stack<Class<Integer>> stack0 = new Stack<Class<Integer>>();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "java>lang.RuntimeEx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.isJacksonStdImpl((Object) type0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class1, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      resolvedRecursiveType0.getSelfReferencedType();
      try { 
        defaultDeserializationContext_Impl0.resolveSubType((JavaType) null, "W&^pnEm]`fvf#1t");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'W&^pnEm]`fvf#1t' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.findSuperTypes(class0, (Class<?>) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ClassUtil.throwIfRTE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isConcrete(class1);
      Class<Annotation> class2 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, "", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.annotation.Annotation) must override method ''
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2415, 0);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<Short> class0 = Short.class;
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory2.constructCollectionType(class1, class1);
      CollectionLikeType collectionLikeType0 = typeFactory2.constructCollectionLikeType(class0, class0);
      typeFactory0.constructCollectionType(class1, class0);
      ClassUtil.quotedOr(collectionLikeType0, "ZERO_LENGTH_ENUM_ARRAY");
      ClassUtil.emptyIterator();
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, " (from class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getClassDescription(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "``");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ``
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Byte byte0 = new Byte((byte)74);
      ClassUtil.isJacksonStdImpl((Object) beanProperty_Bogus0);
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getClassMethods(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "``");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ``
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<Integer> class4 = Integer.class;
      Class<SimpleType> class5 = SimpleType.class;
      ClassUtil.findSuperClasses(class4, class5, false);
      Class<Object> class6 = Object.class;
      ClassUtil.nameOf(class6);
      ClassUtil.getPackageName(class3);
      MockThrowable mockThrowable0 = new MockThrowable("java.lang");
      boolean boolean0 = new Boolean("java.lang");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("jC_IPJIcd9/W3A/%pya", mockThrowable0);
      Class<SimpleType> class7 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class7, class1, true);
      Class<AccessibleObject> class8 = AccessibleObject.class;
      ClassUtil.hasClass("java.lang", class8);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isProxyType(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1249;
      intArray0[2] = 3;
      intArray0[3] = 111;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = (-786);
      intArray0[7] = (-1381);
      intArray0[8] = (-3959);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class0, class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("size", "t9aMFQ7", intArray0, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Class`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isLocalType(class1, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print(false);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter1);
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getPackageName(class2);
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot figure out type for EnumSet (odd JDK platform?)", "Cannot figure out type for EnumSet (odd JDK platform?)", 60000);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.fillInStackTrace();
      sQLNonTransientConnectionException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, "com.fasterxml.jackson.databind.util.ClassUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isLocalType(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = Character.valueOf('A');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), objectMapper1, mockPrintStream0, byteArray0, (-342), true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("JSON");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Double> class2 = Double.class;
      ClassUtil.nameOf(class2);
      ClassUtil.getPackageName(class0);
      MockThrowable mockThrowable0 = new MockThrowable("com.fasterxml.jackson.databind.type");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ZERO_LENGTH_ENUM_ARRAY", mockThrowable0);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class3, class1, false);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("v1.oRe7)RbRynOiKt", "unknown", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "AUTO_DETECT_CREATORS", (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      String string0 = "v1.oRe7)RbRynOiKt";
      String string1 = "unknown";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("v1.oRe7)RbRynOiKt", "unknown", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      String string2 = null;
      int int0 = 0;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "AUTO_DETECT_CREATORS", (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      MockThrowable mockThrowable0 = new MockThrowable("com.fasterxml.jackson.databind.type");
      Class<NoClass> class1 = NoClass.class;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isProxyType(class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes(class2, class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("serialVersionUID", "FvM7:S,!");
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("serialVersionUID", "", "(t=BAY-*zv6", 415);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("(t=BAY-*zv6", "serialVersionUID", "FvM7:S,!", 415);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "", "elementType", 415);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "(t=BAY-*zv6", "primitive", 2789);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "U_H (q", "", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray1 = new StackTraceElement[1];
      StackTraceElement stackTraceElement5 = new StackTraceElement("serialVersionUID", "FvM7:S,!", "time", 21);
      stackTraceElementArray1[0] = stackTraceElement5;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray1);
      sQLTransientConnectionException0.setNextException(sQLFeatureNotSupportedException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.findEnumType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.findSuperTypes(class3, class0);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(resolvedRecursiveType1);
      ReferenceType.upgradeFrom(javaType0, javaType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2181);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ObjectReader objectReader1 = objectReader0.forType(javaType0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      // Undeclared exception!
      try { 
        objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      SimpleType simpleType0 = referenceType1.withValueHandler(classUtil0);
      TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException(" bytes (out of ", " bytes (out of ", (-782));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("size");
      mockPrintWriter0.print(true);
      sQLDataException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLDataException0.fillInStackTrace();
      MockThrowable mockThrowable0 = new MockThrowable(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  bytes (out of 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructRawMapLikeType(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1225957618) return null for type [simple type, class java.lang.Enum]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      String string0 = "com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) sQLTransientConnectionException0;
      objectArray0[1] = (Object) locale0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Float> class0 = Float.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(mapLikeType0, "com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase", "NULL");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase' as a subtype of [map-like type; class java.lang.Float, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]: NULL
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.spliterator();
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.primitiveType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[K${", ":G", 265);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(*O$5Hmov", ":G", 265, sQLTransactionRollbackException0);
      sQLSyntaxErrorException0.spliterator();
      sQLTransactionRollbackException0.addSuppressed(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [K${
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("keyType", "Cannot access ", 577);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "K?%7E=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // K?%7E=
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("je\"~-j\"yHzz/ddn%cIf");
      Throwable throwable0 = ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: je\"~-j\"yHzz/ddn%cIf", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nullOrToString((Object) null);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      DeserializationContext deserializationContext0 = null;
      MockIOException mockIOException0 = new MockIOException("");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      String string0 = null;
      String string1 = "\"\"XJ46";
      int int0 = 0;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, (String) null, "\"\"XJ46", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Short> class0 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(23, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "keyUniverse");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Byte) must override method 'keyUniverse'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
