/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:55:02 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.Vector;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class1 = Float.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isConcrete(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getPackageName(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(%6]");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      Float float0 = new Float(0.0F);
      MapLikeType mapLikeType0 = mapType0.withContentTypeHandler(float0);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7CPvV^QQ5;", "7CPvV^QQ5;", mockThrowable0);
      mockThrowable0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "SUy~>[");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nullOrToString((Object) null);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("T\"[E6}Z(R =ZKb;0HI7");
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getConstructors(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      System.setCurrentTimeMillis((-2220L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.findClassAnnotations(class1);
      Class<String> class2 = String.class;
      ClassUtil.getDeclaredMethods(class2);
      Float float0 = Float.valueOf((float) (-2220L));
      ClassUtil.classNameOf(float0);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class1);
      enumSet0.parallelStream();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Short> enumMap0 = new EnumMap<AccessPattern, Short>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ArrayDeque<JsonMappingException> arrayDeque0 = new ArrayDeque<JsonMappingException>();
      enumSet0.retainAll(arrayDeque0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jacks");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, "com.fasterxml.jacks");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jacks (through reference chain: java.sql.SQLWarning[\"com.fasterxml.jacks\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0, "d4U]vBluLY*0L=ww");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      sQLIntegrityConstraintViolationException0.initCause(jsonMappingException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(125, (-2167));
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class0, class2);
      MapType mapType1 = mapType0.withKeyTypeHandler(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType1);
      ReferenceType referenceType1 = referenceType0.withValueHandler(typeFactory0);
      MapType mapType2 = mapType1.withContentTypeHandler(referenceType1);
      ClassUtil.classOf(mapType2);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<Class<?>> list0 = new LinkedList<Class<NoClass>>();
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory3, false);
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'R';
      charArray0[2] = 'P';
      charArray0[3] = 'n';
      charArray0[4] = '|';
      charArray0[5] = '\'';
      charArray0[6] = 'i';
      charArray0[7] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), bufferedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-1845), true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Error> class2 = Error.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException(")BXIk[\"fO(TnkY\"VT", class2, "com.fasterxml.jackson.databind.type.PlaceholderForType");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidFormatException): Cannot deserialize value of type `java.lang.Error` from String \")BXIk[\"fO(TnkY\"VT\": com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3060);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('m');
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) printWriter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Void> class2 = Void.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "JSON", "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Void` from String \"JSON\": JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class1);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Double double0 = new Double(0.0);
      enumMap0.put(accessPattern0, double0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      enumMap0.replaceAll(biFunction0);
      enumMap0.keySet();
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Double double0 = new Double((-148.7));
      enumMap0.put(accessPattern0, double0);
      HashSet<AccessPattern> hashSet0 = new HashSet<AccessPattern>();
      ClassUtil.findEnumType(enumMap0);
      Class<Double> class1 = Double.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType((JavaType) null);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes(javaType0, class2, true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      HashSet<AccessPattern> hashSet0 = new HashSet<AccessPattern>();
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class1);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      enumMap0.replaceAll(biFunction0);
      enumMap0.keySet();
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      NullNode nullNode0 = NullNode.getInstance();
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(nullNode0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "org.hibernate.proxy.com.fasterxml.jackson.databind.Module");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: org.hibernate.proxy.com.fasterxml.jackson.databind.Module
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.hasClass("`java.lang.String`", class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassUtil.getClassDescription("No _valueDeserializer assigned");
      Class<DecimalNode> class1 = DecimalNode.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Long> class2 = Long.class;
      ClassUtil.getClassMethods(class2);
      System.setCurrentTimeMillis((-2180L));
      Random.setNextRandom(673);
      Class<ReferenceType> class3 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 3, mockThrowable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "net.sf.cglib.proxy.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Short> class1 = Short.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) class1, (Object) class1);
      ArrayType arrayType1 = arrayType0.withValueHandler(typeBindings0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(arrayType1, arrayType1, arrayType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, javaType0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      referenceType0.toCanonical();
      ClassUtil.rawClass(arrayType1);
      Class<Double> class2 = Double.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, typeBindings0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper0, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGeneratorDelegate0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0, "upU986");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.quotedOr(class0, "B");
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory((SerializerFactory) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~:db(-bv)A]WAn,|?~E");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-128);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper2, mockFileOutputStream0, byteArray0, (byte)43, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1, 8);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(sQLTimeoutException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3181, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable throwable0 = ClassUtil.throwIfRTE(mockThrowable0);
      MockError mockError0 = new MockError("JSON", throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Long> class1 = Long.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(class0);
      ClassUtil.rawClass(arrayType1);
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 1134);
      String string0 = "primitive";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.LinkedNode");
      SQLTransientException sQLTransientException0 = new SQLTransientException("primitive", "|z", 1134, sQLTransientConnectionException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      Boolean boolean0 = Boolean.FALSE;
      objectMapper1.setDefaultMergeable(boolean0);
      ObjectMapper objectMapper2 = objectMapper0.copy();
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      ObjectMapper objectMapper3 = objectMapper2.configure(mapperFeature0, true);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper4 = objectMapper3.setNodeFactory(jsonNodeFactory0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      try { 
        objectMapper4.convertValue((Object) sQLTransientConnectionException0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize instance of `java.sql.ClientInfoStatus` out of START_OBJECT token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.initCause(sQLFeatureNotSupportedException1);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<NoClass>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<NoClass>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":Fa-MewhRu/", ":Fa-MewhRu/", (-1254));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("a5SxBjKtYuz", sQLFeatureNotSupportedException0);
      sQLTimeoutException0.getLocalizedMessage();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.initCause(sQLTimeoutException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<MapType> class0 = MapType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.nameOf(class2);
      ClassUtil.primitiveType(class1);
      Class<Error> class3 = Error.class;
      ClassUtil.canBeABeanType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-3462), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-3462), 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(320);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayOutputStream0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType.constructUnsafe(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      MockError mockError0 = new MockError();
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "org.hibernate.proxy.");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class4);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.java.lang.reflect.AccessibleObject");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("annotation", "org.hibernate.proxy.java.lang.RuntimeException", 115, sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.", sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.", "Internal error: Cannot resolve sub-type for Class ", 8000, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0, "+9K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // +9K
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1917), false, false, 1150, (-491700880));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[]");
      ClassUtil.findConstructor(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.hasClass(list0, class2);
      TypeFactory.defaultInstance();
      Class<Object> class3 = Object.class;
      ClassUtil.findRawSuperTypes(class3, class1, true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Long> class1 = Long.TYPE;
      Class<MapLikeType> class2 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = javaType0;
      MapType mapType0 = MapType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[3]);
      ClassUtil.rawClass(mapType0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Character> class0 = Character.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = true;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      Class<?> class2 = ClassUtil.classOf(list0);
      ClassUtil.getClassDescription(class2);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(123, (-666448965));
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType((Class<? extends Collection>) class3, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Class<HashMap> class4 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class4);
      Class<RuntimeException> class5 = RuntimeException.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class5, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) collectionType0);
      MapType mapType1 = mapType0.withTypeHandler(referenceType0);
      MapType mapType2 = mapType1.withKeyType(simpleType0);
      MapType mapType3 = mapType2.withKeyTypeHandler((Object) null);
      CollectionType collectionType2 = collectionType1.withTypeHandler(mapType3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      CollectionLikeType collectionLikeType0 = collectionType2.withContentTypeHandler(mockRuntimeException0);
      javaTypeArray0[3] = (JavaType) collectionLikeType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      MapType mapType4 = MapType.construct(class2, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) referenceType0, javaTypeArray0[3]);
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType4, javaTypeArray0, (JavaType) mapType2);
      SimpleType simpleType1 = referenceType1.withStaticTyping();
      JavaType javaType0 = simpleType1.withContentType(collectionType1);
      ReferenceType referenceType2 = ReferenceType.upgradeFrom(javaType0, simpleType0);
      Class<Integer> class6 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) referenceType2, (Class<?>) class6, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isProxyType(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver((SubtypeResolver) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper2.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      ObjectMapper objectMapper3 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper3.readerFor(javaType0);
      // Undeclared exception!
      try { 
        objectReader0.at("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"JSON\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isConcrete(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.hasClass(class0, class2);
      Class<Character> class3 = Character.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.findSuperTypes(class2, class0, list0);
      ClassUtil.getOuterClass(class0);
      HashMap<AccessPattern, Long> hashMap0 = new HashMap<AccessPattern, Long>();
      EnumMap<AccessPattern, Long> enumMap0 = null;
      try {
        enumMap0 = new EnumMap<AccessPattern, Long>(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified map is empty
         //
         verifyException("java.util.EnumMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.RuntimeEx");
      Class<CollectionType> class1 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockRuntimeException0, class1);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `org.evosuite.runtime.mock.java.lang.MockRuntimeException`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockError mockError0 = new MockError("$*J 22>R!5i'[zv0");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte) (-65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.classOf(accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long((-9223372036854775808L));
      ClassUtil.nonNull((Long) null, long0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.hasClass(class2, class3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class4 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class4);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, collectionType0);
      JavaType javaType0 = referenceType0.withContentType(collectionType0);
      ClassUtil.rawClass(javaType0);
      Class<String> class5 = String.class;
      ClassUtil.getEnclosingClass(class5);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.createInstance(class1, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Short> class2 = Short.class;
      ClassUtil.isProxyType(class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      try { 
        objectMapper0.convertValue((Object) class2, class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.sql.ClientInfoStatus` from String \"java.lang.Short\": value not one of declared Enum instance names: [REASON_UNKNOWN_PROPERTY, REASON_VALUE_INVALID, REASON_UNKNOWN, REASON_VALUE_TRUNCATED]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) class1, (Object) class1);
      ArrayType arrayType1 = arrayType0.withValueHandler(typeBindings0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(arrayType1, arrayType1, arrayType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, javaType0);
      referenceType0.toCanonical();
      ClassUtil.rawClass(arrayType1);
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      TypeFactory.unknownType();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isProxyType(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      classUtil_Ctor0.getParameterAnnotations();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      try { 
        objectMapper2.convertValue((Object) classUtil_Ctor0, class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize instance of `java.sql.ClientInfoStatus` out of START_OBJECT token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.com.fasterxml.jackson.databind.DeserializationConfig");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.com.fasterxml.jackson.databind.DeserializationConfig", "org.hibernate.proxy.com.fasterxml.jackson.databind.DeserializationConfig", 96);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLFeatureNotSupportedException0.setNextException(sQLTimeoutException0);
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isConcrete(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.hasClass(class2, class1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.nameOf(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes(class0, class2);
      ClassUtil.isJacksonStdImpl((Object) class2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.class;
      Class<String> class2 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      Class<Character> class3 = Character.class;
      ClassUtil.hasClass(list0, class3);
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeFactory");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("n=m/!_${");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.nonNullString("``");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.nonNullString((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      try { 
        objectMapper0.convertValue((Object) class1, class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.sql.ClientInfoStatus` from String \"java.lang.Short\": value not one of declared Enum instance names: [REASON_UNKNOWN_PROPERTY, REASON_VALUE_INVALID, REASON_UNKNOWN, REASON_VALUE_TRUNCATED]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getGenericInterfaces(class2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.verifyMustOverride(class0, "org.hibernate.proxy.java.lang.Object", "org.hibernate.proxy.java.lang.Object");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.quotedOr(list0, "com.fasterxml.jacks");
      ClassUtil.nameOf(class1);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isBogusClass(class1);
      Class<DecimalNode> class2 = DecimalNode.class;
      ClassUtil.findSuperClasses(class2, class2, true);
      ClassUtil.getDeclaringClass(class1);
      Short short0 = new Short((short) (-1199));
      Class<ReferenceType> class3 = ReferenceType.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ks.=9=$uw<[twU");
      ClassUtil.hasClass(short0, class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.isProxyType(class4);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class5);
      ClassUtil.nameOf(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class5, "com.fasterxml.jackson.annotation.JsonInclude$Value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = " with 2 type parameters: class expects ";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" with 2 type parameters: class expects ", "%s(%d params)", 4091);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<Character> class2 = Character.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class4 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class4);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.hasClass(collectionType1, class5);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nullOrToString(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findConstructor(class1, false);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      Class<?> class2 = ClassUtil.classOf(class1);
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.nameOf((Named) null);
      ClassUtil.nonNullString("~Ls uBPQh(o(");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class1, (Class<?>) null, true);
      ClassUtil.isConcrete(class1);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nullOrToString(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      JavaType javaType0 = TypeFactory.unknownType();
      ((TypeBase) javaType0).toCanonical();
      ClassUtil.rawClass(javaType0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.rawClass(javaType0);
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(1821.098932);
      ClassUtil.quotedOr(float0, "`/bA&|8hr^])");
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isProxyType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      ClassUtil.isLocalType(class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vFz>_\"ZLr");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTimeoutException0);
      mockRuntimeException0.getCause();
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.throwIfError(mockRuntimeException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ClassUtil.nonNull((Long) null, (Long) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      MockFile mockFile0 = new MockFile("vFz>_\"ZLr", "JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('q');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1970), objectMapper2, printStream0, byteArray0, 0, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(96, 0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: vFz>_\"ZLr
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isJacksonStdImpl((Object) "H3'eu'2D(tBW@^.-$[");
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Pzl9%TBvpVu", "_tRV\u0002i/L0*A");
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: Pzl9%TBvpVu
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.classOf((Object) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class2);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      SimpleType.constructUnsafe(class0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      List<Class<?>> list0 = new LinkedList<Class<RuntimeException>>();
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = new Byte((byte)87);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("H3'eu'2D(tBW@^.-$[", "_tRV\u0002i/L0*A");
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, (int) (byte)87);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // H3'eu'2D(tBW@^.-$[ (through reference chain: java.sql.SQLTimeoutException[87])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      Integer integer0 = new Integer(127);
      Integer integer1 = new Integer(127);
      ClassUtil.nonNull(integer1, integer1);
      ClassUtil.getDeclaredMethods(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getPackageName(class1);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<ClientInfoStatus> class1 = null;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.rawClass(javaType0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isJacksonStdImpl((Object) "H3'eu'2D(tBW@^.-$[");
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete((Member) constructor0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_tRV\u0002i/L0*A", "H3'eu'2D(tBW@^.-$[");
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Short short0 = new Short((short)683);
      ClassUtil.nullOrToString(short0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.node.POJONode");
      mockError0.toString();
      MockThrowable mockThrowable0 = new MockThrowable();
      mockError0.initCause(mockThrowable0);
      MockError mockError1 = new MockError(mockError0);
      ClassUtil.isJacksonStdImpl((Object) mockError1);
      Class<Double> class0 = Double.class;
      ClassUtil.isObjectOrPrimitive(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, mockThrowable0);
      ClassUtil.throwIfIOE(sQLClientInfoException0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "keyUniverse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getPackageName(class0);
      ClassUtil.nullOrToString(class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      Class<Integer> class2 = Integer.TYPE;
      ClassUtil.defaultValue(class2);
      ClassUtil.getConstructors(class2);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Long long0 = new Long(2056L);
      Long long1 = new Long(0L);
      Long long2 = new Long(1226L);
      ClassUtil.nonNull(long1, long2);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<IOException> class1 = IOException.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassDescription(class0);
      ClassUtil.nameOf(class0);
      Class<Character> class1 = Character.TYPE;
      Class<Double> class2 = Double.class;
      ClassUtil.getClassMethods(class2);
      Class<Character> class3 = Character.TYPE;
      ClassUtil.isConcrete(class3);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLException sQLException0 = new SQLException((String) null, "com.fasterxml.jackson.annotation.JsonProperty$Access", sQLTimeoutException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLException0);
      ClassUtil.throwIfRTE(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.annotation.JsonProperty$Access");
      sQLIntegrityConstraintViolationException0.printStackTrace();
      ClassUtil.throwIfRTE(throwable0);
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.annotation.JsonProperty$Access
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassDescription(class0);
      ClassUtil.nameOf(class0);
      Class<Character> class1 = Character.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]`'n", "rkOb+7I[Ow]", (-978));
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTimeoutException0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]`'n
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      Class<IOException> class1 = IOException.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class1, class2);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isConcrete(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getDeclaringClass();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<?> class2 = ClassUtil.rawClass(javaType0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile("vals");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1744094291), objectMapper0, mockFileOutputStream0, byteArray0, (-1743199137), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("vals");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("vals", "vals", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLNonTransientConnectionException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: vals
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.classOf(class0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Integer> class1 = Integer.TYPE;
      Class<MapType> class2 = MapType.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.primitiveType(class1);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(25);
      ClassUtil.nullOrToString(class2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassDescription("S7Ry)[Z8+Ng");
      Class<Object> class1 = Object.class;
      ClassUtil.nameOf(class1);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.classNameOf(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isConcrete(class2);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isProxyType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{z]Q,m@");
      Byte byte0 = new Byte((byte)109);
      ClassUtil.nullOrToString("{z]Q,m@");
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("S7Ry)[Z8+Ng");
      Byte byte0 = new Byte((byte)109);
      ClassUtil.nullOrToString(byte0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.node.POJONode");
      Class<IOException> class0 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getGenericInterfaces(class1);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.primitiveType(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.getEnclosingClass(class4);
      Class<IOException> class5 = IOException.class;
      Class<Object> class6 = Object.class;
      ClassUtil.findSuperTypes(class5, class6);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.node.POJONode");
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vals");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("vals");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "U}-'$H");
      mockPrintWriter0.write("vals");
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream("U}-'$H");
      mockPrintStream0.print("vals");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jacks", "com.fasterxml.jacks", (-573));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("U}-'$H", ">}E;LGrXxjl,XKUObj", (-573), sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("vals", "entrySet", 1383);
      ClassUtil.getRootCause(sQLRecoverableException0);
      ClassUtil.classOf("com.fasterxml.jacks");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jacks", class0, "fi--'K| ;Tl1q");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from String \"com.fasterxml.jacks\": fi--'K| ;Tl1q
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassUtil.emptyIterator();
      Long long0 = new Long(1226L);
      ClassUtil.nonNull(long0, long0);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      TypeFactory.unknownType();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil.emptyIterator();
      Long long0 = new Long(1226L);
      ClassUtil.nonNull(long0, long0);
      Class<IOException> class0 = IOException.class;
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getDeclaredMethods(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      ClassUtil.nonNull(integer0, integer1);
      Class<Character> class2 = Character.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isProxyType(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      ClassUtil.findEnumType(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isLocalType(class0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Failed to find default constructor of class ");
      sQLIntegrityConstraintViolationException0.printStackTrace();
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperTypes(class1, class1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("h7<FmR'w@qu>&");
      ClassUtil.getPackageName(class0);
      Byte byte0 = new Byte((byte) (-3));
      ClassUtil.nullOrToString(class1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Failed to find default constructor of class ");
      sQLIntegrityConstraintViolationException0.printStackTrace();
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isLocalType(class0, false);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findEnumType(class4);
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Object> class5 = Object.class;
      ClassUtil.findClassAnnotations(class5);
      Class<ArrayType> class6 = ArrayType.class;
      ClassUtil.findConstructor(class6, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.getOuterClass(class2);
      Class<NoClass> class3 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class3, true);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotationsByType(class4);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getConstructors(class2);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getOuterClass(class3);
      Class<Long> class5 = Long.class;
      ClassUtil.getOuterClass(class5);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Cannot figure out type for EnumSet (odd JDK platform?)", "com.fasterxml.jackson.databind.type.CollectionType");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.node.POJONode");
      mockError0.toString();
      MockThrowable mockThrowable0 = new MockThrowable();
      mockError0.getCause();
      mockError0.initCause(mockThrowable0);
      Class<Double> class0 = Double.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasClass(class1, class2);
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassUtil.emptyIterator();
      Long long0 = new Long(1226L);
      ClassUtil.nonNull(long0, long0);
      Class<IOException> class0 = IOException.class;
      MockError mockError0 = new MockError((Throwable) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "d", (Throwable) null);
      ClassUtil.isJacksonStdImpl((Object) jsonMappingException0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getOuterClass(class2);
      Class<DecimalNode> class3 = DecimalNode.class;
      ClassUtil.getDeclaredFields(class3);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "d");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.nonNullString("3");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.rawClass(javaType0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.emptyIterator();
      Long long0 = new Long(1226L);
      ClassUtil.nonNull(long0, long0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(list0, class2);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<?> class4 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.nameOf(class4);
      Class<Short> class5 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class5, list0, "com.fasterxml.jackson.databind.SerializerProvider");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.util.LinkedList (of class java.lang.Short) must override method 'com.fasterxml.jackson.databind.SerializerProvider'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("@type");
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError("@type");
      mockError0.initCause((Throwable) null);
      MockError mockError1 = new MockError((Throwable) null);
      MockIOException mockIOException0 = new MockIOException("@type");
      ClassUtil.isJacksonStdImpl((Object) mockIOException0);
      Class<String> class1 = String.class;
      ClassUtil.isObjectOrPrimitive(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, mockError1);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.node.POJONode";
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.node.POJONode");
      Class<Integer> class0 = Integer.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      Class<Object> class4 = Object.class;
      ClassUtil.findEnumType(class4);
      ClassUtil.isCollectionMapOrArray(class3);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class5);
      Class<Character> class6 = Character.class;
      ClassUtil.findClassAnnotations(class6);
      Class<ArrayType> class7 = ArrayType.class;
      ClassUtil.findConstructor(class7, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor1.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getOuterClass(class1);
      Class<NoClass> class2 = NoClass.class;
      Class<NoClass> class3 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class3, true);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotationsByType(class4);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ClassUtil.getConstructors(class5);
      ClassUtil.getClassMethods(class5);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("@type");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRuntimeException0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'P';
      charArray0[2] = ';';
      charArray0[3] = 'h';
      charArray0[4] = 'f';
      charArray0[5] = ' ';
      charArray0[6] = '[';
      charArray0[7] = '@';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 3, (-407), true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "net.sf.cglib.proxy.java.lang.Object", (Throwable) mockRuntimeException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.Object
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isLocalType(class0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Failed to find default constructor of class ");
      sQLIntegrityConstraintViolationException0.printStackTrace();
      MockFile mockFile0 = new MockFile("R^/@S1ypzl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "eY2A so6";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("R^/@S1ypzl", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      mockPrintWriter0.append('g');
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jacks", "com.fasterxml.jacks", (-1743199137), sQLIntegrityConstraintViolationException0);
      sQLRecoverableException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<AccessPattern> class1 = AccessPattern.class;
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, javaType0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Object with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.primitiveType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class3 = IOException.class;
      ClassUtil.isProxyType(class3);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.rawClass(javaType0);
      ClassUtil.nonNullString("e0!,IQVKP@*");
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Short> class1 = Short.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class3 = Double.class;
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.findClassAnnotations(class2);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.findSuperTypes((Class<?>) null, class2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("S7Ry)[Z8+Ng");
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.node.POJONode");
      assertNotNull(mockError0);
      
      String string0 = mockError0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.fasterxml.jackson.databind.node.POJONode", string0);
      assertNotNull(string0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = mockError0.getCause();
      assertNull(throwable0);
      
      Throwable throwable1 = mockError0.initCause(mockThrowable0);
      assertNotSame(mockThrowable0, throwable1);
      assertNotSame(throwable1, mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("com.fasterxml.jackson.databind.node.POJONode", throwable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.fasterxml.jackson.databind.node.POJONode", throwable1.toString());
      assertFalse(throwable1.equals((Object)mockThrowable0));
      assertNotNull(throwable1);
      
      MockError mockError1 = new MockError(mockError0);
      assertFalse(mockError1.equals((Object)mockError0));
      assertNotNull(mockError1);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) mockError1);
      assertNotSame(mockError0, mockError1);
      assertNotSame(mockError1, mockError0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(boolean0);
      
      Class<Double> class0 = Double.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Character> class1 = Character.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<?> class3 = ClassUtil.getOuterClass(class0);
      assertNull(class3);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(0, fieldArray0.length);
      assertNotNull(fieldArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("3");
      assertEquals("3", string0);
      assertNotNull(string0);
      
      Throwable throwable0 = null;
      Throwable throwable1 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable1);
      
      Throwable throwable2 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable2);
      
      Class<Integer> class0 = Integer.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class2);
      assertFalse(boolean0);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertEquals("class java.lang.Exception", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertNotNull(class4);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class4);
      assertEquals("class java.lang.Exception", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<ArrayType> class5 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class5, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertNotNull(constructor0);
      
      Class<Annotation> class5 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class5);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<ReferenceType> class6 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class6);
      assertEquals(34, methodArray0.length);
      assertNotNull(methodArray0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = ClassUtil.classNameOf(object0);
      assertEquals("`java.lang.Object`", string1);
      assertNotNull(string1);
      
      Class<NoClass> class1 = NoClass.class;
      Class<?> class2 = ClassUtil.primitiveType(class0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("long", class2.toString());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = ClassUtil.backticked("com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value");
      assertEquals("`com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value`", string0);
      assertNotNull(string0);
      
      Class<Short> class0 = Short.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertNotNull(list0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(" - ZnObHV{", sQLInvalidAuthorizationSpecException0);
      assertNotNull(mockRuntimeException0);
      
      Throwable[] throwableArray0 = sQLInvalidAuthorizationSpecException0.getSuppressed();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('/');
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      mockPrintStream1.println("com.fasterxml.jackson.annotation.JsonIgnoreProperties$Value");
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      mockRuntimeException0.printStackTrace((PrintStream) mockPrintStream1);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      StackTraceElement[] stackTraceElementArray0 = mockRuntimeException0.getStackTrace();
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException1, "]B&Jt4a>3VG&yp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]B&Jt4a>3VG&yp
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      String string0 = "s(ubt?M;Vwom@fKlI";
      int int0 = 52;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s(ubt?M;Vwom@fKlI", "'b`;p", 52);
      assertEquals(52, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("'b`;p", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string1 = null;
      try { 
        MockURI.URI("'b`;p", (String) null, "s(ubt?M;Vwom@fKlI", "'b`;p");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 'b`;p:s(ubt%3FM;Vwom@fKlI#'b%60;p
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("keyType", "keyType", sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals("keyType", sQLTransactionRollbackException0.getMessage());
      assertEquals("keyType", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: keyType", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("|A|6jM");
      assertNotNull(mockRuntimeException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("|A|6jM", "|A|6jM", 0, mockRuntimeException0);
      assertEquals("java.sql.SQLNonTransientException: |A|6jM", sQLNonTransientException0.toString());
      assertEquals("|A|6jM", sQLNonTransientException0.getSQLState());
      assertEquals("|A|6jM", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("|A|6jM", "m4[76W]7MS:Zr%", "m4[76W]7MS:Zr%", 0);
      assertEquals("|A|6jM.m4[76W]7MS:Zr%(m4[76W]7MS:Zr%:0)", stackTraceElement0.toString());
      assertEquals("|A|6jM", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("m4[76W]7MS:Zr%", stackTraceElement0.getMethodName());
      assertEquals("m4[76W]7MS:Zr%", stackTraceElement0.getFileName());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Z|>Q=;kG<oPC!.Q", "ETD;U{drbd1NxSZRI", (String) null, 0);
      assertEquals("Z|>Q=;kG<oPC!.Q", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("ETD;U{drbd1NxSZRI", stackTraceElement1.getMethodName());
      assertNull(stackTraceElement1.getFileName());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("Z|>Q=;kG<oPC!.Q.ETD;U{drbd1NxSZRI(Unknown Source)", stackTraceElement1.toString());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("|A|6jM", "vals", "entrySet", 0);
      assertEquals("vals", stackTraceElement2.getMethodName());
      assertEquals(0, stackTraceElement2.getLineNumber());
      assertEquals("|A|6jM", stackTraceElement2.getClassName());
      assertEquals("entrySet", stackTraceElement2.getFileName());
      assertEquals("|A|6jM.vals(entrySet:0)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      assertEquals("java.sql.SQLNonTransientException: |A|6jM", sQLNonTransientException0.toString());
      assertEquals("|A|6jM", sQLNonTransientException0.getSQLState());
      assertEquals("|A|6jM", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(3, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.node.POJONode");
      assertNotNull(mockError0);
      
      String string0 = mockError0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.fasterxml.jackson.databind.node.POJONode", string0);
      assertNotNull(string0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = mockError0.initCause(mockThrowable0);
      assertNotSame(mockThrowable0, throwable0);
      assertNotSame(throwable0, mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.node.POJONode", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.fasterxml.jackson.databind.node.POJONode", throwable0.toString());
      assertFalse(throwable0.equals((Object)mockThrowable0));
      assertNotNull(throwable0);
      
      MockError mockError1 = new MockError(mockError0);
      assertFalse(mockError1.equals((Object)mockError0));
      assertNotNull(mockError1);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) mockError1);
      assertNotSame(mockError0, mockError1);
      assertNotSame(mockError1, mockError0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(boolean0);
      
      Class<Double> class0 = Double.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException0.getMessage());
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertNotNull(sQLClientInfoException0);
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)ClassUtil.throwIfIOE(sQLClientInfoException0);
      assertNotSame(mockThrowable0, throwable0);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertFalse(mockThrowable0.equals((Object)throwable0));
      assertNotNull(sQLClientInfoException1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("3");
      assertEquals("3", string0);
      assertNotNull(string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor0 = classUtil_Ctor0.getConstructor();
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<String> class1 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertEquals(16, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<?> class2 = ClassUtil.classOf((Object) null);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<CollectionType> class1 = CollectionType.class;
      Class<CollectionType> class2 = ClassUtil.nonNull(class0, class1);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertSame(class1, class0);
      assertSame(class1, class2);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertEquals(1, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionType", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<?> class3 = ClassUtil.classOf(class2);
      assertSame(class0, class1);
      assertSame(class0, class2);
      assertSame(class1, class0);
      assertSame(class1, class2);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertEquals(1, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionType", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Class", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertNotNull(class3);
      
      Class<Object> class4 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class4);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper0);
      
      LongNode longNode0 = LongNode.valueOf(1077L);
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isShort());
      assertEquals(1077.0, longNode0.doubleValue(), 0.01);
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.canConvertToLong());
      assertEquals((short)1077, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(1077, longNode0.intValue());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertEquals(1077.0F, longNode0.floatValue(), 0.01F);
      assertEquals(1077L, longNode0.longValue());
      assertFalse(longNode0.isInt());
      assertNotNull(longNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(longNode0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isShort());
      assertEquals(1077.0, longNode0.doubleValue(), 0.01);
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.canConvertToLong());
      assertEquals((short)1077, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(1077, longNode0.intValue());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertEquals(1077.0F, longNode0.floatValue(), 0.01F);
      assertEquals(1077L, longNode0.longValue());
      assertFalse(longNode0.isInt());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNotNull(jsonParser0);
      
      String string0 = "NULL";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "NULL");
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isShort());
      assertEquals(1077.0, longNode0.doubleValue(), 0.01);
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.canConvertToLong());
      assertEquals((short)1077, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(1077, longNode0.intValue());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertEquals(1077.0F, longNode0.floatValue(), 0.01F);
      assertEquals(1077L, longNode0.longValue());
      assertFalse(longNode0.isInt());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // NULL
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Iterator<MapLikeType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Long long0 = new Long(1226L);
      assertEquals(1226L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = ClassUtil.nonNull(long0, long0);
      assertEquals(1226L, (long)long1);
      assertNotNull(long1);
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.hasClass(list0, class2);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(16, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<Short> class1 = Short.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      String string0 = "boolean";
      try { 
        MockURL.URL("boolean", "boolean", (-128), "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-128
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Failed to find default constructor of class ");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("eY2A so6", "R^/@S1ypzl", sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("R^/@S1ypzl", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: eY2A so6", sQLDataException0.toString());
      assertEquals("eY2A so6", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfRTE(sQLDataException0);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("R^/@S1ypzl", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: eY2A so6", sQLDataException0.toString());
      assertEquals("eY2A so6", sQLDataException0.getMessage());
      assertEquals("eY2A so6", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: eY2A so6", sQLDataException1.toString());
      assertEquals("R^/@S1ypzl", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNotNull(sQLDataException1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(12, methodArray0.length);
      assertNotNull(methodArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwRootCauseIfIOE(sQLDataException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to find default constructor of class ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("R^/@S1ypzl", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: eY2A so6", sQLDataException0.toString());
      assertEquals("eY2A so6", sQLDataException0.getMessage());
      assertEquals("eY2A so6", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: eY2A so6", sQLDataException1.toString());
      assertEquals("R^/@S1ypzl", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to find default constructor of class ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("Failed to find default constructor of class ", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to find default constructor of class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<Float> class2 = Float.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(boolean0);
      
      Class<Object> class4 = Object.class;
      boolean boolean1 = false;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class4, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotatedType0);
      
      Class<Annotation> class5 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation annotation0 = constructor0.getAnnotation(class5);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNull(annotation0);
      
      int int0 = constructor0.getParameterCount();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, int0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertSame(annotationArray2, annotationArray0);
      assertSame(annotationArray2, annotationArray1);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray2.length);
      assertNotNull(annotationArray2);
      
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.quotedOr((Object) null, "O8~Xa}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("O8~Xa}", string1);
      assertNotNull(string1);
      
      Class<String> class6 = String.class;
      Class<Short> class7 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class6, class7);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(class1));
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Object> class1 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      Class<Object> class3 = Object.class;
      boolean boolean0 = ClassUtil.isProxyType(class3);
      assertSame(class3, class1);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      Class<IOException> class4 = IOException.class;
      boolean boolean1 = ClassUtil.isProxyType(class4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<String> class5 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class5, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Class<?> class6 = classUtil_Ctor0.getDeclaringClass();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(class6.isAnnotation());
      assertEquals("class java.lang.String", class6.toString());
      assertEquals(17, class6.getModifiers());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isPrimitive());
      assertNotNull(class6);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      Class<?> class7 = ClassUtil.rawClass(javaType0);
      assertNotSame(class7, class6);
      assertFalse(class7.isAnnotation());
      assertEquals("class java.lang.Object", class7.toString());
      assertFalse(class7.isPrimitive());
      assertFalse(class7.isEnum());
      assertFalse(class7.isSynthetic());
      assertFalse(class7.isArray());
      assertEquals(1, class7.getModifiers());
      assertFalse(class7.isInterface());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(class7.equals((Object)class6));
      assertNotNull(class7);
      
      String string2 = ClassUtil.nonNullString("e0!,IQVKP@*");
      assertFalse(string2.equals((Object)string0));
      assertEquals("e0!,IQVKP@*", string2);
      assertNotNull(string2);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<?> class8 = ClassUtil.primitiveType(class0);
      assertNull(class8);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = ClassUtil.backticked("serialVersionUID");
      assertEquals("`serialVersionUID`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.isConcrete(class0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Class<Double> class1 = Double.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(resolvedRecursiveType0);
      
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-1663));
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      Collection<Object> collection0 = coreXMLDeserializers_Std0.getKnownPropertyNames();
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNull(collection0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(accessPattern0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(javaType0);
      
      Class<?> class2 = ClassUtil.rawClass(javaType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(class2);
      
      Class<IOException> class3 = IOException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<NoClass> class4 = NoClass.class;
      Class<?> class5 = ClassUtil.getDeclaringClass(class4);
      assertNull(class5);
      
      String string0 = ClassUtil.quotedOr(javaType0, "ldh2/m");
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, javaTypeArray0.length);
      assertEquals("\"[recursive type; UNRESOLVED\"", string0);
      assertNotNull(string0);
      
      Class<Byte> class6 = Byte.class;
      boolean boolean4 = ClassUtil.isCollectionMapOrArray(class6);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      Class<CollectionLikeType> class7 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class7, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      Class<Character> class0 = Character.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Character", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Integer`", string0);
      assertNotNull(string0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("vals");
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: vals", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("vals", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vals");
      assertNotNull(mockFileOutputStream0);
      
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: vals", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("vals", sQLTransactionRollbackException0.getMessage());
      assertNotNull(spliterator0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.write("vals");
      mockFileOutputStream0.flush();
      mockPrintWriter0.print(true);
      mockPrintWriter0.println("nmp9JDxuq]EEzoN");
      sQLTransactionRollbackException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: vals", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("vals", sQLTransactionRollbackException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vals
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`java.lang.String`", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.nameOf(class0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("`java.lang.String`", string1);
      assertNotNull(string1);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      String string2 = ClassUtil.classNameOf(class0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`java.lang.Class`", string2);
      assertNotNull(string2);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(77, methodArray0.length);
      assertNotNull(methodArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<Error> class2 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_", "_");
      assertEquals("java.sql.SQLFeatureNotSupportedException: _", sQLFeatureNotSupportedException0.toString());
      assertEquals("_", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("_", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string0 = "&z@(XD ";
      MockFile mockFile0 = new MockFile("&z@(XD ", "_");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(false, false);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/&z@(XD ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/&z@(XD /_", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("_", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "`=#pZhS(Qg>S");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)sQLFeatureNotSupportedException0.initCause((Throwable) null);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: _", sQLFeatureNotSupportedException0.toString());
      assertEquals("_", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("_", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: _", sQLFeatureNotSupportedException1.toString());
      assertEquals("_", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("_", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      boolean boolean1 = mockFile0.setExecutable(false, false);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/&z@(XD ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/&z@(XD /_", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("_", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URL uRL0 = mockFile0.toURL();
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/&z@(XD ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/&z@(XD /_", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("_", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertNotNull(uRL0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "[]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // []
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, true);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertNotNull(constructor0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) constructor0;
      objectArray0[2] = (Object) list0;
      Class class3 = (Class)ClassUtil.nonNull((Object) class2, (Object) constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Error", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertNotNull(class3);
      
      objectArray0[3] = (Object) class3;
      objectArray0[4] = (Object) constructor0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      DataTruncation dataTruncation0 = new DataTruncation((-956), true, true, (-956), 1430);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("keyType", (String) null, dataTruncation0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: keyType", sQLTransientConnectionException0.toString());
      assertEquals("keyType", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      MockIOException mockIOException0 = new MockIOException("keyType", sQLTransientConnectionException0);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      Class<Long> class0 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) arrayType1, (-3132));
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLDataException (through reference chain: com.fasterxml.jackson.databind.type.ArrayType[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      String string0 = ClassUtil.getPackageName(class0);
      String string1 = ClassUtil.nullOrToString("com.fasterxml.jackson.databind.type");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.nameOf(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.canBeABeanType(class1);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.findSuperTypes((Class<?>) null, class2);
      String string0 = "S7Ry)[Z8+Ng";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("S7Ry)[Z8+Ng");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
  }
}
