/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:41:48 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Spliterator;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(enumSet0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockIOException mockIOException0 = new MockIOException();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory1, true);
      ObjectMapper objectMapper1 = new ObjectMapper();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, bufferedOutputStream0);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonFactory jsonFactory4 = jsonFactory3.setCharacterEscapes((CharacterEscapes) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((OutputStream) null, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<?> class0 = ClassUtil.classOf(accessPattern0);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.util.AccessPattern with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "net.sf.cglib.proxy.java.lang.reflect.AccessibleObject");
      MockError mockError0 = new MockError((Throwable) null);
      ClassUtil.getClassDescription(mockError0);
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      SimpleType simpleType1 = referenceType2.withContentValueHandler(referenceType1);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType0, " is not a primitive type", "Unrecognized primitive type: ");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) iOContext0, "Unrecognized primitive type: ");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id ' is not a primitive type' as a subtype of [simple type, class java.sql.ClientInfoStatus]: Unrecognized primitive type:  (through reference chain: com.fasterxml.jackson.core.io.IOContext[\"Unrecognized primitive type: \"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      Byte byte0 = new Byte((byte)3);
      ClassUtil.classNameOf(byte0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      objectMapper0.readerFor(class0);
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("com.fasterxml.jackson.annotation.JsonInclude$Value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"com.fasterxml.jackson.annotation.JsonInclude$Value\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      objectMapper1.writeValueAsBytes(objectMapper_DefaultTyping0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1264);
      intArray0[1] = (-1264);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      objectMapper0.writeValueAsBytes(batchUpdateException0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isConcrete(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1264));
      placeholderForType0.isTypeOrSuperTypeOf(class0);
      ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<ArrayNode> class0 = ArrayNode.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<AccessibleObject> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      EnumSet.copyOf(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      MockIOException mockIOException0 = new MockIOException();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern3 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern3, accessPattern0);
      HashSet<ArrayType> hashSet0 = new HashSet<ArrayType>();
      PriorityQueue<ArrayType> priorityQueue0 = new PriorityQueue<ArrayType>(hashSet0);
      enumSet0.containsAll(priorityQueue0);
      EnumSet.copyOf(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.backticked("");
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getConstructors(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getEnclosingClass(class2);
      Object object0 = new Object();
      ClassUtil.isCollectionMapOrArray(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.primitiveType(class3);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.java.lang.Long", "``", (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<Error> class2 = Error.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<NoClass> class0 = NoClass.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      ClassUtil.getOuterClass(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-5));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericParameterTypes();
      ClassUtil.isConcrete((Member) constructor0);
      Class<Double> class1 = Double.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.nonNull((IOException) null, (IOException) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError("kLtsX", mockRuntimeException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockRuntimeException0.addSuppressed(mockError0);
      ClassUtil.getClassDescription(mockRuntimeException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "net.sf.cglib.proxy.java.lang.reflect.AccessibleObject");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)2634);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("NFzeL^=GD.x");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeBase");
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      MockFile mockFile0 = new MockFile("NFzeL^=GD.x/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "NFzeL^=GD.x/");
      byte[] byteArray0 = new byte[0];
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.quotedOr((Object) null, (String) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1807771059), objectMapper2, printStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockError mockError0 = new MockError("{(3jB$*C83/b/4d");
      Class<CollectionType> class0 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(mockError0, class0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `org.evosuite.runtime.mock.java.lang.MockError`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = false;
      Class<RuntimeException> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class1);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class1);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      enumMap0.put(accessPattern0, (MapLikeType) null);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.getDeclaringClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Default constructor for ");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!.E~HvVs2Y},sH#H", "!.E~HvVs2Y},sH#H", 55296);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // !.E~HvVs2Y},sH#H
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.findEnumType(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class1);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<NoClass> class0 = NoClass.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      Class<Object> class1 = Object.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<ArrayNode> class0 = ArrayNode.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Module> class0 = Module.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findEnumType(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "205:");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.type");
      System.setCurrentTimeMillis(9223372036854775807L);
      ClassUtil.getConstructors(class0);
      ClassUtil.primitiveType(class0);
      Method method0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("): only regular white space (\r, \n, \t) is allowed between tokens");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[Hv.eO8D~3B", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", sQLTransientException0);
      ClassUtil.throwIfError(sQLNonTransientException0);
      ClassUtil.isJacksonStdImpl((Object) "): only regular white space (\r, \n, \t) is allowed between tokens");
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("org.evosuite.runtime");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "org.evosuite.runtime", (-3890), mockIOException0);
      mockIOException0.initCause(sQLNonTransientException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.evosuite.runtime", "org.evosuite.runtime", mockIOException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT");
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      ClassUtil.getConstructors(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)2893);
      ClassUtil.hasClass(short0, class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      List<Class<?>> list0 = new Stack<Class<Integer>>();
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      MockFile mockFile0 = new MockFile("JSON", "MAc!ev&%D;x4qEv,/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "JSON", "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidFormatException): Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from String \"JSON\": JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 7);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      MockIOException mockIOException0 = new MockIOException("A7^U\"6?cvA#");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) bufferedReader0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.classNameOf(class2);
      ClassUtil.getPackageName(class2);
      ClassUtil.getClassMethods(class0);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class3);
      int[] intArray0 = new int[4];
      intArray0[0] = 3132;
      intArray0[1] = 474;
      intArray0[2] = (-708825413);
      intArray0[3] = (-641314725);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`java.lang.Class`", intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "R:BFz{-:d$[}?T61=!", intArray0, batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException1, "net.sf.cglib.proxy.com.fasterxml.jackson.core.io.CharacterEscapes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.core.io.CharacterEscapes
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getGenericInterfaces(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      SimpleModule simpleModule0 = new SimpleModule("a\"cTFcGOV~$\b!Qx");
      Class<ReferenceType> class2 = ReferenceType.class;
      Module.SetupContext module_SetupContext0 = mock(Module.SetupContext.class, new ViolatedAssumptionAnswer());
      simpleModule0.setupModule(module_SetupContext0);
      JsonDeserializer<ReferenceType> jsonDeserializer0 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      simpleModule0.addDeserializer(class2, (JsonDeserializer<? extends ReferenceType>) jsonDeserializer0);
      mapType0.withContentValueHandler(simpleModule0);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, false);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf(class1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getClassMethods(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-605166913);
      intArray0[1] = (-971);
      intArray0[2] = (-1418);
      intArray0[3] = 40;
      intArray0[4] = 771;
      intArray0[5] = 1536;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.lang.reflect.Ac", intArray0);
      ClassUtil.throwIfRTE(batchUpdateException0);
      Class<Character> class1 = Character.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class2 = Annotation.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      javaTypeArray0[2] = (JavaType) arrayType0;
      javaTypeArray0[3] = (JavaType) arrayType0;
      Class<Module> class3 = Module.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class2, class3);
      javaTypeArray0[4] = (JavaType) collectionLikeType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[3], javaTypeArray0[1]);
      CollectionLikeType collectionLikeType1 = collectionType0.withTypeHandler(referenceType0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Float> class0 = Float.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.canBeABeanType(class1);
      Class<Character> class2 = Character.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      ClassUtil.getDeclaringClass(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ClassUtil.getClassDescription(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.Module is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<ArrayType> class0 = ArrayType.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(76, 9999);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class2 = HashMap.class;
      Class<IOException> class3 = IOException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1090));
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapLikeType0, mapLikeType0);
      MapType mapType0 = typeFactory1.constructMapType((Class<? extends Map>) class2, (JavaType) collectionLikeType0, (JavaType) collectionLikeType0);
      MapType mapType1 = mapType0.withKeyType(collectionLikeType0);
      MapType mapType2 = mapType1.withKeyType(simpleType0);
      MapType mapType3 = mapType1.withTypeHandler(mapType2);
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isBogusClass(class0);
      Object object0 = new Object();
      ClassUtil.primitiveType(class0);
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<Error> class0 = Error.class;
      ClassUtil.createInstance(class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.getOuterClass(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("java.lang.RuntimeEx", (Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.RuntimeEx
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes(class1, class2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("l<*|'UM$#h:)H", "l<*|'UM$#h:)H", (-2459));
      SQLDataException sQLDataException0 = new SQLDataException("l<*|'UM$#h:)H", "l<*|'UM$#h:)H", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // l<*|'UM$#h:)H
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, bufferedOutputStream0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      ClassUtil.getClassDescription(boolean0);
      Class<Error> class0 = Error.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Float float0 = new Float(260.0075292021768);
      ClassUtil.isJacksonStdImpl((Object) class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" to ");
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", " to ", sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLTransientException0);
      MockThrowable mockThrowable0 = new MockThrowable(" to ", sQLTimeoutException0);
      MockError mockError0 = new MockError(" to ", mockThrowable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, " to ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      System.setCurrentTimeMillis((-1000L));
      ClassUtil.getDeclaringClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-356), objectMapper1, bufferedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("#DSeF8J2m{U", class0, "#DSeF8J2m{U");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) pipedOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from String \"#DSeF8J2m{U\": #DSeF8J2m{U
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      Class<Error> class1 = Error.class;
      ClassUtil.createInstance(class1, false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Character.valueOf('\\');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLInvalidAuthorizationSpecException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getPackageName(class1);
      Class<ArrayNode> class2 = ArrayNode.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.canBeABeanType(class1);
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotationsByType(class4);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)2634);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      MockFile mockFile0 = new MockFile("NFzeL^=GD.x/");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "NFzeL^=GD.x/");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1807771059), objectMapper2, printStream0, byteArray0, 2, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, " H", jsonLocation0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" H", " H", jsonMappingException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" H", sQLTransientException0);
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory1);
      ArrayNode arrayNode0 = objectNode0.withArray(" H");
      List<JsonNode> list0 = arrayNode0.findParents(" H");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      ClassUtil.nonNull(arrayNode1, arrayNode0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getPackageName(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Integer> class0 = Integer.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      ClassUtil.nonNull((Double) null, double1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isBogusClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isLocalType(class1, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 1487;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, "java.lang.reflect.Ac", intArray0, batchUpdateException1);
      batchUpdateException1.spliterator();
      batchUpdateException0.getLocalizedMessage();
      batchUpdateException1.setNextException(batchUpdateException0);
      batchUpdateException0.getSuppressed();
      batchUpdateException2.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete((Member) constructor0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      iOContext0.allocNameCopyBuffer((-1817));
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 160;
      intArray0[3] = 3;
      intArray0[4] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "JSON", intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (JsonMappingException.Reference) null);
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Object object0 = new Object();
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.getClassMethods(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      Class<Error> class2 = Error.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("n_~jD>rh6dkhh &Ckx>", "Cannot access ", 22);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("n_~jD>rh6dkhh &Ckx>", "Cannot access ", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: n_~jD>rh6dkhh &Ckx>
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis((byte) (-101));
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, false);
      MockException mockException0 = new MockException();
      MockThrowable mockThrowable0 = new MockThrowable(mockException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) class0, "net.sf.cglib.proxy.java.lang.RuntimeException");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable (through reference chain: java.lang.Double[\"net.sf.cglib.proxy.java.lang.RuntimeException\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = new Object();
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.isJacksonStdImpl((Object) class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.nonNull(double0, double0);
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<MapType> class0 = MapType.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.nonNullString("[]");
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getEnclosingClass(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.hasClass(list0, class2);
      Object object0 = new Object();
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.primitiveType(class1);
      ClassUtil.findSuperTypes((Class<?>) null, class2, list0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.nameOf(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.hasClass(class1, class0);
      Object object0 = new Object();
      Class<Character> class2 = Character.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Void> class0 = Void.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "org.hibernate.proxy.", "90E");
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<LinkedList> class2 = LinkedList.class;
      JavaType javaType0 = null;
      Class<Character> class3 = Character.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class3, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Character with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Void> class0 = Void.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(" has no default (no arg) constructor", " has no default (no arg) constructor", sQLInvalidAuthorizationSpecException0);
      Class<?> class0 = ClassUtil.classOf(sQLInvalidAuthorizationSpecException0);
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.hasClass(class1, class1);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      Object object0 = new Object();
      ClassUtil.getRootCause(sQLDataException0);
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.nonNullString(" has no default (no arg) constructor");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Short> class2 = Short.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.isJacksonStdImpl((Object) class1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)75, objectReader0, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2893), 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 57343;
      intArray0[1] = (-434);
      intArray0[2] = 15;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jacks", "Z", sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Z", " is not a primitive type", sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Z", "Z", 1, intArray0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: Z
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.getEnclosingClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Double> class2 = Double.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class2);
      ClassUtil.hasClass(jsonMappingException0, (Class<?>) null);
      Object object0 = new Object();
      Class<Double> class3 = Double.class;
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getPackageName(class1);
      Float float0 = new Float(0.6F);
      ClassUtil.classOf((Object) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(" has no default (no arg) constructor", "FsS[._jFEt", sQLInvalidAuthorizationSpecException0);
      ClassUtil.quotedOr((Object) null, " is not a primitive type");
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getDeclaredAnnotations();
      ClassUtil.getPackageName(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete((Member) constructor0);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.getStackTrace();
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.backticked((String) null);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.canBeABeanType(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getPackageName(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class3);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      mockThrowable0.getSuppressed();
      MockThrowable.getDefaultStackTrace();
      mockThrowable0.fillInStackTrace();
      MockThrowable mockThrowable1 = new MockThrowable();
      Float float0 = new Float(0.6F);
      ClassUtil.classOf(float0);
      ClassUtil.isConcrete(class3);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
      classUtil_Ctor0.getDeclaredAnnotations();
      Integer integer0 = new Integer(0);
      ClassUtil.classNameOf(integer0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isProxyType(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.ext.DOMDeserializer$DocumentDeserializer", "java.lang.Float");
      SQLDataException sQLDataException0 = new SQLDataException("J2[$Knj#AdVL)f", "not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow", sQLNonTransientException0);
      ClassUtil.backticked("12PTFChun:y8xqc=6");
      Class<Character> class1 = Character.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.getEnclosingClass(class0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.isLocalType(class3, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("J2[$Knj#AdVL)f");
      ClassUtil.isJacksonStdImpl((Object) null);
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Double double0 = new Double((-9.223372036854776E18));
      ClassUtil.nonNull(double0, double0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getDeclaredAnnotations();
      ClassUtil.getPackageName(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Error> class2 = Error.class;
      ClassUtil.getGenericInterfaces(class2);
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      ClassUtil.getDeclaringClass(class0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<String> class3 = String.class;
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K]cv");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Error");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Float> class2 = Float.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Long> class3 = Long.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class3);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "org.hibernate.proxy.java.lang.Error", mapLikeType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 187;
      intArray0[2] = (-1853514379);
      intArray0[3] = (-1884);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.", "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder", intArray0);
      batchUpdateException0.getNextException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "9EPVfyI%%[t<?B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, true);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getDeclaredAnnotations();
      Class<Byte> class3 = Byte.class;
      ClassUtil.findConstructor(class3, false);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.nameOf(class4);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.findConstructor(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      ClassUtil.nonNull(double1, double0);
      Class<Character> class1 = Character.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.reflect.A");
      Class<IOException> class2 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassUtil.backticked("l");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getConstructors(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getEnclosingClass(class1);
      Object object0 = new Object();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(" has no default (no arg) constructor", "FsS[._jFEt", sQLInvalidAuthorizationSpecException0);
      ClassUtil.classOf(sQLInvalidAuthorizationSpecException0);
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2584));
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.invalidTypeIdException(placeholderForType0, "local/anonymous", "net.sf.cglib.proxy.java.lang.RuntimeException");
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.rawClass(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(" has no default (no arg) constructor", "FsS[._jFEt", sQLInvalidAuthorizationSpecException0);
      ClassUtil.backticked("FsS[._jFEt");
      Class<Character> class0 = Character.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isLocalType(class1, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" has no default (no arg) constructor");
      ClassUtil.isJacksonStdImpl((Object) sQLIntegrityConstraintViolationException0);
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.nameOf(class0);
      Short short0 = new Short((short) (-7));
      Class<?> class1 = ClassUtil.classOf(short0);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.isJacksonStdImpl(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2584));
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.invalidTypeIdException(placeholderForType0, (String) null, (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.Double", "`com.fasterxml.jackson.databind.type.CollectionLikeType`", (short) (-7), jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' as a subtype of $-2583
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.CollectionLikeType`", string0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<Error> class3 = Error.class;
      String string1 = ClassUtil.nameOf((Class<?>) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[null]", string1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = (SQLIntegrityConstraintViolationException)ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException1);
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException2.toString());
      assertNull(sQLIntegrityConstraintViolationException2.getMessage());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException2, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException2, sQLIntegrityConstraintViolationException0);
      
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertNotNull(class4);
      assertEquals("class java.lang.Throwable", class4.toString());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = (SQLIntegrityConstraintViolationException)ClassUtil.getRootCause(sQLIntegrityConstraintViolationException1);
      assertNotNull(sQLIntegrityConstraintViolationException3);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException3.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException3.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException3.getMessage());
      assertNull(sQLIntegrityConstraintViolationException3.getSQLState());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException3);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException3);
      assertSame(sQLIntegrityConstraintViolationException3, sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException3, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException3, sQLIntegrityConstraintViolationException2);
      
      Class<AccessibleObject> class5 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isBogusClass((Class<?>) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class3, false);
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(constructor1);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertSame(class3, class2);
      assertNotSame(constructor1, constructor0);
      
      Annotation[] annotationArray0 = constructor1.getDeclaredAnnotations();
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertSame(class3, class2);
      assertNotSame(constructor1, constructor0);
      
      Class<IOException> class4 = IOException.class;
      Short short0 = new Short((short) (-3551));
      assertNotNull(short0);
      assertEquals((short) (-3551), (short)short0);
      
      Class<Object> class5 = Object.class;
      boolean boolean2 = ClassUtil.hasClass(short0, class5);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(class5, class2);
      assertSame(class5, class3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = ClassUtil.isCollectionMapOrArray(class4);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-9.223372036854776E18));
      assertNotNull(double0);
      assertEquals((-9.223372036854776E18), (double)double0, 0.01);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertNotNull(double1);
      assertEquals((-9.223372036854776E18), (double)double1, 0.01);
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertNotNull(object0);
      assertEquals('\u0000', object0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<Boolean> class1 = Boolean.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(16, methodArray0.length);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Iterator<AccessibleObject> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Void> class0 = Void.class;
      boolean boolean2 = ClassUtil.isProxyType(class0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      boolean boolean3 = ClassUtil.isConcrete(class2);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<SimpleType> class1 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Double double0 = new Double((-9.223372036854776E18));
      assertNotNull(double0);
      assertEquals((-9.223372036854776E18), (double)double0, 0.01);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertNotNull(double1);
      assertEquals((-9.223372036854776E18), (double)double1, 0.01);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Class<Float> class3 = Float.class;
      String string0 = ClassUtil.getPackageName(class3);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      Class<AccessPattern> class4 = AccessPattern.class;
      Constructor<AccessPattern> constructor1 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor1);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Class<JsonMappingException> class5 = JsonMappingException.class;
      Class<?> class6 = ClassUtil.getDeclaringClass(class5);
      assertNull(class6);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Character character0 = new Character('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Float float0 = new Float(260.0075292021768);
      assertNotNull(float0);
      assertEquals(260.00754F, (float)float0, 0.01F);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      Float float1 = new Float((float) 2);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      Class<Object> class0 = Object.class;
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      assertNotNull(serializerProvider0);
      
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(serializerProvider0);
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      Class<SimpleType> class1 = SimpleType.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(mockIOException0);
      assertNotNull(throwable0);
      assertSame(mockIOException0, throwable0);
      assertSame(throwable0, mockIOException0);
      
      String string0 = ClassUtil.nullOrToString(sQLIntegrityConstraintViolationException0);
      assertNotNull(string0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      
      Class<Boolean> class2 = Boolean.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class2, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
      
      Class<Void> class2 = Void.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      Class<JsonMappingException> class3 = JsonMappingException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class3, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<IOException>[] classArray0 = (Class<IOException>[]) Array.newInstance(Class.class, 9);
      Class<IOException> class4 = IOException.class;
      classArray0[0] = class4;
      Class<IOException> class5 = IOException.class;
      classArray0[1] = class5;
      Class<IOException> class6 = IOException.class;
      classArray0[2] = class6;
      Class<IOException> class7 = IOException.class;
      classArray0[3] = class7;
      Class<IOException> class8 = IOException.class;
      classArray0[4] = class8;
      Class<IOException> class9 = IOException.class;
      classArray0[5] = class9;
      Class<IOException> class10 = IOException.class;
      classArray0[6] = class10;
      Class<IOException> class11 = IOException.class;
      classArray0[7] = class11;
      Class<IOException> class12 = IOException.class;
      classArray0[8] = class12;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNull(class1);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Double double0 = Double.valueOf(2.147483647E9);
      assertNotNull(double0);
      assertEquals(2.147483647E9, (double)double0, 0.01);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertNotNull(double1);
      assertEquals(2.147483647E9, (double)double1, 0.01);
      
      String string0 = ClassUtil.classNameOf((Object) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = ClassUtil.backticked("[]");
      assertNotNull(string0);
      assertEquals("`[]`", string0);
      
      Class<ReferenceType> class1 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(34, methodArray0.length);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<?> class3 = ClassUtil.getEnclosingClass(class0);
      assertNull(class3);
      
      Class<IOException> class4 = IOException.class;
      boolean boolean0 = ClassUtil.hasClass(list0, class4);
      assertFalse(boolean0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      Class<Error> class0 = Error.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string1 = ClassUtil.isLocalType(class0, false);
      assertNull(string1);
      
      Class<SimpleType> class2 = SimpleType.class;
      String string2 = ClassUtil.canBeABeanType(class2);
      assertNull(string2);
      
      Class<ReferenceType> class3 = ReferenceType.class;
      String string3 = ClassUtil.getPackageName(class3);
      assertNotNull(string3);
      assertEquals("com.fasterxml.jackson.databind.type", string3);
      
      Float float0 = new Float(0.6F);
      assertNotNull(float0);
      assertEquals(0.6F, (float)float0, 0.01F);
      
      Class<?> class4 = ClassUtil.classOf(float0);
      assertNotNull(class4);
      assertEquals("class java.lang.Float", class4.toString());
      assertEquals(17, class4.getModifiers());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      
      Class<AccessibleObject> class5 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNotNull(constructor0);
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Class<Object> class0 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      Double double0 = Double.valueOf(2.147483647E9);
      assertNotNull(double0);
      assertEquals(2.147483647E9, (double)double0, 0.01);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertNotNull(double1);
      assertEquals(2.147483647E9, (double)double1, 0.01);
      
      String string0 = ClassUtil.classNameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray1 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertSame(annotationArray1, annotationArray0);
      
      Class<IOException> class3 = IOException.class;
      String string1 = ClassUtil.getPackageName(class3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.io", string1);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      Class<AccessPattern> class4 = AccessPattern.class;
      Constructor<AccessPattern> constructor1 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor1);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Class<Integer> class5 = Integer.class;
      String string2 = "";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class5, class5, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Integer) must override method ''
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Number", class1.toString());
      
      Double double0 = Double.valueOf(2.147483647E9);
      assertNotNull(double0);
      assertEquals(2.147483647E9, (double)double0, 0.01);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertNotNull(double1);
      assertEquals(2.147483647E9, (double)double1, 0.01);
      
      String string0 = ClassUtil.classNameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Number", class1.toString());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Number", class1.toString());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray1 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertSame(annotationArray1, annotationArray0);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<?> class4 = ClassUtil.primitiveType(class3);
      assertNull(class4);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class5 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class5);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("class java.lang.RuntimeException", class5.toString());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isPrimitive());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      
      Class<Object> class6 = Object.class;
      String string1 = ClassUtil.isLocalType(class6, false);
      assertNull(string1);
      
      Class<AccessPattern> class7 = AccessPattern.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)ClassUtil.getGenericSuperclass(class7);
      assertNotNull(parameterizedTypeImpl0);
      assertSame(class7, class3);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class5, class5, false);
      assertNotNull(list0);
      assertFalse(list0.contains(class5));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("class java.lang.RuntimeException", class5.toString());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isPrimitive());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = ClassUtil.backticked("[]");
      assertNotNull(string0);
      assertEquals("`[]`", string0);
      
      Class<ReferenceType> class1 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(34, methodArray0.length);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<?> class3 = ClassUtil.getEnclosingClass(class0);
      assertNull(class3);
      
      Class<IOException> class4 = IOException.class;
      boolean boolean0 = ClassUtil.hasClass(list0, class4);
      assertFalse(boolean0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class5 = ClassUtil.primitiveType(class2);
      assertNull(class5);
      
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      Class<Void> class7 = Void.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class6, class7, false);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(4, list1.size());
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Double> class1 = Double.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
      
      Class<Error> class4 = Error.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class4);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      MockIOException mockIOException0 = new MockIOException((String) null);
      assertNotNull(mockIOException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      Class<Object> class0 = Object.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string0 = "'; inject id '";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("'; inject id '", hashMap0, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: '; inject id '", sQLClientInfoException0.toString());
      assertEquals("'; inject id '", sQLClientInfoException0.getMessage());
      
      String string1 = sQLClientInfoException0.getLocalizedMessage();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'; inject id '", string1);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: '; inject id '", sQLClientInfoException0.toString());
      assertEquals("'; inject id '", sQLClientInfoException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.initCause(sQLClientInfoException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: '; inject id '", sQLClientInfoException0.toString());
      assertEquals("'; inject id '", sQLClientInfoException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      Throwable[] throwableArray0 = sQLIntegrityConstraintViolationException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "k!SHeOka'j");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      
      constructor0.setAccessible(true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) constructor0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<CollectionType> class1 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "[", "org.hibernate.proxy.");
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.CollectionType` from String \"[\": org.hibernate.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      Class<Error> class0 = Error.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string1 = ClassUtil.isLocalType(class0, false);
      assertNull(string1);
      
      Class<SimpleType> class2 = SimpleType.class;
      String string2 = ClassUtil.canBeABeanType(class2);
      assertNull(string2);
      
      Class<ReferenceType> class3 = ReferenceType.class;
      String string3 = ClassUtil.getPackageName(class3);
      assertNotNull(string3);
      assertEquals("com.fasterxml.jackson.databind.type", string3);
      
      Class<AccessibleObject> class4 = AccessibleObject.class;
      Class<?> class5 = ClassUtil.getDeclaringClass(class4);
      assertNull(class5);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      
      Throwable[] throwableArray0 = mockThrowable0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      Throwable throwable0 = mockThrowable0.fillInStackTrace();
      assertNotNull(throwable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      
      Throwable throwable1 = ClassUtil.getRootCause(mockThrowable0);
      assertNotNull(throwable1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable1.toString());
      assertNull(throwable1.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertSame(mockThrowable0, throwable1);
      assertSame(throwable1, throwable0);
      assertSame(throwable1, mockThrowable0);
      
      Float float0 = new Float(0.6F);
      assertNotNull(float0);
      assertEquals(0.6F, (float)float0, 0.01F);
      
      Class<?> class6 = ClassUtil.classOf(float0);
      assertNotNull(class6);
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isPrimitive());
      assertEquals(17, class6.getModifiers());
      assertEquals("class java.lang.Float", class6.toString());
      assertFalse(class6.isAnnotation());
      
      boolean boolean0 = ClassUtil.isConcrete(class4);
      assertTrue(boolean0);
      
      Class<AccessibleObject> class7 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class7, true);
      assertNotNull(constructor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertSame(class7, class4);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertSame(class7, class4);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertSame(class7, class4);
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertSame(class7, class4);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      assertSame(class7, class4);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string4 = ClassUtil.classNameOf(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("`java.lang.Integer`", string4);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      MockIOException mockIOException0 = new MockIOException("oc xJ\"#d#fr", sQLIntegrityConstraintViolationException0);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Double double0 = Double.valueOf(2.147483647E9);
      assertNotNull(double0);
      assertEquals(2.147483647E9, (double)double0, 0.01);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertNotNull(double1);
      assertEquals(2.147483647E9, (double)double1, 0.01);
      
      String string0 = ClassUtil.classNameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<Character> class2 = Character.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray1 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertSame(annotationArray1, annotationArray0);
      
      Class<AccessPattern> class4 = AccessPattern.class;
      Class<?> class5 = ClassUtil.primitiveType(class4);
      assertNull(class5);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class6 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class6);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, class6.getModifiers());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isArray());
      assertFalse(class6.isInterface());
      assertFalse(class6.isPrimitive());
      assertEquals("class java.lang.RuntimeException", class6.toString());
      assertFalse(class6.isAnnotation());
      
      Class<Object> class7 = Object.class;
      String string1 = ClassUtil.isLocalType(class7, false);
      assertNull(string1);
      
      Class<AccessPattern> class8 = AccessPattern.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)ClassUtil.getGenericSuperclass(class8);
      assertNotNull(parameterizedTypeImpl0);
      assertSame(class8, class4);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class3, true);
      assertNotNull(list0);
      assertFalse(list0.contains(class6));
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", string0);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<NoClass> class2 = NoClass.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
      
      Class<NoClass> class4 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException(" has no default (no arg) constructor", "FsS[._jFEt", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(" has no default (no arg) constructor", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException:  has no default (no arg) constructor", sQLDataException0.toString());
      assertEquals("FsS[._jFEt", sQLDataException0.getSQLState());
      
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      Class<?> class2 = ClassUtil.classOf(sQLInvalidAuthorizationSpecException0);
      assertNotNull(class2);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.SQLInvalidAuthorizationSpecException", class2.toString());
      assertFalse(class2.isEnum());
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class3);
      assertFalse(boolean0);
      
      Class<RuntimeException> class4 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class5 = ClassUtil.primitiveType(class3);
      assertNull(class5);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class6 = classUtil_Ctor0.getDeclaringClass();
      assertFalse(class6.equals((Object)class2));
      assertNotNull(class6);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isPrimitive());
      assertEquals(1, class6.getModifiers());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertEquals("class java.lang.RuntimeException", class6.toString());
      assertNotSame(class6, class2);
      
      String string1 = ClassUtil.isLocalType(class0, false);
      assertNull(string1);
      
      Class<Long> class7 = Long.class;
      Class class8 = (Class)ClassUtil.getGenericSuperclass(class7);
      assertNotNull(class8);
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertEquals(1025, class8.getModifiers());
      assertEquals("class java.lang.Number", class8.toString());
      assertFalse(class8.isAnnotation());
      assertFalse(class8.isPrimitive());
      assertFalse(class8.isInterface());
      assertFalse(class8.isArray());
      
      Class<CollectionLikeType> class9 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class9, class0, true);
      assertNotNull(list0);
      assertFalse(list0.contains(class6));
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertSame(class9, class3);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      String string0 = "FsS[._jFEt";
      Class<Character> class0 = Character.class;
      String string1 = ClassUtil.getPackageName(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.lang", string1);
      
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      Class<MapType> class0 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNull(constructor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind", string0);
      
      Class<String> class1 = String.class;
      String string1 = ClassUtil.isLocalType(class1, false);
      assertNull(string1);
      
      Class<Object> class2 = Object.class;
      String string2 = ClassUtil.canBeABeanType(class2);
      assertNull(string2);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8232);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.print((-4041));
      assertEquals(0, pipedInputStream0.available());
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "com.fasterxml.jackson.databind");
      assertNotNull(printWriter0);
      assertEquals(0, pipedInputStream0.available());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, pipedInputStream0.available());
      assertSame(mockPrintWriter0, printWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      TypeVariable<Constructor<IOException>>[] typeVariableArray0 = constructor0.getTypeParameters();
      assertNotNull(typeVariableArray0);
      assertEquals(0, typeVariableArray0.length);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = constructor0.toGenericString();
      assertNotNull(string0);
      assertEquals("public java.io.IOException()", string0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertNotNull(parameterArray0);
      assertEquals(0, parameterArray0.length);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class1 = Annotation.class;
      String string1 = constructor0.getName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.io.IOException", string1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      Annotation annotation0 = constructor0.getAnnotation(class1);
      assertNull(annotation0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      
      int int0 = 222;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(222, false, false, 0, 8, mockRuntimeException0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      int int1 = dataTruncation0.getIndex();
      assertTrue(int1 == int0);
      assertEquals(222, int1);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      DataTruncation dataTruncation1 = (DataTruncation)dataTruncation0.fillInStackTrace();
      assertNotNull(dataTruncation1);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertSame(dataTruncation0, dataTruncation1);
      assertSame(dataTruncation1, dataTruncation0);
      
      SQLWarning sQLWarning0 = new SQLWarning("public java.io.IOException()", "public java.io.IOException()");
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: public java.io.IOException()", sQLWarning0.toString());
      assertEquals("public java.io.IOException()", sQLWarning0.getMessage());
      assertEquals("public java.io.IOException()", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // public java.io.IOException()
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      assertNotNull(iOContext0);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      byte[] byteArray0 = iOContext0.allocBase64Buffer((-1853514379));
      assertNotNull(byteArray0);
      assertEquals(2000, byteArray0.length);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class2, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy)PropertyNamingStrategy.LOWER_CASE;
      assertNotNull(propertyNamingStrategy_LowerCaseStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseStrategy0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind", string0);
      
      Class<String> class1 = String.class;
      String string1 = ClassUtil.isLocalType(class1, false);
      assertNull(string1);
      
      Class<Object> class2 = Object.class;
      String string2 = ClassUtil.canBeABeanType(class2);
      assertNull(string2);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8232);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, pipedInputStream0.available());
      
      String string3 = ClassUtil.getPackageName(class2);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("java.lang", string3);
      
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      Class<?> class3 = ClassUtil.classOf(mockError0);
      assertNotNull(class3);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class org.evosuite.runtime.mock.java.lang.MockError", class3.toString());
      assertFalse(class3.isAnnotation());
      
      Class<ArrayType> class4 = ArrayType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class4);
      assertFalse(boolean0);
      
      Class<RuntimeException> class5 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class5, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<RuntimeException> class6 = RuntimeException.class;
      Class<?> class7 = ClassUtil.primitiveType(class6);
      assertNull(class7);
      assertSame(class6, class5);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class8 = classUtil_Ctor0.getDeclaringClass();
      assertFalse(class8.equals((Object)class3));
      assertNotNull(class8);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertEquals("class java.lang.RuntimeException", class8.toString());
      assertFalse(class8.isAnnotation());
      assertFalse(class8.isInterface());
      assertFalse(class8.isArray());
      assertFalse(class8.isPrimitive());
      assertEquals(1, class8.getModifiers());
      assertSame(class5, class6);
      assertNotSame(class8, class3);
      
      String string4 = ClassUtil.isLocalType(class1, false);
      assertNull(string4);
      
      Class<Double> class9 = Double.class;
      Class class10 = (Class)ClassUtil.getGenericSuperclass(class9);
      assertNotNull(class10);
      assertFalse(class10.isEnum());
      assertFalse(class10.isSynthetic());
      assertEquals(1025, class10.getModifiers());
      assertFalse(class10.isInterface());
      assertFalse(class10.isArray());
      assertFalse(class10.isPrimitive());
      assertFalse(class10.isAnnotation());
      assertEquals("class java.lang.Number", class10.toString());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      assertNotNull(iOContext0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy)PropertyNamingStrategy.LOWER_CASE;
      assertNotNull(propertyNamingStrategy_LowerCaseStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseStrategy0);
      assertNotNull(objectMapper1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Class<Double> class2 = Double.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class1, list0);
      assertNotNull(list1);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(4, list1.size());
      assertSame(list0, list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" has no default (no arg) constructor");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException:  has no default (no arg) constructor", sQLTransactionRollbackException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      SQLException sQLException0 = new SQLException((String) null, sQLTransactionRollbackException0);
      assertNotNull(sQLException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException:  has no default (no arg) constructor", sQLTransactionRollbackException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("mz3|H(A*'K}hy0", "local/anonymous", sQLException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException:  has no default (no arg) constructor", sQLTransactionRollbackException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLDataException: mz3|H(A*'K}hy0", sQLDataException0.toString());
      assertEquals("mz3|H(A*'K}hy0", sQLDataException0.getMessage());
      assertEquals("local/anonymous", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      MockIOException mockIOException0 = new MockIOException("", sQLDataException0);
      assertNotNull(mockIOException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("local/anonymous", "_>8uCj(n*", (-1957), mockIOException0);
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException:  has no default (no arg) constructor", sQLTransactionRollbackException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLDataException: mz3|H(A*'K}hy0", sQLDataException0.toString());
      assertEquals("mz3|H(A*'K}hy0", sQLDataException0.getMessage());
      assertEquals("local/anonymous", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals((-1957), sQLTransientException0.getErrorCode());
      assertEquals("local/anonymous", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: local/anonymous", sQLTransientException0.toString());
      assertEquals("_>8uCj(n*", sQLTransientException0.getSQLState());
      
      SQLDataException sQLDataException1 = new SQLDataException("", " has no default (no arg) constructor", sQLTransientException0);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException1);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException:  has no default (no arg) constructor", sQLTransactionRollbackException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLDataException: mz3|H(A*'K}hy0", sQLDataException0.toString());
      assertEquals("mz3|H(A*'K}hy0", sQLDataException0.getMessage());
      assertEquals("local/anonymous", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals((-1957), sQLTransientException0.getErrorCode());
      assertEquals("local/anonymous", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: local/anonymous", sQLTransientException0.toString());
      assertEquals("_>8uCj(n*", sQLTransientException0.getSQLState());
      assertEquals(" has no default (no arg) constructor", sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<SimpleType> class0 = SimpleType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      assertNotNull(mapLikeType0);
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isArrayType());
      
      Class<?> class1 = ClassUtil.classOf(mapLikeType0);
      assertNotNull(class1);
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.type.MapLikeType", class1.toString());
      assertEquals(1, class1.getModifiers());
      
      Class<Character> class2 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.type.MapLikeType", class1.toString());
      assertEquals(1, class1.getModifiers());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2584));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      MockIOException mockIOException1 = new MockIOException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", sQLTransientException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertNotNull(mockIOException1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwIfRTE(sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class3);
      assertNotNull(list0);
      assertFalse(list0.contains(class1));
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<MapType> class1 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class1, class0, list0);
      assertNotNull(list1);
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      assertEquals(9, list1.size());
      assertFalse(list1.isEmpty());
      assertSame(list0, list1);
      assertSame(list1, list0);
      
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<AccessPattern>[] classArray0 = (Class<AccessPattern>[]) Array.newInstance(Class.class, 1);
      Class<AccessPattern> class2 = AccessPattern.class;
      classArray0[0] = class2;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.backticked("yDf_^@");
      assertNotNull(string0);
      assertEquals("`yDf_^@`", string0);
      
      Class<Character> class1 = Character.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      boolean boolean1 = ClassUtil.isProxyType(class3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<IOException> class4 = IOException.class;
      boolean boolean2 = ClassUtil.isBogusClass(class4);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<Object> class5 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class5, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor0, false);
      assertNotNull(iOContext0);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext0, iOContext1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      String string0 = "6khmQ3T59";
      String string1 = "~^{%+^wLC$nQAp";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("6khmQ3T59", "~^{%+^wLC$nQAp");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ~^{%+^wLC$nQAp
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Long> class1 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean0 = true;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("e!tYL:", hashMap0, (Throwable) null);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: e!tYL:", sQLClientInfoException0.toString());
      assertEquals("e!tYL:", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: e!tYL:", sQLClientInfoException0.toString());
      assertEquals("e!tYL:", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("e!tYL:", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: e!tYL:", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      
      Class<Long> class2 = Long.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      String string1 = null;
      int int0 = 236;
      SQLTransientException sQLTransientException0 = new SQLTransientException("ZERO_LENGTH_ENUM_ARRAY", (String) null, 236, (Throwable) null);
      assertNotNull(sQLTransientException0);
      assertEquals(236, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      assertFalse(sQLTransientException1.equals((Object)sQLTransientException0));
      assertNotNull(sQLTransientException1);
      assertEquals(236, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLTransientException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientException1.toString());
      assertEquals("java.sql.SQLTransientException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientException1.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      String string2 = "serialVersionUID";
      int int1 = 0;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "explicitly marked", "serialVersionUID", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<String> class0 = String.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(5, fieldArray0.length);
      
      Class<Short> class1 = Short.class;
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      TypeVariable<Constructor<IOException>>[] typeVariableArray0 = constructor0.getTypeParameters();
      assertNotNull(typeVariableArray0);
      assertEquals(0, typeVariableArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      String string0 = constructor0.toGenericString();
      assertNotNull(string0);
      assertEquals("public java.io.IOException()", string0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertNotNull(parameterArray0);
      assertEquals(0, parameterArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Class<Annotation> class1 = Annotation.class;
      String string1 = constructor0.getName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.io.IOException", string1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Annotation annotation0 = constructor0.getAnnotation(class1);
      assertNull(annotation0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      
      Class<?> class2 = ClassUtil.primitiveType(class0);
      assertNull(class2);
      
      int int0 = 216;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(216, false, false, 0, 8, mockRuntimeException0);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      int int1 = dataTruncation0.getIndex();
      assertTrue(int1 == int0);
      assertEquals(216, int1);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      DataTruncation dataTruncation1 = (DataTruncation)dataTruncation0.fillInStackTrace();
      assertNotNull(dataTruncation1);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertSame(dataTruncation0, dataTruncation1);
      assertSame(dataTruncation1, dataTruncation0);
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertSame(dataTruncation0, dataTruncation1);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string1 = "Cannot figure out type for EnumSet (odd JDK platform?)";
      JsonDeserializer<Error> jsonDeserializer0 = (JsonDeserializer<Error>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jsonDeserializer0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.backticked("yDf_^@");
      assertNotNull(string0);
      assertEquals("`yDf_^@`", string0);
      
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Short> class2 = Short.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
      
      String string1 = ClassUtil.getPackageName(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("com.fasterxml.jackson.databind.type", string1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      Class<Byte> class4 = Byte.class;
      String string2 = ClassUtil.isLocalType(class4, true);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = ClassUtil.backticked("[]");
      assertNotNull(string0);
      assertEquals("`[]`", string0);
      
      Class<ReferenceType> class1 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(34, methodArray0.length);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      
      Class<MapLikeType> class3 = MapLikeType.class;
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertSame(annotationArray1, annotationArray0);
      
      TypeVariable<Constructor<RuntimeException>>[] typeVariableArray0 = constructor0.getTypeParameters();
      assertNotNull(typeVariableArray0);
      assertEquals(0, typeVariableArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class3);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Class<?> class4 = ClassUtil.getEnclosingClass(class0);
      assertNull(class4);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertSame(annotationArray2, annotationArray0);
      assertSame(annotationArray2, annotationArray1);
      
      Class<IOException> class5 = IOException.class;
      boolean boolean0 = ClassUtil.hasClass(list0, class5);
      assertFalse(boolean0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind", string0);
      
      Class<String> class1 = String.class;
      String string1 = ClassUtil.isLocalType(class1, false);
      assertNull(string1);
      
      Class<Object> class2 = Object.class;
      String string2 = ClassUtil.canBeABeanType(class2);
      assertNull(string2);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8232);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, pipedInputStream0.available());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      Class<Boolean> class3 = Boolean.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      String string0 = ClassUtil.nonNullString("kpsGZ");
      assertNotNull(string0);
      assertEquals("kpsGZ", string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotNull(iOContext1);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)111;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectReader1, mockPrintStream0, byteArray0, 3, false);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(5, byteArray0.length);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)75, (byte)0, (byte)0, (byte)111}, byteArray0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonGeneratorDelegate0);
      assertEquals(5, byteArray0.length);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)75, (byte)0, (byte)0, (byte)111}, byteArray0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(3, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(filteringGeneratorDelegate0);
      assertEquals(5, byteArray0.length);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)75, (byte)0, (byte)0, (byte)111}, byteArray0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(3, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(3, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      PrettyPrinter prettyPrinter0 = filteringGeneratorDelegate0.getPrettyPrinter();
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNull(prettyPrinter0);
      assertEquals(5, byteArray0.length);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)75, (byte)0, (byte)0, (byte)111}, byteArray0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(3, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(3, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(5, byteArray0.length);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)75, (byte)0, (byte)0, (byte)111}, byteArray0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotSame(objectReader1, objectReader0);
      
      DataTruncation dataTruncation0 = new DataTruncation(57343, true, true, (byte)111, 0);
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertSame(annotationArray1, annotationArray0);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertSame(annotationArray2, annotationArray1);
      assertSame(annotationArray2, annotationArray0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isAccessible());
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      Class<Long> class1 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertFalse(simpleType0.equals((Object)javaType0));
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertNotSame(simpleType0, javaType0);
      
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[4]);
      assertFalse(javaType0.equals((Object)simpleType0));
      assertNotNull(mapType0);
      assertEquals(7, javaTypeArray0.length);
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertNotSame(javaType0, simpleType0);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class2, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.MapLikeType with 7 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      int int0 = (-1817);
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      char[] charArray0 = iOContext0.allocNameCopyBuffer((-1817));
      assertNotNull(charArray0);
      assertEquals(200, charArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      assertNotNull(byteArray0);
      assertEquals(8000, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<IOException> class1 = IOException.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = "vals";
      SQLWarning sQLWarning0 = new SQLWarning("vals");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("vals", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: vals", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("", sQLWarning0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("vals", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: vals", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      sQLWarning0.setNextException(sQLDataException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("vals", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: vals", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(boolean0);
      assertNotNull(string0);
      assertEquals("`java.lang.Boolean`", string0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        Integer.valueOf("`java.lang.Boolean`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`java.lang.Boolean`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-483L);
      longArray0[5] = 3L;
      longArray0[6] = (-1L);
      longArray0[7] = (long) 0;
      longArray0[8] = 1L;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", 0, longArray0, sQLClientInfoException0);
      assertNotNull(batchUpdateException0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-483L), 3L, (-1L), 0L, 1L}, longArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", 0, batchUpdateException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-483L), 3L, (-1L), 0L, 1L}, longArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException0.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-483L), 3L, (-1L), 0L, 1L}, longArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException0.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring", sQLFeatureNotSupportedException1.toString());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      Double double0 = Double.valueOf(2.147483647E9);
      assertNotNull(double0);
      assertEquals(2.147483647E9, (double)double0, 0.01);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertNotNull(double1);
      assertEquals(2.147483647E9, (double)double1, 0.01);
      
      String string0 = ClassUtil.classNameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<Character> class2 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2584));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      
      try { 
        defaultDeserializationContext_Impl0.resolveSubType(placeholderForType0, "w8Xo?@WeI6I");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'w8Xo?@WeI6I' as a subtype of $-2583: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 0, sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.throwIfIOE(sQLTransientException0);
      assertNotNull(sQLTransientException1);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertNull(sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException1.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<String> class1 = String.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      MockIOException mockIOException0 = new MockIOException("oc xJ\"#d#fr", sQLIntegrityConstraintViolationException0);
      assertNotNull(mockIOException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(mockIOException0);
      assertNotNull(throwable0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertSame(mockIOException0, throwable0);
      assertSame(throwable0, mockIOException0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      
      Class<String> class3 = String.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl(class2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      
      String string0 = "w8";
      SQLDataException sQLDataException0 = new SQLDataException("w8");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: w8", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("w8", sQLDataException0.getMessage());
      
      Spliterator<Throwable> spliterator0 = sQLDataException0.spliterator();
      assertNotNull(spliterator0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: w8", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("w8", sQLDataException0.getMessage());
      
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.fillInStackTrace();
      assertNotNull(sQLDataException1);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: w8", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("w8", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: w8", sQLDataException1.toString());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("w8", sQLDataException1.getMessage());
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      
      MockIOException mockIOException0 = new MockIOException("w8", sQLDataException0);
      assertNotNull(mockIOException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockIOException0.setStackTrace(stackTraceElementArray0);
      assertEquals(0, stackTraceElementArray0.length);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: w8", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("w8", sQLDataException0.getMessage());
      assertSame(sQLDataException0, sQLDataException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, "w8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // w8
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.quotedOr(class2, "nnTlR5Keiv=HX");
      DeserializationContext deserializationContext0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<Double> class3 = Double.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class0, (Class<? extends Double>) class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SQLException sQLException0 = new SQLException("lYi)yfc[:ZRR", "0!YL=?");
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLException0);
      assertSame(sQLException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Void> class0 = Void.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = null;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("size", sQLDataException0);
      sQLDataException0.initCause(sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "]B{", (-2314), sQLDataException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockIOException0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
