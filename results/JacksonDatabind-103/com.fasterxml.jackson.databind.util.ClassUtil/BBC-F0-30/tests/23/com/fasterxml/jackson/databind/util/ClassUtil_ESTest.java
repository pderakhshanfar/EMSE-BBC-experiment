/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:53:47 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Byte");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Byte byte0 = new Byte((byte) (-23));
      JavaType javaType1 = resolvedRecursiveType0.withTypeHandler(byte0);
      ClassUtil.rawClass(javaType1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1586, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1586, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ur;8b}Hdx");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: Ur;8b}Hdx
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
      Class<String> class1 = String.class;
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getEnclosingClass(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.type", sQLDataException0);
      sQLDataException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(typeBindings0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("QWfBus/#j");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-47);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1244651605), objectMapper0, mockFileOutputStream0, byteArray0, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(2, 1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      SQLWarning sQLWarning0 = new SQLWarning("~AhE%lb");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: ~AhE%lb
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      ObjectReader objectReader0 = objectMapper1.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      MapLikeType mapLikeType0 = typeFactory2.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) mapLikeType0, (JavaType) mapLikeType0);
      ClassUtil.rawClass(mapLikeType1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, mockRuntimeException0);
      mockRuntimeException0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-1744709515));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      IOContext iOContext0 = new IOContext(bufferRecycler0, accessPattern0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1744709515), objectReader1, charArrayWriter0);
      Class<Short> class2 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("USE_BASE_TYPE_AS_DEFAULT_IMPL", class2, "USE_BASE_TYPE_AS_DEFAULT_IMPL");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from String \"USE_BASE_TYPE_AS_DEFAULT_IMPL\": USE_BASE_TYPE_AS_DEFAULT_IMPL
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl1;
      objectArray0[1] = (Object) jsonFactory0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "JSON", objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-11);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), objectMapper0, printStream0, byteArray0, (byte) (-11), true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, " (from class ", (Throwable) sQLTimeoutException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  (from class 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("-1e,A0;~I;!AY|", "-1e,A0;~I;!AY|", 1185);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      ClassUtil.getGenericInterfaces(class2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findEnumType(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class1 = LinkedList.class;
      Class<Double> class2 = Double.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[2];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, (Constructor<?>) null, annotationMap0, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.findConstructor(class0, false);
      Class<Void> class1 = Void.TYPE;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      ClassUtil.rawClass(arrayType1);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.verifyMustOverride(class0, "org.hibernate.proxy.java.lang.Double", "#C|JCoP^_gbW@eutD");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      constructor0.getAnnotationsByType(class1);
      constructor0.getAnnotation(class1);
      Class<Annotation> class3 = Annotation.class;
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class4);
      constructor0.getAnnotationsByType(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<ResolvedRecursiveType> class5 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class5);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      mockRuntimeException0.getLocalizedMessage();
      Class<Annotation> class6 = Annotation.class;
      constructor0.getDeclaredAnnotation(class6);
      ClassUtil.nullOrToString(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "-S[}2:.,Wz<2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class1 = Integer.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, true);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<Integer> class2 = Integer.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.isProxyType(class3);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.Long");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      File file0 = MockFile.createTempFile("INTERN_FIELD_NAMES", " as a Bean");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[1] = (Object) "uzV/#o|w,Ui(^6!v";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) mockIOException0;
      objectArray0[4] = (Object) "INTERN_FIELD_NAMES";
      objectArray0[5] = (Object) jsonEncoding0;
      objectArray0[6] = (Object) jsonFactory0;
      objectArray0[7] = (Object) jsonFactory2;
      PrintStream printStream0 = mockPrintStream0.format("uzV/#o|w,Ui(^6!v", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Float");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(8, 8);
      lRUMap0._jdkSerializeMaxEntries = 2790;
      typeFactory0.withCache(lRUMap0);
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.backticked("Ls");
      SQLException sQLException0 = new SQLException("Ls");
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang.RuntimeExc", "dt#^9A~MBr!d\"DPc", (-1), sQLDataException0);
      sQLTransientConnectionException0.spliterator();
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.quotedOr(class1, "com.fasterxml.jackson.databind.type");
      ClassUtil.getEnclosingClass(class0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.type");
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      ClassUtil.findEnumType(enumSet0);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      MockError mockError0 = new MockError();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "org.hibernate.proxy.java.lang.Short", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, true);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      ObjectMapper objectMapper3 = objectMapper2.configure(mapperFeature0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) objectMapper3;
      objectArray0[4] = (Object) objectMapper3;
      objectArray0[5] = (Object) objectMapper1;
      PrintStream printStream0 = mockPrintStream0.format("+dpA", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, objectMapper3, printStream0, byteArrayBuilder0.NO_BYTES, 989, false);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      SQLTransientException sQLTransientException0 = new SQLTransientException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", (String) null, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "\"%s\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findConstructor(class2, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U1H+EmWGLBgsAZ", "short");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":g#Sk`SAGf&", "`h2!#RV[", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)14, (byte)0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("8Q!");
      JsonLocation jsonLocation0 = new JsonLocation(mockRuntimeException0, (byte)0, 0L, 123, 365);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, ", problem: ", jsonLocation0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getPackageName(class0);
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ClassUtil.primitiveType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("GET@zG5|");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "GET@zG5|", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findConstructor(class0, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory0.constructRawCollectionType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class1, class3, false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = ":iPL/?\\p0\"{)?,c*:";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":iPL/?p0\"{)?,c*:");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.isCollectionMapOrArray(class0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(":iPL/?p0\"{)?,c*:", mockThrowable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLRecoverableException0);
      MockThrowable.replacement_getStackTrace(mockThrowable0);
      MockError mockError0 = new MockError("java.lang.reflect.A", sQLRecoverableException0);
      mockError0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, ":iPL/?p0\"{)?,c*:");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double(0.0);
      Class<Double> class0 = Double.class;
      ClassUtil.hasClass(double0, class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      FloatNode floatNode0 = new FloatNode((-1146.4F));
      ClassUtil.isJacksonStdImpl((Object) floatNode0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isLocalType(class1, true);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockException mockException0 = new MockException();
      MockIOException mockIOException0 = new MockIOException(mockException0);
      mockException0.initCause(mockIOException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.backticked("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<String> class1 = String.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getConstructors(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.findSuperTypes(class2, class4);
      Class<Boolean> class5 = Boolean.class;
      ClassUtil.isLocalType(class5, false);
      Class<Error> class6 = Error.class;
      ClassUtil.getClassMethods(class6);
      Class<Character> class7 = Character.class;
      ClassUtil.getDeclaredFields(class7);
      ClassUtil.nullOrToString("");
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(895);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.hasClass(placeholderForType0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getPackageName(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("W1d", class0, "W1d");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from String \"W1d\": W1d
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getDeclaredFields(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.isNonStaticInnerClass(class2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findClassAnnotations(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class3 = LinkedList.class;
      Class<LinkedList> class4 = LinkedList.class;
      typeFactory0.constructRawCollectionType(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class5);
      EnumMap<AccessPattern, CollectionType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, CollectionType> enumMap2 = new EnumMap<AccessPattern, CollectionType>(enumMap1);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<JsonMappingException> class6 = JsonMappingException.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class3, class6);
      enumMap2.put(accessPattern0, collectionType0);
      Class<Long> class7 = Long.TYPE;
      Class<LinkedList> class8 = LinkedList.class;
      CollectionType collectionType1 = typeFactory0.constructCollectionType(class8, class3);
      Class<AccessPattern> class9 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap3 = new EnumMap<AccessPattern, CollectionLikeType>(class9);
      EnumMap<AccessPattern, CollectionLikeType> enumMap4 = enumMap3.clone();
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      enumMap4.put(accessPattern1, (CollectionLikeType) collectionType1);
      ClassUtil.findEnumType(enumMap0);
      Class<Object> class10 = Object.class;
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) class10, false);
      ClassUtil.findEnumType((Enum<?>) accessPattern1);
      constructor0.getName();
      Class<JsonMappingException> class11 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getPackageName(class0);
      Class<Void> class2 = Void.class;
      ClassUtil.findRawSuperTypes(class2, class0, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaringClass(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("lUXP9vC", "xC=`dl*= [G&b@Ny");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xC=`dl*= [G&b@Ny", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.quotedOr((Object) null, "L");
      ClassUtil.nonNullString((String) null);
      Integer integer0 = new Integer(13);
      ClassUtil.hasClass(integer0, class0);
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.classOf("L");
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isConcrete(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-42));
      ClassUtil.classOf(byte0);
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<SimpleType> class1 = SimpleType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<FloatNode> class2 = FloatNode.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      System.setCurrentTimeMillis((byte) (-42));
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.getConstructors(class3);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      MockError mockError0 = new MockError("xsC#Hq`e +t<");
      mockError0.toString();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (byte) (-42), mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findEnumType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.defaultValue(class0);
      Float float0 = new Float((-845.589647252975));
      ClassUtil.classNameOf(float0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      System.setCurrentTimeMillis(1039L);
      System.setCurrentTimeMillis(1039L);
      ClassUtil.getClassDescription(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLClientInfoException1);
      sQLClientInfoException0.getStackTrace();
      sQLClientInfoException0.getStackTrace();
      sQLClientInfoException1.getSuppressed();
      sQLClientInfoException1.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",F,&<P@-", "`java.lang.Integer`", sQLWarning0);
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      DeserializationContext deserializationContext0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-4391));
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) placeholderForType0);
      Class<Short> class2 = Short.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) collectionType0;
      javaTypeArray0[1] = (JavaType) collectionType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      Class<NoClass> class3 = NoClass.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class3, (-520));
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      javaTypeArray0[6] = null;
      javaTypeArray0[7] = (JavaType) collectionType0;
      javaTypeArray0[8] = (JavaType) placeholderForType0;
      // Undeclared exception!
      try { 
        MapType.construct((Class<?>) class2, typeBindings0, (JavaType) collectionType0, javaTypeArray0, javaType0, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.getConstructors(class0);
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.canBeABeanType(class1);
      Class<ArrayType> class2 = ArrayType.class;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.primitiveType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Integer> class1 = Integer.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.lang.String", "JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory5 = jsonFactory4.configure(jsonGenerator_Feature1, true);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((Writer) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Byte byte0 = new Byte((byte)33);
      Class<Short> class1 = Short.class;
      ClassUtil.hasClass(byte0, class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getGenericInterfaces(class2);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      Class<?> class3 = ClassUtil.classOf(fileSystemHandling0);
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.nonNullString("VY];b/qM42");
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      Short short0 = new Short((short)25193);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classNameOf(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'c';
      charArray0[2] = '\'';
      charArray0[3] = ')';
      charArray0[4] = '=';
      charArray0[5] = 'b';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      Class<Character> class0 = Character.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: JSON
         //  at [Source: (char[])\"7c')=b\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable.replacement_getStackTrace(mockThrowable0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockException mockException0 = new MockException("cb:E56)J");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "cb:E56)J", true);
      int int0 = (-11);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<ArrayType> class1 = ArrayType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(collectionType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      objectReader1.with(jsonNodeFactory0);
      String string0 = "^M'@ ybW)IE#OeoR|^`";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "^M'@ ybW)IE#OeoR|^`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Character character0 = new Character('j');
      ClassUtil.nullOrToString(character0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      String string0 = "java.lang.RuntimeExc";
      try { 
        MockURI.URI("java.lang.Character@0000000001", "Hxh-e", "java.lang.Character@0000000001");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 19: java.lang.Character@0000000001:Hxh-e#java.lang.Character@0000000001
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ClassUtil.findConstructor(class0, false);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getDeclaredAnnotations();
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<String> class2 = String.class;
      Constructor<String> constructor1 = ClassUtil.findConstructor(class2, false);
      constructor0.getAnnotatedParameterTypes();
      constructor1.getAnnotatedExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor, false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable.replacement_getStackTrace(mockThrowable0);
      System.setCurrentTimeMillis((-108L));
      Long long0 = new Long((-108L));
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      ClassUtil.getRootCause(sQLWarning0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockException mockException0 = new MockException("cb:E56)J");
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable.replacement_getStackTrace(mockThrowable0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      Short short0 = new Short((short)0);
      ClassUtil.quotedOr(short0, (String) null);
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1809238660));
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      Class<Void> class1 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<Float> class0 = Float.TYPE;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Short short0 = new Short((short) (-867));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.nonNullString("ORlK=\"\"2lnCSUuDH7B");
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockIOException mockIOException0 = new MockIOException();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockException mockException0 = new MockException("(b:E56[E");
      MockIOException mockIOException0 = new MockIOException(mockException0);
      mockException0.initCause(mockIOException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, "(b:E56[E");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "keyUniverse");
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("flUm$}rak0PuL5f\"", "ZERO_LENGTH_ENUM_ARRAY");
      MockIOException mockIOException0 = new MockIOException(sQLInvalidAuthorizationSpecException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.java.lang.Long", mockIOException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRuntimeException0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      ObjectReader objectReader2 = objectReader1.with(jsonFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZERO_LENGTH_ENUM_ARRAY");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader2, mockFileOutputStream0);
      JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<Integer> class0 = Integer.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      String string0 = "S/-ST*:U%ti|DRI8";
      arrayType0.withContentValueHandler("S/-ST*:U%ti|DRI8");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockException mockException0 = new MockException("cb:E56)J");
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.getClassDescription(class0);
      ClassUtil.nullOrToString(mockException0);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperTypes(class1, class1);
      String string0 = "Y}P7zUPQ+tCl!GVa";
      ClassUtil.nonNullString("Y}P7zUPQ+tCl!GVa");
      Class<IOException> class2 = IOException.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Float> class0 = Float.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.", "com.fasterxml.jackson.databind.util.ClassUtil", (-202), hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("size", sQLClientInfoException0);
      sQLClientInfoException0.setNextException(sQLDataException0);
      ClassUtil.getRootCause(sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class0, class1);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      Class<ArrayType> class2 = ArrayType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Short short0 = new Short((short) (-9));
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null, (Object) typeBindings0, (Object) short0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size");
      ArrayType arrayType1 = arrayType0.withTypeHandler((Object) null);
      arrayType1.getBindings();
      Class<Double> class3 = Double.class;
      ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) referenceType0);
      ClassUtil.rawClass(referenceType0);
      ClassUtil.getDeclaredMethods(class0);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.", "com.fasterxml.jackson.databind.util.ClassUtil", (-202), hashMap0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNullString("net.sf.cglib.proxy.");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<IOException> class1 = IOException.class;
      ClassUtil.canBeABeanType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<Character> class0 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getClassDescription(list0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.hasClass(class0, class1);
      Double double0 = new Double(0.0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Null JavaType passed", ":Sb<Pny0j>a]h^&r2", (-108));
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<Float> class1 = Float.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.findConstructor(class2, false);
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperClasses(class1, class4, false);
      Class<String> class5 = String.class;
      ClassUtil.isCollectionMapOrArray(class5);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isProxyType(class1);
      String string0 = "N!l+Vk^xr$qG[";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "N!l+Vk^xr$qG[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<Character> class0 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getClassDescription(list0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.hasClass(class0, class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, double0, "org.hibernate.proxy.java.lang.String");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Double (of class com.fasterxml.jackson.databind.JsonMappingException) must override method 'org.hibernate.proxy.java.lang.String'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Hj:`{YDO%'", hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      hashMap0.putAll(map0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("java.lang.Short", clientInfoStatus1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      hashMap0.put("#^d?Z#Md~&zSbe", clientInfoStatus0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hj:`{YDO%'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.backticked("7");
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      System.setCurrentTimeMillis(445L);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.annotation.Nulls");
      ClassUtil.findEnumType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      System.setCurrentTimeMillis((-108L));
      Long long0 = new Long((-108L));
      ClassUtil.nameOf((Class<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getConstructors(class0);
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.isJacksonStdImpl(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.findEnumType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializers();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("elementType", (Class<?>) null, "elementType");
      ClassUtil.classOf(beanDeserializerFactory0);
      ClassUtil.classOf((Object) null);
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type [null] from String \"elementType\": elementType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Short> class0 = Short.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("/", "/", 2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/", sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "/", (Throwable) sQLNonTransientConnectionException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // /
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot figure out type for EnumSet (odd JDK platform?)");
      Class<Long> class1 = Long.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.findConstructor(class1, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Float> class0 = Float.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.", "com.fasterxml.jackson.databind.util.ClassUtil", (-202), hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("size", sQLClientInfoException0);
      sQLClientInfoException0.setNextException(sQLDataException0);
      ClassUtil.getRootCause(sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class0, class1);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      Class<ArrayType> class2 = ArrayType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType javaType0 = referenceType0.withContentTypeHandler((Object) null);
      Short short0 = new Short((short) (-9));
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) typeBindings0, (Object) short0);
      ArrayType arrayType1 = arrayType0.withTypeHandler((Object) null);
      arrayType1.getBindings();
      Class<Double> class3 = Double.class;
      ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaType0);
      ClassUtil.rawClass(javaType0);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.findConstructor(class4, true);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.nonNullString("ORlK=\"\"2lnCSUuDH7B");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.TYPE;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      Class<Long> class3 = Long.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.emptyIterator();
      Class<IOException> class4 = IOException.class;
      ClassUtil.nameOf(class4);
      Short short0 = new Short((short)2);
      Short short1 = new Short((short)2);
      Short short2 = new Short((short)1973);
      Short.valueOf((short)1973);
      try { 
        Short.valueOf("`java.io.IOException`", 3149);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 3149 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      Short short0 = new Short((short)3284);
      ClassUtil.nonNull((Short) null, short0);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil classUtil0 = new ClassUtil();
      Float float0 = new Float(1047.3F);
      ClassUtil.isJacksonStdImpl((Object) float0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaredMethods(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nonNullString("org.hibernate.proxy.");
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isBogusClass(class0);
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "net.sf.cglib.proxy.java.lang.String");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      Class<MapType> class0 = MapType.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.emptyIterator();
      TypeFactory.defaultInstance();
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Double with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<RuntimeException> class0 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("net.sf.cglib.proxy.java.lang.Float", "net.sf.cglib.proxy.java.lang.Float", (-7));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Float", "vals", 8, sQLSyntaxErrorException0);
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "Failed to find default constructor of class ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Failed to find default constructor of class ");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot figure out type for EnumSet (odd JDK platform?)");
      Class<String> class1 = String.class;
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.backticked("p|1}oIM=j )~aC c72");
      Class<Error> class1 = Error.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getGenericInterfaces(class0);
      Object object0 = null;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.getOuterClass(class0);
      Class<IOException> class1 = IOException.class;
      Class<Integer> class2 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getGenericSuperclass(class1);
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperClasses((Class<?>) null, class3, false);
      TypeBindings typeBindings0 = null;
      Class<AccessPattern> class4 = AccessPattern.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class4, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.util.AccessPattern with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float((-1.0));
      ClassUtil.nullOrToString(float0);
      ClassUtil.backticked(" has no default (no arg) constructor");
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qgfDs>Rk", "com.fasterxml.jackson.databind.JsonMappingException", (-1384));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: qgfDs>Rk
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findEnumType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<Float> class1 = Float.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findConstructor(class3, true);
      AnnotationMap.of(class1, (Annotation) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[1];
      annotationMapArray0[0] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, (Constructor<?>) null, annotationMap0, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<MapType> class3 = MapType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "l-sT<mm21N");
      ClassUtil.hasClass(jsonMappingException0, class3);
      ClassUtil.getPackageName(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.isJacksonStdImpl(class4);
      Class<Long> class5 = Long.class;
      ClassUtil.findConstructor(class5, false);
      Class<Long> class6 = Long.class;
      ClassUtil.getDeclaredMethods(class6);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaredFields(class3);
      ClassUtil.hasEnclosingMethod(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes(class4, (Class<?>) null);
      Class<String> class5 = String.class;
      ClassUtil.getOuterClass(class5);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      Class<Long> class3 = Long.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.nonNullString("org.hibernate.proxy.");
      ClassUtil.nonNull((Short) null, (Short) null);
      Class<Long> class4 = Long.class;
      ClassUtil.getOuterClass(class4);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      Class<Void> class1 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.hasClass(class0, class2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      String string0 = "{_V_NtED!8nY9";
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.getOuterClass(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Float float0 = new Float((-1.0F));
      ClassUtil.isJacksonStdImpl((Object) "{_V_NtED!8nY9");
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.nameOf(class0);
      Short short0 = new Short((short)2);
      Short short1 = new Short((short)2409);
      Short short2 = new Short((short)2084);
      ClassUtil.nonNull(short1, short2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setOutputDecorator(outputDecorator0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      Class<Byte> class0 = Byte.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Short> class1 = Short.class;
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      TypeBindings typeBindings0 = null;
      Class<String> class3 = String.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Byte with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.getOuterClass(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<Byte> class3 = Byte.class;
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.getGenericSuperclass(class4);
      ClassUtil.findSuperClasses(class3, class4, false);
      TypeBindings typeBindings0 = null;
      Class<String> class5 = String.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Long with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.backticked("");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "e|");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // e|
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.canBeABeanType(class0);
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class2);
      EnumMap<AccessPattern, CollectionType> enumMap1 = new EnumMap<AccessPattern, CollectionType>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      enumMap1.put(accessPattern0, collectionType0);
      Class<Integer> class3 = Integer.class;
      Class<Long> class4 = Long.class;
      CollectionType collectionType1 = typeFactory0.constructCollectionType(class1, class4);
      EnumMap<AccessPattern, CollectionLikeType> enumMap2 = new EnumMap<AccessPattern, CollectionLikeType>(class2);
      enumMap2.put(accessPattern0, (CollectionLikeType) collectionType1);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class4, false);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      constructor0.getName();
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getOuterClass(class3);
      Class<Double> class4 = Double.class;
      ClassUtil.isNonStaticInnerClass(class4);
      ClassUtil.getGenericSuperclass(class0);
      Class<Integer> class5 = Integer.class;
      Class<String> class6 = String.class;
      ClassUtil.findSuperClasses(class5, class6, true);
      TypeBindings typeBindings0 = null;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class3, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.RuntimeException with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionType> enumMap0 = new EnumMap<AccessPattern, CollectionType>(class3);
      EnumMap<AccessPattern, CollectionLikeType> enumMap1 = new EnumMap<AccessPattern, CollectionLikeType>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class4 = LinkedList.class;
      Class<LinkedList> class5 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class5);
      enumMap0.put(accessPattern0, collectionType0);
      Class<Integer> class6 = Integer.class;
      CollectionType collectionType1 = typeFactory0.constructCollectionType(class4, class6);
      enumMap1.put(accessPattern0, (CollectionLikeType) collectionType1);
      ClassUtil.findEnumType(enumMap1);
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class2, true);
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) class0, false);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Integer> class7 = Integer.class;
      ClassUtil.findConstructor(class7, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      MockThrowable.replacement_getStackTrace((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isLocalType(class0, false);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.hasClass((Object) null, class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "[Z3?L(RrX&f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Z3?L(RrX&f
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("nA8y*#-:>");
      ClassUtil.throwIfError(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Object object0 = new Object();
      String string0 = "";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, object0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Object (of class java.io.IOException) must override method ''
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      Double double0 = Double.valueOf(682.029225);
      ClassUtil.quotedOr(double0, "{_V_NtED!8nY9");
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.getOuterClass(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.findSuperClasses(class4, class2, true);
      TypeBindings typeBindings0 = null;
      Class<String> class5 = String.class;
      Class<AccessPattern> class6 = AccessPattern.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class6, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.util.AccessPattern with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil classUtil0 = new ClassUtil();
      Float float0 = new Float(1047.3F);
      ClassUtil.isJacksonStdImpl((Object) float0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaredMethods(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("keyUniverse", "keyUniverse", 86);
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.nonNullString("O]>^&>Br='");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("4d= AQtV~_Ekg]>YI");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLTimeoutException0.printStackTrace();
      sQLTimeoutException0.initCause(sQLSyntaxErrorException0);
      sQLTimeoutException0.printStackTrace();
      sQLTimeoutException0.printStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      Class<Long> class0 = Long.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.hasClass(class0, class2);
      Class<Short> class3 = Short.class;
      ClassUtil.getPackageName(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.isJacksonStdImpl(class4);
      ClassUtil.findConstructor(class4, true);
      ClassUtil.getDeclaredMethods(class4);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "Must call method with a container or reference type (got ", (-2450));
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0, "Must call method with a container or reference type (got ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must call method with a container or reference type (got 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Error> class0 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, " known properties: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Error) must override method ' known properties: '
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte) (-88);
      jsonFactory3.createParser(byteArray0, (int) (byte) (-65), (int) (byte) (-120));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "Z9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockException mockException0 = new MockException("java.time.chrono.Ch");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockException0;
      Class<Object> class0 = Object.class;
      byteArrayBuilder0.reset();
      Object object0 = ClassUtil.createInstance(class0, false);
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "java.time.chrono.Ch", objectArray0);
      mockException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, "java.time.chrono.Ch");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.time.chrono.Ch
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperTypes(class1, class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<ChronoLocalDate> class3 = ChronoLocalDate.class;
      ClassUtil.nameOf(class3);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, false);
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      MockThrowable mockThrowable0 = new MockThrowable();
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.throwIfError(mockThrowable0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.classOf(class2);
      System.setCurrentTimeMillis((-1146L));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockIOException mockIOException0 = new MockIOException();
      AnnotationMap annotationMap0 = new AnnotationMap();
      Float float0 = new Float(0.0);
      ClassUtil.isJacksonStdImpl((Object) float0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", 3);
      sQLTransientException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      TypeFactory.defaultInstance();
      ClassUtil.isJacksonStdImpl((Object) class0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.canBeABeanType(class0);
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.nameOf(class0);
      Short short0 = new Short((short)2409);
      ClassUtil.nonNull(short0, short0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(sQLSyntaxErrorException0);
      sQLNonTransientConnectionException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("|S#-`9C`N");
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.backticked("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("``");
      SQLWarning sQLWarning0 = new SQLWarning("e{JlM", sQLFeatureNotSupportedException0);
      sQLWarning0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // e{JlM
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      String string0 = null;
      ClassUtil.backticked((String) null);
      JsonMappingException.from((JsonGenerator) null, "[null]");
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        jsonGeneratorDelegate0.writeObjectRef((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isLocalType(class0, true);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      SQLException sQLException0 = new SQLException("[G]=9|HKE048", "V");
      sQLException0.getLocalizedMessage();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[G]=9|HKE048", "V", "dlw.^[CM", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("[G]=9|HKE048", "keyType", "[G]=9|HKE048", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("'NohP_EwFJ HPKFL5", "V", "[G]=9|HKE048", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("V", "entrySet", "Default constructor for ", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("V", "V", "'NohP_EwFJ HPKFL5", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("Class ", "bZE", "[G]=9|HKE048", 1536);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, "IuJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IuJ
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getDeclaredFields(class0);
      Throwable throwable0 = null;
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<AccessibleObject> class4 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Float> class5 = Float.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class5, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vals", "", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, batchUpdateException0);
      mockRuntimeException0.getSuppressed();
      ClassUtil.classOf(mockRuntimeException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperTypes((Class<?>) null, class1);
      ClassUtil.nonNullString("&-Cj_bR9SR");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassUtil.nonNullString((String) null);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass(placeholderForType0, class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "keyType", "keyType");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Object` from String \"keyType\": keyType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ClassUtil.emptyIterator();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable.replacement_getStackTrace(mockThrowable0);
      ClassUtil.getRootCause(mockThrowable0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getOuterClass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.isNonStaticInnerClass(class3);
      Class<Byte> class4 = Byte.class;
      Class<ChronoLocalDate> class5 = ChronoLocalDate.class;
      ClassUtil.getGenericSuperclass(class5);
      ClassUtil.findSuperClasses(class3, class3, false);
      TypeBindings typeBindings0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class5, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.time.chrono.ChronoLocalDate with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperTypes((Class<?>) null, class1);
      ClassUtil.nonNullString("keyType");
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("elementType", class0, "elementType");
      ClassUtil.classOf(jsonMappingException0);
      Class<?> class1 = ClassUtil.classOf("elementType");
      ClassUtil.emptyIterator();
      ClassUtil.nonNullString("q,]J2E%V;[u#j.3`");
      ClassUtil.isCollectionMapOrArray(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "q,]J2E%V;[u#j.3`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // q,]J2E%V;[u#j.3`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "e#%doTN|DZ@9W\"K";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(">", ",%5", 0, hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, ">", sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("[LNQcsBN", sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(">", "e#%doTN|DZ@9W\"K", sQLFeatureNotSupportedException1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, " in ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  in 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
