/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:56:22 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      ClassUtil.isBogusClass(class0);
      PropertyName propertyName0 = new PropertyName("!X?]c:~#kJ`$_&I", "!X?]c:~#kJ`$_&I");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, resolvedRecursiveType0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType");
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      ArrayType arrayType1 = arrayType0.withContentValueHandler((Object) null);
      ArrayType arrayType2 = arrayType1.withTypeHandler(arrayType0);
      Class<Annotation> class2 = Annotation.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) arrayType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType1, (JavaType[]) null, (JavaType) arrayType2);
      ArrayType arrayType3 = arrayType2.withValueHandler(collectionType0);
      ClassUtil.rawClass(arrayType3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ArrayType> enumMap0 = new EnumMap<AccessPattern, ArrayType>(class0);
      enumMap0.clear();
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.emptyIterator();
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "O,a[m");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      enumSet0.remove(accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.remove(accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withValueHandler(javaTypeArray0[0]);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Hm", "Hm", (-2));
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(mockRuntimeException0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class2 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "uHL%Ol`=s;z{;vR!3", "net.sf.cglib.proxy.java.lang.Double");
      ReferenceType referenceType3 = referenceType2.withTypeHandler(jsonMappingException0);
      ReferenceType referenceType4 = referenceType3.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) referenceType4, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf((Object) null);
      ClassUtil.quotedOr((Object) null, "lu\"`uD`]+U9at");
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.backticked("DXL@4w");
      ClassUtil.backticked("`DXL@4w`");
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.findClassAnnotations(class0);
      Class<MapType> class1 = MapType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassUtil.isProxyType(class1);
      Class<Character> class2 = Character.class;
      Class<CollectionType> class3 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class2, class3, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{FG0D{X@O&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-8), 6);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockRuntimeException0, (Object) "{FG0D{X@O&", (-1438));
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was org.evosuite.runtime.mock.java.lang.MockRuntimeException) (through reference chain: java.lang.String[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(", no static serializer", ", no static serializer", (-3));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLTransientException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassUtil.nonNullString("java.lang.annotatio");
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<InputStream>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isBogusClass(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      MockIOException mockIOException0 = new MockIOException("Sub-class %s (of class %s) must override method '%s'");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isNonStaticInnerClass(class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      MockError mockError0 = new MockError();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.RuntimeEx");
      mockError0.addSuppressed(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) charArrayReader0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "Wd#R7w4");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: Wd#R7w4
         //  at [Source: (CharArrayReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.canBeABeanType(class0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLWarning sQLWarning0 = new SQLWarning("enum", "enum", (-511));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.remove(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ArrayType> enumMap0 = new EnumMap<AccessPattern, ArrayType>(class0);
      EnumMap<AccessPattern, ArrayType> enumMap1 = new EnumMap<AccessPattern, ArrayType>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<Integer> class1 = Integer.class;
      Class<Long> class2 = Long.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0, (Object) null, (Object) collectionLikeType0);
      StringBuilder stringBuilder0 = new StringBuilder("enum");
      StringBuilder stringBuilder1 = mapLikeType0.getGenericSignature(stringBuilder0);
      arrayType0.getErasedSignature(stringBuilder1);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(mapLikeType0);
      ArrayType arrayType2 = arrayType1.withValueHandler(accessPattern0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      enumMap0.put(accessPattern0, arrayType2);
      enumMap1.clone();
      ClassUtil.findEnumType(enumMap0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" slots is now full (all ", (String) null, hashMap0);
      SQLDataException sQLDataException0 = new SQLDataException("<0.%M", "java.lang.Object", sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ArrayType> enumMap0 = new EnumMap<AccessPattern, ArrayType>(class0);
      EnumMap<AccessPattern, ArrayType> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, ArrayType> enumMap2 = enumMap1.clone();
      EnumMap<AccessPattern, ArrayType> enumMap3 = enumMap2.clone();
      EnumMap<AccessPattern, ArrayType> enumMap4 = enumMap3.clone();
      ClassUtil.findEnumType(enumMap4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getCause();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.lang.Error", "3U-5I4VnmiS1l8G'kK", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector0);
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(jsonGenerator_Feature2);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(5248, 5248);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(jsonGenerator_Feature0);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType2 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) collectionType1);
      CollectionType collectionType3 = collectionType2.withStaticTyping();
      Class<Boolean> class2 = Boolean.TYPE;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperTypes((JavaType) collectionType3, (Class<?>) class3, true);
      Boolean boolean0 = new Boolean(false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNull((HashMap<LinkedList, NoClass>) null, (HashMap<LinkedList, NoClass>) null);
      ClassUtil.classNameOf((Object) null);
      Class<Double> class1 = Double.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.java.lang.annotation.Annotation");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.ser.std.NumberSerializer");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.NumberSerializer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      String string0 = null;
      ClassUtil.verifyMustOverride(class0, accessPattern0, (String) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = Double.valueOf((-1.0));
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 346, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getDeclaredMethods(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaringClass(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ClassUtil.rawClass(javaType0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaredFields(class2);
      ClassUtil.throwIfError((Throwable) null);
      Class<String> class3 = String.class;
      ClassUtil.isBogusClass(class3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      ObjectReader objectReader2 = objectReader1.withFeatures(formatFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader2);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonFactory0.enable(jsonParser_Feature1);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet.range(accessPattern0, accessPattern0);
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(".P2yTg]E?-zh]\"0");
      ClassUtil.quotedOr(mockRuntimeException0, ".P2yTg]E?-zh]\"0");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[9];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[2] = annotationMap0;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap0;
      annotationMapArray0[5] = annotationMap0;
      annotationMapArray0[6] = annotationMap0;
      annotationMapArray0[7] = annotationMap0;
      annotationMapArray0[8] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap0, annotationMapArray0);
      Constructor<?> constructor1 = annotatedConstructor0.getAnnotated();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf((Object) null);
      Long long0 = new Long(0L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.classOf(long0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "[null]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredMethods(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<NoClass> class0 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "hn1Hm`8F", "hn1Hm`8F");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.annotation.NoClass` from String \"hn1Hm`8F\": hn1Hm`8F
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      MockError mockError0 = new MockError();
      mockError0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.primitiveType(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      ClassUtil.throwIfError(sQLNonTransientException0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getPackageName(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.backticked("m7@aNN1la</`Pm8MAP");
      ClassUtil.getClassMethods(class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class2, (JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.RuntimeException with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SQLException sQLException0 = new SQLException();
      Class<POJONode> class0 = POJONode.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeFactory.defaultInstance();
      System.setCurrentTimeMillis((-1562L));
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasClass(placeholderForType0, class0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      ClassUtil.getRootCause(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "6'W\"I");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.hasClass(class0, class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isLocalType(class1, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      Class<Integer> class1 = Integer.class;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ClassUtil.findConstructor(class1, false);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl((Object) fileSystemHandling0);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.rawClass(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long.getLong("c}MSDv#");
      Class<String> class0 = String.class;
      Class<Boolean> class1 = Boolean.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class0, class2);
      ClassUtil.getOuterClass(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("~ezbl`E3S!-Ec#N", " is not a primitive type", 167);
      sQLTransientException0.spliterator();
      ClassUtil.getRootCause(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" is not a primitive type", "|5'TwTSdr82j^9<", 407);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"%s\"");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "=\",o", objectArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(printStream0, "=\",o");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TypeFactory.defaultInstance();
      Object object0 = new Object();
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "{)");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.classNameOf(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.java.lang.Long", "UTF8");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isProxyType(class0);
      MockIOException mockIOException0 = new MockIOException("java.lang.String");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.java.lang.Boolean", "java.lang.String", 34, mockIOException0);
      mockIOException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(" is not a primitive type", "q]45\"q*gg[w3!9@,jz", (-335), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TypeFactory.defaultInstance();
      Object object0 = new Object();
      ClassUtil.isJacksonStdImpl(object0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Throwable throwable0 = null;
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("J_5n 60]8ogQG7];9");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassDescription((Object) null);
      classUtil_Ctor1.getParamCount();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withContentValueHandler(typeFactory0);
      Character character0 = new Character('V');
      MapType mapType2 = mapType1.withStaticTyping();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.invalidTypeIdException(mapType2, "h9H5?'^]R$R", "JJ8yTQv5,6'Hc'wvK");
      JavaType javaType0 = typeFactory0.constructType((Type) mapType2);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(javaType0, class1, true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.canBeABeanType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParamCount();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("J_5n 60]8og^QG7];9");
      ClassUtil.getClassDescription(mockRuntimeException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Character> class1 = Character.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      Class<Integer> class2 = Integer.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      objectReader1.createObjectNode();
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class2, class3);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isConcrete(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isBogusClass(class2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getPackageName(class0);
      int int0 = (-1);
      try { 
        Integer.valueOf("java.lang", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.nonNull((String) null, "net.sf.cglib.proxy.java.lang.Long");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1102);
      intArray0[1] = (-1);
      SQLWarning sQLWarning0 = new SQLWarning("primit:ve", (String) null, (-1));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("va", " bytes (out of ", intArray0, sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      MockError mockError0 = new MockError("primit:ve", sQLTransactionRollbackException0);
      MockIOException mockIOException0 = new MockIOException(mockError0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: primit:ve
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      mapType0.withContentValueHandler(typeFactory0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      ClassUtil.throwIfError(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.emptyIterator();
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      Boolean boolean0 = new Boolean(true);
      constructor0.setAccessible((boolean) boolean0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParamCount();
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor2.getConstructor();
      ClassUtil.isConcrete((Member) classUtil_Ctor1._ctor);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isBogusClass(class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      boolean boolean0 = new Boolean(true);
      ClassUtil.primitiveType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Void> class1 = Void.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isConcrete(class3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isConcrete(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.nonNullString((String) null);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.canBeABeanType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getGenericSuperclass(class3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(1);
      ClassUtil.classNameOf(integer0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.quotedOr((Object) null, "`java.lang.Integer`");
      ClassUtil.nonNullString("`java.lang.Integer`");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      Class<CollectionType> class2 = CollectionType.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.findEnumType(class4);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      Class<Double> class5 = Double.class;
      ClassUtil.isObjectOrPrimitive(class5);
      Class<String> class6 = String.class;
      ClassUtil.findSuperTypes(class6, class2, list0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class6, javaTypeArray0);
      Class<MapLikeType> class7 = MapLikeType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class7, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler((Object) null);
      Class<Character> class8 = Character.class;
      ClassUtil.findSuperTypes(javaType0, class8, false);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      mapType0.withContentValueHandler(typeFactory0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      Class<CollectionType> class1 = CollectionType.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.findEnumType(class0);
      Class<RuntimeException> class3 = RuntimeException.class;
      Class<RuntimeException> class4 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class4, true);
      ClassUtil.nonNullString(".hIW<6");
      ClassUtil.getRootCause(runtimeException0);
      ClassUtil.isObjectOrPrimitive(class2);
      Class<String> class5 = String.class;
      ClassUtil.findSuperTypes(class3, class5, list0);
      Class<Integer> class6 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class6, javaTypeArray0);
      Class<MapLikeType> class7 = MapLikeType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class7, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withTypeHandler(typeFactory0);
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType1, (Class<?>) class1, true);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      boolean boolean0 = new Boolean((String) null);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.isConcrete(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.hasClass((Object) null, class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      Class<Boolean> class1 = Boolean.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getOuterClass(class1);
      Class<String> class3 = String.class;
      ClassUtil.isBogusClass(class3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class4, false);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "3s", "3s");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from String \"3s\": 3s
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(9.223372036854776E18);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "JJ8yTQv5,6'Hc'wvK", "B\"_[Cu");
      TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      JsonMappingException jsonMappingException1 = new JsonMappingException((Closeable) null, "java.io.IOException");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'JJ8yTQv5,6'Hc'wvK' as a subtype of null: B\"_[Cu
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2222;
      intArray0[1] = 1;
      intArray0[2] = 2000;
      intArray0[3] = 753;
      intArray0[4] = (-1746375819);
      intArray0[5] = 3204;
      intArray0[6] = 663;
      intArray0[7] = (-2119);
      intArray0[8] = (-1653959476);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = "Lw_}/0IJET(CCJ={Xdt";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 3204;
      objectArray0[1] = (Object) 2000;
      objectArray0[2] = (Object) 3204;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext((TokenFilter) null);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(objectArray0[1]);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "Lw_}/0IJET(CCJ={Xdt", jsonLocation0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      Class<IOException> class1 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty");
      Class<Float> class2 = Float.class;
      ClassUtil.getConstructors(class2);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      AbstractDeserializer abstractDeserializer0 = null;
      try {
        abstractDeserializer0 = new AbstractDeserializer(beanDeserializerBuilder0, basicBeanDescription0, hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, false);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.canBeABeanType(class3);
      Class<String> class4 = String.class;
      ClassUtil.isLocalType(class4, false);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      Class<Integer> class2 = Integer.TYPE;
      ClassUtil.getDeclaredMethods(class2);
      String string0 = "org.hibernate.proxy.";
      ClassUtil.backticked("net.sf.cglib.proxy.");
      int int0 = 0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-951));
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      Class<Float> class1 = Float.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isConcrete(class2);
      ClassUtil.isLocalType(class2, true);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.classNameOf(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("[]", "%mPKKy-?", 3093);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.classNameOf(class0);
      Class<String> class1 = String.class;
      Class<Error> class2 = Error.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Short> class3 = Short.class;
      ClassUtil.canBeABeanType(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.isConcrete(class4);
      ClassUtil.isLocalType(class4, false);
      Class<NoClass> class5 = NoClass.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class4, (List<JavaType>) linkedList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      Class<Short> class6 = Short.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IOException> class7 = IOException.class;
      Class<String> class8 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class7, class8, class6);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class6, (String) null, mapLikeType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class5, (Object) null, "PCl,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("serialVersionUID", ">e-sNs]*OYE6Do");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "serialVersionUID");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long.getLong("c}MSDv#");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("c}MSDv#");
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings1);
      Double double0 = new Double((-1214.62095425));
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasClass("c}MSDv#", class0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)2;
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<String> class1 = String.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getAnnotatedReceiverType();
      constructor0.getParameterAnnotations();
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.io.IOException");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double(9.223372036854776E18);
      SQLTransientException sQLTransientException0 = new SQLTransientException("size", "size", (-2));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "size", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("size");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) objectMapper1;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) "size";
      objectArray0[4] = (Object) jsonEncoding0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "size", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper1, printStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1, (-4317));
      placeholderForType0.serialize(jsonGenerator0, defaultSerializerProvider0);
      Class<?> class0 = ClassUtil.classOf(mockFileOutputStream0);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.classNameOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<NoClass> class3 = NoClass.class;
      Class<Float> class4 = Float.class;
      boolean boolean0 = false;
      ClassUtil.findSuperClasses(class3, class4, false);
      ClassUtil.canBeABeanType(class2);
      Class<Double> class5 = Double.class;
      ClassUtil.isConcrete(class5);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Error is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("N#i~'q#D/n", "Y2l=hEB0W_g.:\"$:[", 264, sQLIntegrityConstraintViolationException0);
      Class<Character> class0 = Character.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Float float0 = new Float((float) 264);
      ClassUtil.nonNullString("9dZe1%");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 895);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 895, sQLTransactionRollbackException0);
      int[] intArray0 = new int[9];
      intArray0[0] = 895;
      intArray0[1] = 895;
      intArray0[2] = 895;
      intArray0[3] = 895;
      intArray0[4] = 895;
      intArray0[5] = 895;
      intArray0[6] = 895;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      intArray0[7] = 895;
      intArray0[8] = 895;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransientException0);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Float> class0 = Float.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<CollectionType> class1 = CollectionType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Character character0 = new Character('u');
      TypeBindings typeBindings1 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      Class<Long> class2 = Long.class;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[0], javaType0);
      JavaType javaType1 = referenceType0.getReferencedType();
      JavaType javaType2 = typeFactory0.constructReferenceType(class2, javaType1);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings1, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaType0, javaType2);
      MockError mockError0 = new MockError();
      mapType0.withValueHandler(javaType2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.classOf(class0);
      Class<Double> class3 = Double.class;
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      typeFactory0.constructRawMapType(class0);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLIntegrityConstraintViolationException0);
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.nonNull("SI\".HTa:-tBM-Ib", "net.sf.cglib.proxy.");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 8);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Long.getLong("c}MSDv#");
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass((Object) null, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings1);
      Class<Long> class1 = Long.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[8];
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Character character0 = new Character('Q');
      Class<CollectionType> class2 = CollectionType.class;
      TypeBindings typeBindings2 = TypeBindings.emptyBindings();
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings2, javaType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaType0);
      MockError mockError0 = new MockError();
      MapLikeType mapLikeType0 = mapType0.withValueHandler(mockError0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.invalidTypeIdException(mapType0, "h9H5?'^]R$R", "h9H5?'^]R$R");
      mapLikeType0.withKeyTypeHandler(mapType0);
      ClassUtil.nonNull(mapLikeType0, mapLikeType0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.backticked("org.hibernate.proxy.");
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNullString(") in base64 content");
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, (Class<?>) null);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findEnumType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class2, false);
      ClassUtil.nonNullString(") in base64 content");
      ClassUtil.getRootCause(runtimeException0);
      Class<Double> class3 = Double.class;
      ClassUtil.isObjectOrPrimitive(class3);
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class1, (Class<?>) null, list0);
      Class<Integer> class4 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      Class<Byte> class5 = Byte.class;
      TypeBindings.create(class5, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withTypeHandler(list1);
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType1, (Class<?>) class2, false);
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = true;
      Class<Long> class0 = Long.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("N#i~'q#D/n", "Y2l=hEB0W_g.:\"$:[", 264, sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLIntegrityConstraintViolationException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLIntegrityConstraintViolationException0);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, true);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findConstructor(class3, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("ZERO_LENGTH_ENUM_ARRAY", "|T", Integer.MAX_VALUE);
      ClassUtil.getRootCause(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, (Throwable) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sQLNonTransientException0.spliterator();
      sQLNonTransientException0.printStackTrace();
      sQLNonTransientException0.getStackTrace();
      sQLNonTransientException0.getStackTrace();
      sQLNonTransientException0.getStackTrace();
      sQLNonTransientException0.getSuppressed();
      ClassUtil.getRootCause(sQLNonTransientException0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.isBogusClass((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1243);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",_ 6hHhB[Rj)V&.!", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(",_ 6hHhB[Rj)V&.!");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      placeholderForType0.serialize(jsonGenerator0, defaultSerializerProvider0);
      Class<?> class0 = ClassUtil.classOf(placeholderForType0);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.classNameOf(class0);
      Class<Long> class1 = Long.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class2);
      Class<Error> class3 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Boolean> class2 = Boolean.class;
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.getOuterClass(class2);
      Class<String> class4 = String.class;
      ClassUtil.isBogusClass(class4);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" is not a primitive type", "|5'TwTSdr82j^9<", Integer.MAX_VALUE);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1569;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "PC[", 1569, intArray0, sQLTransientException0);
      sQLTransientException0.addSuppressed(batchUpdateException0);
      ClassUtil.getRootCause(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 84;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$}j-X-QE", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "6Ne$R[3T~$PGsQ/5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getClassMethods(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isConcrete(class1);
      MockError mockError0 = new MockError();
      MockError mockError1 = new MockError("-&}?gY%s(3RIip");
      Throwable throwable0 = mockError1.fillInStackTrace();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-&}?gY%s(3RIip", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(throwable0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, true);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.quotedOr(list0, "ZERO_LENGTH_ENUM_ARRAY");
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class4 = Object.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      constructor0.setAccessible(true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getConstructor();
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1534;
      intArray0[2] = 2945;
      intArray0[3] = 2712;
      intArray0[4] = 0;
      intArray0[5] = (-2209);
      intArray0[6] = 637;
      intArray0[7] = 1736;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "; failed to set access: ", intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, batchUpdateException0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<NoClass> class4 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class4, sQLIntegrityConstraintViolationException0, "; failed to set access: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.sql.SQLIntegrityConstraintViolationException (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method '; failed to set access: '
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot update Map.Entry values");
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withContentValueHandler(typeFactory0);
      Character character0 = new Character('V');
      MapLikeType mapLikeType0 = mapType1.withValueHandler(character0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(mapLikeType0, "h9H5?'^]R$R", "JJ8yTQv5,6'Hc'wvK");
      MapLikeType mapLikeType1 = mapLikeType0.withKeyTypeHandler(jsonMappingException0);
      ClassUtil.nonNull(mapLikeType1, mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializers();
      deserializerFactoryConfig0.keyDeserializers();
      deserializerFactoryConfig0.valueInstantiators();
      deserializerFactoryConfig0.deserializerModifiers();
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findClassAnnotations(class0);
      Class<String> class1 = String.class;
      ClassUtil.canBeABeanType(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.findClassAnnotations(class0);
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, "'CS'lxq5h,9O)LK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'CS'lxq5h,9O)LK
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1243);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",_ 6hHhB[Rj)V&.!", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(",_ 6hHhB[Rj)V&.!");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1243);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, true);
      Class<SimpleType> class1 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Long.getLong("c}MSDv#");
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      Class<String> class1 = String.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Boolean> class3 = Boolean.class;
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class1, class4);
      ClassUtil.getOuterClass(class3);
      ClassUtil.isBogusClass(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("~ezbl`E3S!-Ec#N", " is not a primitive type", 167);
      sQLTransientException0.spliterator();
      ClassUtil.getRootCause(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" is not a primitive type", "|5'TwTSdr82j^9<", 407);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class3 = Object.class;
      ClassUtil.createInstance(class3, true);
      Class<Integer> class4 = Integer.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.quotedOr(class1, "ZERO_LENGTH_ENUM_ARRAY");
      Class<Long> class5 = Long.class;
      try { 
        ClassUtil.createInstance(class5, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked("com.fasterxml.jackson.databind.JsonSerializable$Base");
      int[] intArray0 = new int[5];
      intArray0[0] = 1023;
      intArray0[1] = 1023;
      intArray0[2] = 1023;
      intArray0[3] = 1023;
      intArray0[4] = 1023;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`com.fasterxml.jackson.databind.JsonSerializable$Base`");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(throwable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@(Ki%%(yu=Z9", intArray0, sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.util.ArrayIterator", "com.fasterxml.jackson.databind.JsonSerializable$Base", 1023, batchUpdateException0);
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      Class<SimpleType> class1 = SimpleType.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Class@0000000001");
      ClassUtil.isConcrete(class1);
      String string0 = "{";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.Class@0000000001", "NULL", 3);
      SQLException sQLException0 = new SQLException("{", "{", 3, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "NULL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.findEnumType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Float> class0 = Float.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      ClassUtil.getOuterClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.throwIfIOE(throwable0);
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      Throwable throwable0 = ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ZBF2SU-A<[_k", throwable0);
      Throwable throwable1 = sQLFeatureNotSupportedException0.fillInStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      sQLFeatureNotSupportedException0.forEach(consumer0);
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(throwable1);
      Class<Character> class0 = Character.class;
      ClassUtil.nameOf(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isBogusClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Boolean> class2 = Boolean.class;
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.getOuterClass(class2);
      Class<String> class4 = String.class;
      ClassUtil.isBogusClass(class4);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" is not a primitive type", "|5'TwTSdr82j^9<", Integer.MAX_VALUE);
      ClassUtil.getRootCause(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("|5'TwTSdr82j^9<", "|5'TwTSdr82j^9<", Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "iH8#sgXR\"";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("iH8#sgXR\"");
      sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLRecoverableException0);
      Class<Double> class0 = Double.class;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      String string1 = "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator";
      String string2 = "8*s9kK:&CaG0V";
      int int0 = 1635;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", (String) null, "8*s9kK:&CaG0V", 1635);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Long.getLong("c}MSDv#");
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass((Object) null, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings1);
      Class<Long> class1 = Long.class;
      Class<Character> class2 = Character.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[8];
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class3 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class3, "com.fasterxml.jackson.databind.JsonSerializer", "com.fasterxml.jackson.databind.JsonSerializer");
      JavaType javaType1 = resolvedRecursiveType0.withTypeHandler(jsonMappingException0);
      javaTypeArray0[0] = javaType1;
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<IOException>[] classArray0 = (Class<IOException>[]) Array.newInstance(Class.class, 0);
      JavaType javaType2 = typeFactory1.constructParametricType(class2, classArray0);
      javaTypeArray0[1] = javaType2;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class2, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[3]);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "c}MSDv#", referenceType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.classNameOf(class0);
      Class<Long> class1 = Long.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Cannot call setValue() on constructor parameter of ", "C8uN$\"RqoDA", (-875));
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransientException0);
      ClassUtil.throwIfRTE(throwable0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.primitiveType(class0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findConstructor(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil.nonNullString("entrySet");
      ClassUtil.getClassDescription("entrySet");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotation(class4);
      constructor0.setAccessible(true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Character> class5 = Character.class;
      ClassUtil.isObjectOrPrimitive(class5);
      MockError mockError0 = new MockError();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockError0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(mockThrowable0);
      batchUpdateException0.getSuppressed();
      batchUpdateException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0, "elementType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1534;
      intArray0[2] = 2945;
      intArray0[3] = 2712;
      intArray0[4] = 0;
      intArray0[5] = (-2209);
      intArray0[6] = 619;
      intArray0[7] = 1736;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "; failed to set access: ", intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, batchUpdateException0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      MockThrowable mockThrowable0 = new MockThrowable("^");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) null, 1159);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      JsonMappingException.from(deserializationContext0, "zVo8/cYb'|U@0S");
      MockIOException mockIOException0 = new MockIOException("^", jsonMappingException0);
      ClassUtil.throwRootCauseIfIOE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nonNullString((String) null);
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, true);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.quotedOr(list0, "ZERO_LENGTH_ENUM_ARRAY");
      Class<Long> class4 = Long.class;
      try { 
        ClassUtil.createInstance(class4, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isConcrete(class1);
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-&}?gY%s(3RIip", mockError0);
      ClassUtil.throwIfError(sQLNonTransientException0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaringClass(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1087), (ObjectCodec) null, (OutputStream) null, byteArray0, 3825, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: -&}?gY%s(3RIip
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "";
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Double> class1 = Double.class;
      ClassUtil.getPackageName(class1);
      Class<MapType> class2 = MapType.class;
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isObjectOrPrimitive(class1);
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<AccessPattern> class2 = AccessPattern.class;
      defaultSerializerProvider_Impl1.getUnknownTypeSerializer(class2);
      defaultSerializerProvider_Impl1.getGenerator();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("non-static member class", iterator0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1243);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",_ 6hHhB[Rj)V&.!", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(",_ 6hHhB[Rj)V&.!");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      placeholderForType0.serialize(jsonGenerator0, defaultSerializerProvider0);
      ClassUtil.classOf(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2124);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("kpPw%'38?tbYB~dXo", "local/anonymous", sQLNonTransientException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("kpPw%'38?tbYB~dXo", "TO~X", 0, sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericSuperclass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      int[] intArray0 = new int[7];
      intArray0[0] = 3189;
      intArray0[1] = (-1458);
      intArray0[2] = 128;
      intArray0[3] = (-472);
      intArray0[4] = 0;
      intArray0[5] = 9;
      intArray0[6] = 8;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector", "~Y9}]%hso", intArray0);
      batchUpdateException0.spliterator();
      ClassUtil.throwIfError(batchUpdateException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1624));
      placeholderForType0.getErasedSignature();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, placeholderForType0, "~Y9}]%hso");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.PlaceholderForType (of class com.fasterxml.jackson.databind.JsonMappingException) must override method '~Y9}]%hso'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.nameOf(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper2, (OutputStream) null, byteArray0, (-964), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      MockIOException mockIOException0 = new MockIOException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/(Z{``y'n,e", mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: /(Z{``y'n,e
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Boolean> class2 = Boolean.class;
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.getOuterClass(class2);
      Class<String> class4 = String.class;
      ClassUtil.isBogusClass(class4);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<SimpleType> class1 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
