/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:33:45 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.UUID;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.isProxyType(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w-L");
      ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.getDeclaringClass(class1);
      System.setCurrentTimeMillis(0L);
      ClassUtil.isConcrete(class0);
      ClassUtil.nullOrToString(class2);
      Class<TypeIdResolver> class3 = TypeIdResolver.class;
      ClassUtil.findConstructor(class3, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      MockFile mockFile0 = new MockFile("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.GERMANY;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "JSON", (Object[]) typeArray0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a}^");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperTypes(class0, class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      int int0 = 91;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessPattern> class2 = AccessPattern.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class2);
      objectReader0.forType((JavaType) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) stringBuffer0, 1611, 77);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 77
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.classNameOf(class0);
      ClassUtil.nameOf(class0);
      Class<Character> class1 = Character.TYPE;
      ClassUtil.wrapperType(class1);
      Class<Long> class2 = Long.TYPE;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.backticked("`double`");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      jsonFactory2.disable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.keyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      Class<JsonSerializer> class1 = JsonSerializer.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockError mockError0 = new MockError("x1lk");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "x1lk");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Double");
      Character character0 = new Character('S');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.classNameOf(character0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ln9q)q,");
      Float float0 = new Float((-2741.6107792508));
      ClassUtil.classOf(float0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.primitiveType(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, "8");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of [null]: 8
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      ClassUtil.emptyIterator();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findClassAnnotations(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructSimpleType(class0, (JavaType[]) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      referenceType0.withContentType(javaType0);
      JavaType javaType1 = referenceType0.getContentType();
      ClassUtil.rawClass(javaType1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Long long0 = new Long((-2591L));
      Class<Module> class1 = Module.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(long0, class1, "0AB1((_Bn!(");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("0AB1((_Bn!(", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.Module` from number -2591: 0AB1((_Bn!(
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.classNameOf(class1);
      Class<MinimalClassNameIdResolver> class2 = MinimalClassNameIdResolver.class;
      ClassUtil.findConstructor(class2, false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isConcrete(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<NoClass> class2 = NoClass.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.getOuterClass(class4);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.com.fasterxml.jackson.annotation.ObjectIdResolver");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "net.sf.cglib.proxy.com.fasterxml.jackson.annotation.ObjectIdResolver");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "Cannot figure out type for EnumMap (odd JDK platform?)");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<MinimalClassNameIdResolver> class1 = MinimalClassNameIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<String> class2 = String.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      JavaType javaType0 = resolvedRecursiveType0.withContentType(collectionType1);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findSuperTypes(javaType0, class3, true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.findSuperTypes(class0, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<IOException> class1 = IOException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withContentValueHandler(class1);
      MapType mapType2 = mapType1.withKeyType(simpleType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(39);
      mapType0.withKeyTypeHandler(placeholderForType0);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(67);
      placeholderForType1.getContentType();
      JavaType javaType0 = typeFactory1.moreSpecificType(mapType2, (JavaType) null);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaringClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, placeholderForType0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.defaultValue(class0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getDeclaringClass(class1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1197;
      intArray0[1] = 1197;
      intArray0[2] = 1197;
      intArray0[3] = 1197;
      intArray0[4] = (-586);
      intArray0[5] = 1197;
      intArray0[6] = 1197;
      intArray0[7] = 1197;
      intArray0[8] = 1197;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring", "java.io.PipedWriter", 1197, intArray0);
      Throwable throwable0 = ClassUtil.throwIfRTE(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "java.io.PipedWriter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.io.PipedWriter
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Float> class1 = Float.class;
      Class<Module> class2 = Module.class;
      ClassUtil.findSuperTypes(class1, class2);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.nameOf(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.LinkedNode", sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning("p1|nukVU2i>1b", "`com.fasterxml.jackson.databind.type.ReferenceType`", (-2309), sQLException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("p1|nukVU2i>1b", sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "net.sf.cglib.proxy.java.io.PipedWriter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.isJacksonStdImpl(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.java.lang.reflect.AccessibleObject");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*}8l.}+U@LT&,", (String) null, (-1513967666), mockRuntimeException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ty2m`4S3OaxC>2me");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I=Z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredFields(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      ClassUtil.isConcrete(class0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Character character0 = new Character('C');
      ClassUtil.classOf(character0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Reader) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '/';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      jsonFactory0.createParser(charArray0, 2, 639);
      boolean boolean0 = true;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isLocalType(class0, true);
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, filterOutputStream0, byteArray0, (-3348), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((byte) (-16), 1645);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((byte)106, class0, "iL~p>");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.DataInputStream` from number 106: iL~p>
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "T6(bp");
      System.setCurrentTimeMillis((-1626L));
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, accessPattern1);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = new EnumMap<AccessPattern, AccessPattern>(enumMap0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.getDeclaredMethods(class1);
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, AccessPattern> enumMap2 = new EnumMap<AccessPattern, AccessPattern>(enumMap1);
      ClassUtil.findEnumType(enumMap2);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.findConstructor(class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Void> class1 = Void.TYPE;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern[] accessPatternArray0 = new AccessPattern[8];
      accessPatternArray0[0] = accessPattern0;
      accessPatternArray0[1] = accessPattern0;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[2] = accessPattern1;
      accessPatternArray0[3] = accessPattern0;
      accessPatternArray0[4] = accessPattern0;
      accessPatternArray0[5] = accessPattern0;
      accessPatternArray0[6] = accessPattern0;
      accessPatternArray0[7] = accessPattern0;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.toString();
      ClassUtil.classNameOf(mockRuntimeException0);
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-165));
      ClassUtil.verifyMustOverride(class0, placeholderForType0, "org.hibernate.proxy.");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<ObjectNode> class0 = ObjectNode.class;
      ClassUtil.findSuperTypes(class0, class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = javaType0;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[0], javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(beanProperty_Bogus0);
      javaTypeArray0[1] = (JavaType) referenceType2;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      ReferenceType referenceType3 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, javaType0, javaTypeArray0, (JavaType) referenceType2);
      ReferenceType referenceType4 = referenceType3.withContentValueHandler(javaTypeArray0[5]);
      ClassUtil.findSuperTypes((JavaType) referenceType4, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.isProxyType(class1);
      ClassUtil.nonNullString("y~.Dt37>@9y>$6S");
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isBogusClass(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.isLocalType(class1, false);
      Character character0 = Character.valueOf('f');
      Class<Character> class4 = Character.class;
      ClassUtil.hasClass(character0, class4);
      ClassUtil.hasClass("y~.Dt37>@9y>$6S", class3);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      objectIdGenerators_UUIDGenerator0.key(character0);
      TypeBindings typeBindings0 = null;
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      javaTypeArray0[5] = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3174));
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler(fileSystemHandling0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isJacksonStdImpl(class0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.getDeclaringClass(class0);
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonDeserializer";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonDeserializer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("D%pS/eJ0T", sQLFeatureNotSupportedException0);
      MockIOException mockIOException0 = new MockIOException("D%pS/eJ0T", sQLNonTransientConnectionException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // D%pS/eJ0T
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern[] accessPatternArray0 = new AccessPattern[1];
      accessPatternArray0[0] = accessPattern0;
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(123);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(class0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(object0);
      Class<SimpleModule> class1 = SimpleModule.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) referenceType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      JavaType javaType0 = referenceType2.refine(class1, typeBindings0, referenceType0, javaTypeArray0);
      referenceType2.getTypeName();
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperTypes(javaType0, class2, false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockException mockException0 = new MockException();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern[] accessPatternArray0 = new AccessPattern[0];
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      Predicate<AccessPattern> predicate0 = Predicate.isEqual((Object) enumSet0);
      Predicate<AccessPattern> predicate1 = predicate0.or(predicate0);
      Predicate<AccessPattern> predicate2 = predicate1.and(predicate0);
      Predicate<AccessPattern> predicate3 = predicate2.negate();
      enumSet0.removeIf(predicate3);
      ClassUtil.findEnumType(enumSet0);
      Object object0 = new Object();
      ClassUtil.classOf(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("D+QEj^~V//x9vP:y", "org.hibernate.proxy.com.fasterxml.jackson.databind.Module", (Map<String, ClientInfoStatus>) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.com.fasterxml.jackson.core.JsonFactory", "QS>T@[;", sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern[] accessPatternArray0 = new AccessPattern[4];
      accessPatternArray0[0] = accessPattern0;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[1] = accessPattern1;
      accessPatternArray0[2] = accessPattern0;
      accessPatternArray0[3] = accessPattern0;
      Boolean boolean0 = new Boolean("net.sf.cglib.proxy.com.fasterxml.jackson.databind.SerializationConfig");
      ClassUtil.findEnumType((Enum<?>) accessPattern1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockException mockException0 = new MockException();
      ClassUtil.throwIfRTE(mockException0);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.com.fasterxml.jackson.core.JsonFactory");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.com.fasterxml.jackson.core.JsonFactory", "org.hibernate.proxy.com.fasterxml.jackson.core.JsonFactory", hashMap0);
      mockIOException0.addSuppressed(sQLClientInfoException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.classNameOf(class1);
      ClassUtil.emptyIterator();
      ClassUtil.nameOf(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, " (from class ");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE:  (from class 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0, "com.fasterxml.jackson.core.JsonParser");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.core.JsonParser
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockError mockError0 = new MockError("HJQJ0dP9");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern[] accessPatternArray0 = new AccessPattern[4];
      accessPatternArray0[0] = accessPattern0;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[1] = accessPattern1;
      accessPatternArray0[2] = accessPattern0;
      accessPatternArray0[3] = accessPattern0;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((float) 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Boolean> class0 = Boolean.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.filter.TokenFilter", "org.hibernate.proxy.java.lang.Byte");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader1, mockPrintStream0, byteArray0, 1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string0 = ClassUtil.classNameOf(iterator0);
      assertEquals("`java.util.Collections$EmptyIterator`", string0);
      assertNotNull(string0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertTrue(class2.isEnum());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      String string1 = ClassUtil.backticked("`java.util.Collections$EmptyIterator`");
      assertEquals("``java.util.Collections$EmptyIterator``", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ClassUtil.nullOrToString(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern[] accessPatternArray0 = new AccessPattern[2];
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[0] = accessPattern1;
      accessPatternArray0[1] = accessPattern0;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      objectMapper0.readerFor((JavaType) simpleType0);
      ClassUtil.findClassAnnotations(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        objectMapper0.writeValue((Writer) pipedWriter0, (Object) jsonFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "com.fasterxml.jackson.core.io.SegmentedStringWriter", (-1809238660), (Throwable) null);
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("com.fasterxml.jackson.core.io.SegmentedStringWriter", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1809238660), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("com.fasterxml.jackson.core.io.SegmentedStringWriter", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1809238660), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      SimpleModule simpleModule0 = new SimpleModule();
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(bufferRecycler1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1433), false);
      assertEquals(5, byteArray0.length);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-36), (byte) (-65), (byte) (-112), (byte) (-4)}, byteArray0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1433), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(uTF8JsonGenerator0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(5, byteArray0.length);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-36), (byte) (-65), (byte) (-112), (byte) (-4)}, byteArray0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1433), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals((-1433), uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getFeatureMask());
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator1, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Long> class1 = Long.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class1, class2, false);
      assertFalse(list1.equals((Object)list0));
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      List<Class<?>> list2 = ClassUtil.findSuperClasses(class0, class2, false);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.isEmpty());
      assertEquals(5, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list1);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.java.lang.annotation.Annotation");
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.java.lang.annotation.Annotation", "org.hibernate.proxy.java.lang.annotation.Annotation", 3, sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      SimpleModule simpleModule0 = new SimpleModule();
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 128, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(128, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertNotNull(uTF8JsonGenerator0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(128, uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(128, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: org.hibernate.proxy.java.lang.annotation.Annotation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("void", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("void", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iF2[CKJ*<v");
      assertFalse(boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = ClassUtil.backticked("write raw value");
      assertEquals("`write raw value`", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.quotedOr("write raw value", "`write raw value`");
      assertEquals("\"write raw value\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "write raw value", 6000);
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(spliterator0);
      
      SQLDataException sQLDataException0 = new SQLDataException("\"write raw value\"", "x#P^'%%tTqofY=Z", sQLTransientConnectionException0);
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: \"write raw value\"", sQLDataException0.toString());
      assertEquals("x#P^'%%tTqofY=Z", sQLDataException0.getSQLState());
      assertEquals("\"write raw value\"", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.initCause(sQLDataException0);
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: \"write raw value\"", sQLDataException0.toString());
      assertEquals("x#P^'%%tTqofY=Z", sQLDataException0.getSQLState());
      assertEquals("\"write raw value\"", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertEquals(6000, sQLTransientConnectionException1.getErrorCode());
      assertEquals("write raw value", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransientConnectionException0);
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      String string2 = sQLRecoverableException0.getLocalizedMessage();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(string2);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      
      sQLTransientConnectionException0.setNextException(sQLRecoverableException0);
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      
      SQLTransientConnectionException sQLTransientConnectionException2 = (SQLTransientConnectionException)ClassUtil.throwIfError(sQLTransientConnectionException0);
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException2.toString());
      assertEquals("", sQLTransientConnectionException2.getMessage());
      assertEquals("write raw value", sQLTransientConnectionException2.getSQLState());
      assertEquals(6000, sQLTransientConnectionException2.getErrorCode());
      assertNotNull(sQLTransientConnectionException2);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException2);
      assertSame(sQLTransientConnectionException2, sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException2, sQLTransientConnectionException1);
      
      Class<Character> class0 = Character.class;
      String string3 = sQLDataException0.getLocalizedMessage();
      assertEquals("\"write raw value\"", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("write raw value", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(6000, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: \"write raw value\"", sQLDataException0.toString());
      assertEquals("x#P^'%%tTqofY=Z", sQLDataException0.getSQLState());
      assertEquals("\"write raw value\"", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(string3);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException2);
      
      String string4 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Character`", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper0);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertNotNull(simpleType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<Byte> class2 = Byte.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class1);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockException mockException0 = new MockException("o?g.hibernate.proxy.");
      assertNotNull(mockException0);
      
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Long> class1 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      Class<String> class2 = String.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertEquals(5, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean0);
      
      Class<String> class3 = String.class;
      String string0 = ClassUtil.createInstance(class3, false);
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(class3, class2);
      
      String string1 = ClassUtil.nullOrToString(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Field[] fieldArray1 = ClassUtil.getDeclaredFields(class3);
      assertEquals(5, fieldArray1.length);
      assertFalse(fieldArray1.equals((Object)fieldArray0));
      assertNotNull(fieldArray1);
      assertSame(class3, class2);
      assertNotSame(fieldArray1, fieldArray0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<ObjectNode> class4 = ObjectNode.class;
      boolean boolean1 = ClassUtil.isBogusClass(class4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Class<Boolean> class0 = Boolean.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nonNullString(": (");
      assertEquals(": (", string0);
      assertNotNull(string0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      String string1 = "L'H+";
      String string2 = ClassUtil.quotedOr(": (", "L'H+");
      assertEquals("\": (\"", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
      Class<Integer> class4 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("#Y,n(%a25BX", class4, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from String \"#Y,n(%a25BX\": net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = ClassUtil.backticked("#PzTbrPrS |vp");
      assertEquals("`#PzTbrPrS |vp`", string0);
      assertNotNull(string0);
      
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Float> class2 = Float.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<ArrayType> class0 = ArrayType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<IOException> class2 = IOException.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(boolean0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(1, fieldArray0.length);
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(fieldArray0);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class4);
      assertEquals(18, methodArray0.length);
      assertNotNull(methodArray0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      Iterator<ArrayType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Void> class5 = Void.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class5);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.", "org.hibernate.proxy.");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.hibernate.proxy.", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.hibernate.proxy.", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean1 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockException mockException0 = new MockException("Cannot figure out type for EnumSet (odd JDK platform?)");
      assertNotNull(mockException0);
      
      mockException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(mockException0);
      assertNotNull(throwable0);
      assertSame(mockException0, throwable0);
      assertSame(throwable0, mockException0);
      
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<CollectionType> class0 = CollectionType.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class2, class0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<String> class1 = String.class;
      Class<CollectionType> class2 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class0, list0);
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      assertEquals(9, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Class<Short> class3 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class3);
      assertEquals(23, methodArray0.length);
      assertNotNull(methodArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Long> class1 = Long.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class1, class2, false);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotNull(list1);
      
      List<Class<?>> list2 = ClassUtil.findSuperClasses(class0, class2, false);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.isEmpty());
      assertEquals(5, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list1);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.java.lang.annotation.Annotation");
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.java.lang.annotation.Annotation", "org.hibernate.proxy.java.lang.annotation.Annotation", 3, sQLTransientException0);
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLTransientException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.annotation.Annotation", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      SimpleModule simpleModule0 = new SimpleModule();
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 128, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-943), true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-943), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(128, uTF8JsonGenerator0.getFeatureMask());
      assertNotNull(uTF8JsonGenerator0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(128, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals((-943), uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(127, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals((-943), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(128, uTF8JsonGenerator0.getFeatureMask());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: org.hibernate.proxy.java.lang.annotation.Annotation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class1, class1, false);
      assertFalse(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTransientException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(stackTraceElementArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", "org.hibernate.proxy.java.lang.annotation.Annotation", 3, sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(3, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.annotation.Annotation", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLIntegrityConstraintViolationException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      MockIOException mockIOException0 = new MockIOException("7aNp");
      assertNotNull(mockIOException0);
      
      Throwable throwable0 = mockIOException0.getCause();
      assertNull(throwable0);
      
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@tqns");
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertEquals("`java.lang.Class`", string0);
      assertNotNull(string0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "@tqns");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @tqns
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("elementType", "elementType", 821);
      assertEquals("elementType", sQLNonTransientException0.getSQLState());
      assertEquals("elementType", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: elementType", sQLNonTransientException0.toString());
      assertEquals(821, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      Integer integer0 = new Integer((-713));
      assertEquals((-713), (int)integer0);
      assertNotNull(integer0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) integer0, 821);
      assertEquals("elementType", sQLNonTransientException0.getSQLState());
      assertEquals("elementType", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: elementType", sQLNonTransientException0.toString());
      assertEquals(821, sQLNonTransientException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("elementType", sQLNonTransientException0.getSQLState());
      assertEquals("elementType", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: elementType", sQLNonTransientException0.toString());
      assertEquals(821, sQLNonTransientException0.getErrorCode());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(throwable0.equals((Object)jsonMappingException0));
      assertEquals("elementType", sQLNonTransientException0.getSQLState());
      assertEquals("elementType", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: elementType", sQLNonTransientException0.toString());
      assertEquals(821, sQLNonTransientException0.getErrorCode());
      assertNotNull(throwable0);
      assertNotSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, throwable0);
      assertNotSame(throwable0, jsonMappingException0);
      assertSame(throwable0, jsonMappingException1);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Iterator<Double> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, (Class<?>) null, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "n~2y1a|");
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertNotNull(javaType0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(throwable0.equals((Object)jsonMappingException0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(throwable0);
      assertNotSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, throwable0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(throwable0, jsonMappingException1);
      assertNotSame(throwable0, jsonMappingException0);
      
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<Byte> class3 = Byte.class;
      String string1 = ClassUtil.nameOf(class3);
      assertEquals("`java.lang.Byte`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      BufferRecycler bufferRecycler1 = jsonFactory1._getBufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(bufferRecycler1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      
      Long long0 = new Long(2);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler1, long0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1636, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 2496, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1636, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2496, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertNotNull(uTF8JsonGenerator0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1636, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2496, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(1636, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(2496, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertNotNull(uTF8JsonGenerator1);
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNotNull(nonBlockingJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.Character", "JSON", (-10));
      assertEquals("java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals((-10), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("JSON", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) nonBlockingJsonParser0, "java.lang.Character", (Throwable) sQLTransactionRollbackException0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals("java.lang.Character", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.lang.Character", sQLTransactionRollbackException0.toString());
      assertEquals((-10), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("JSON", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) byteArrayBuilder0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Character
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      MockError mockError0 = new MockError("S#TBM\"");
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      Class<Double> class0 = Double.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "|0W_ZieR=pP)+K");
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // |0W_ZieR=pP)+K
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("B", "B", "B", (-5522));
      assertEquals("B", stackTraceElement0.getClassName());
      assertEquals("B", stackTraceElement0.getFileName());
      assertEquals("B.B(B)", stackTraceElement0.toString());
      assertEquals((-5522), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("B", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("B", "4zv5%", "E]RH6rHcUj", 0);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("B.4zv5%(E]RH6rHcUj:0)", stackTraceElement1.toString());
      assertEquals("4zv5%", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("B", stackTraceElement1.getClassName());
      assertEquals("E]RH6rHcUj", stackTraceElement1.getFileName());
      assertNotNull(stackTraceElement1);
      
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      assertSame(class0, class1);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayType> class3 = ArrayType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class3);
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(arrayType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler("E]RH6rHcUj");
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isAbstract());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      
      Class<?> class4 = ClassUtil.rawClass(referenceType1);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isAbstract());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("class [Lcom.fasterxml.jackson.databind.type.ArrayType;", class4.toString());
      assertTrue(class4.isArray());
      assertNotNull(class4);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      
      Class<?> class5 = ClassUtil.rawClass(referenceType0);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isInterface());
      assertEquals("class [Lcom.fasterxml.jackson.databind.type.ArrayType;", class5.toString());
      assertEquals(1041, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertTrue(class5.isArray());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertNotNull(class5);
      assertSame(class5, class4);
      assertNotSame(referenceType0, referenceType1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("B", "B", "B", (-5522));
      assertEquals("B.B(B)", stackTraceElement0.toString());
      assertEquals("B", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("B", stackTraceElement0.getMethodName());
      assertEquals((-5522), stackTraceElement0.getLineNumber());
      assertEquals("B", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("B", "4zv5%", "E]RH6rHcUj", 0);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("B", stackTraceElement1.getClassName());
      assertEquals("4zv5%", stackTraceElement1.getMethodName());
      assertEquals("E]RH6rHcUj", stackTraceElement1.getFileName());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("B.4zv5%(E]RH6rHcUj:0)", stackTraceElement1.toString());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("T0}#s\tJ~+", "java.lang.Byte", "K@ &vNy@FwV gG", 0);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("T0}#s\tJ~+.java.lang.Byte(K@ &vNy@FwV gG:0)", stackTraceElement2.toString());
      assertEquals(0, stackTraceElement2.getLineNumber());
      assertEquals("T0}#s\tJ~+", stackTraceElement2.getClassName());
      assertEquals("java.lang.Byte", stackTraceElement2.getMethodName());
      assertEquals("K@ &vNy@FwV gG", stackTraceElement2.getFileName());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("type ids are not statically known", "type ids are not statically known", "4zv5%", 0);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertEquals("type ids are not statically known", stackTraceElement3.getMethodName());
      assertEquals("type ids are not statically known.type ids are not statically known(4zv5%:0)", stackTraceElement3.toString());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("4zv5%", stackTraceElement3.getFileName());
      assertEquals(0, stackTraceElement3.getLineNumber());
      assertEquals("type ids are not statically known", stackTraceElement3.getClassName());
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("K@ &vNy@FwV gG", "type ids are not statically known", "keyUniverse", 0);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertEquals("K@ &vNy@FwV gG.type ids are not statically known(keyUniverse:0)", stackTraceElement4.toString());
      assertEquals("K@ &vNy@FwV gG", stackTraceElement4.getClassName());
      assertEquals(0, stackTraceElement4.getLineNumber());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("keyUniverse", stackTraceElement4.getFileName());
      assertEquals("type ids are not statically known", stackTraceElement4.getMethodName());
      assertNotNull(stackTraceElement4);
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("T0}#s\tJ~+", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "java.lang.String", (-5522));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertEquals("T0}#s\tJ~+.net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType(java.lang.String)", stackTraceElement5.toString());
      assertEquals((-5522), stackTraceElement5.getLineNumber());
      assertEquals("java.lang.String", stackTraceElement5.getFileName());
      assertEquals("T0}#s\tJ~+", stackTraceElement5.getClassName());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", stackTraceElement5.getMethodName());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertNotNull(stackTraceElement5);
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("K@ &vNy@FwV gG", "K@ &vNy@FwV gG", "T0}#s\tJ~+", (-201));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      assertEquals("K@ &vNy@FwV gG.K@ &vNy@FwV gG(T0}#s\tJ~+)", stackTraceElement6.toString());
      assertFalse(stackTraceElement6.isNativeMethod());
      assertEquals("K@ &vNy@FwV gG", stackTraceElement6.getClassName());
      assertEquals((-201), stackTraceElement6.getLineNumber());
      assertEquals("K@ &vNy@FwV gG", stackTraceElement6.getMethodName());
      assertEquals("T0}#s\tJ~+", stackTraceElement6.getFileName());
      assertNotNull(stackTraceElement6);
      
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("type ids are not statically known", "elementType", "local/anonymous", 0);
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement7.equals((Object)stackTraceElement6));
      assertEquals("type ids are not statically known", stackTraceElement7.getClassName());
      assertEquals("type ids are not statically known.elementType(local/anonymous:0)", stackTraceElement7.toString());
      assertEquals("local/anonymous", stackTraceElement7.getFileName());
      assertEquals(0, stackTraceElement7.getLineNumber());
      assertFalse(stackTraceElement7.isNativeMethod());
      assertEquals("elementType", stackTraceElement7.getMethodName());
      assertNotNull(stackTraceElement7);
      
      stackTraceElementArray0[7] = stackTraceElement7;
      mockException0.setStackTrace(stackTraceElementArray0);
      assertEquals(8, stackTraceElementArray0.length);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Throwable throwable0 = mockException0.getCause();
      assertNull(throwable0);
      
      String string0 = mockException0.getLocalizedMessage();
      assertNull(string0);
      
      Throwable throwable1 = ClassUtil.throwRootCauseIfIOE(mockException0);
      assertNotNull(throwable1);
      assertSame(mockException0, throwable1);
      assertSame(throwable1, mockException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Class<SimpleModule> class0 = SimpleModule.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Boolean> class1 = Boolean.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("boolean", class2.toString());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(objectMapper0);
      
      Class<Error> class2 = Error.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertNotNull(simpleType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertNotNull(objectReader0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertNotNull(jsonFactory3);
      
      JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertNotNull(jsonFactory4);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory3);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "http://javax.xml.XMLConstants/feature/secure-processing");
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.equals((Object)simpleType0));
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertNotNull(javaType0);
      assertNotSame(javaType0, simpleType0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)5;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-81), (byte)127, (byte)68, (byte)118, (byte)5}, byteArray0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<SimpleModule>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      
      Class<?> class1 = ClassUtil.rawClass(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<Byte> class2 = Byte.class;
      Class<String> class3 = String.class;
      Class<?> class4 = ClassUtil.getEnclosingClass(class3);
      assertNull(class4);
      
      String string1 = "NULL";
      String string2 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertEquals("``", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(string2);
      
      String string3 = "NULL";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(8, false, false, 8, 8, sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      
      // Undeclared exception!
      try { 
        dataTruncation0.initCause(sQLClientInfoException1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLClientInfoException: java.sql.SQLClientInfoException
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(2, methodArray0.length);
      assertNotNull(methodArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockError mockError0 = new MockError(") detected");
      assertNotNull(mockError0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(mockError0);
      assertNotNull(throwable0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte)58;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-8), (byte)75, (byte)113, (byte) (-20), (byte)0, (byte) (-5), (byte) (-33), (byte)58}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Object object0 = ClassUtil.nonNull((Object) null, (Object) ") detected");
      assertEquals(") detected", object0);
      assertNotNull(object0);
      
      Class<Long> class1 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<Byte> class0 = Byte.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(simpleType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(objectReader0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      assertNotNull(filterOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)86, (byte) (-83), (byte) (-128), (byte) (-8), (byte)41, (byte)6, (byte)10}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader0, mockPrintStream0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(uTF8JsonGenerator0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(2, 2);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("$oS_3P%RzB~");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Error> class0 = Error.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      JsonMappingException jsonMappingException0 = ClassUtil.nonNull((JsonMappingException) null, (JsonMappingException) null);
      assertNull(jsonMappingException0);
      
      Class<Integer> class2 = Integer.TYPE;
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Object object0 = ClassUtil.defaultValue(class2);
      assertEquals(0, object0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(object0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      System.setCurrentTimeMillis(0L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl2);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl3 = new DefaultSerializerProvider.Impl();
      assertFalse(defaultSerializerProvider_Impl3.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl3.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl3.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl3);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl2.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(0, enumMap0.size());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.", "=wmE3(+h)/*ZXPz[8");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLSyntaxErrorException0.toString());
      assertEquals("=wmE3(+h)/*ZXPz[8", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.hibernate.proxy.", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLSyntaxErrorException0.toString());
      assertEquals("=wmE3(+h)/*ZXPz[8", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.hibernate.proxy.", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.initCause(sQLTransientConnectionException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLSyntaxErrorException0.toString());
      assertEquals("=wmE3(+h)/*ZXPz[8", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.hibernate.proxy.", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.", sQLSyntaxErrorException1.toString());
      assertEquals("org.hibernate.proxy.", sQLSyntaxErrorException1.getMessage());
      assertEquals("=wmE3(+h)/*ZXPz[8", sQLSyntaxErrorException1.getSQLState());
      assertNotNull(sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Long> class1 = Long.TYPE;
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<ArrayType> class3 = ArrayType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class3, list0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(4, list1.size());
      assertNotNull(list1);
      assertSame(class0, class2);
      assertSame(list0, list1);
      assertSame(class2, class0);
      assertSame(list1, list0);
      
      Class<Float> class4 = Float.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class4, (List<JavaType>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      Class<Long> class5 = Long.class;
      Class<?> class6 = ClassUtil.getEnclosingClass(class5);
      assertFalse(class5.equals((Object)class1));
      assertNull(class6);
      assertNotSame(class5, class1);
      
      Class<AccessPattern> class7 = AccessPattern.class;
      List<Class<?>> list2 = ClassUtil.findSuperClasses((Class<?>) null, class7, true);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      assertSame(class7, class0);
      assertSame(class7, class2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<NoClass> class2 = NoClass.class;
      Class<CollectionType> class3 = CollectionType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class3);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(7, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string1 = ClassUtil.backticked("");
      assertEquals("``", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<?> class5 = ClassUtil.getEnclosingClass(class2);
      assertNull(class5);
      assertSame(class2, class0);
      
      Class<String> class6 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class6, class6, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.hasClass((Object) null, class4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<ArrayType> class0 = ArrayType.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = new JsonFactory();
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertNotNull(jsonFactory3);
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory4 = jsonFactory3.setOutputDecorator(outputDecorator0);
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertNotNull(jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonGenerator_Feature0);
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory2));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertNotNull(jsonFactory5);
      assertSame(jsonFactory3, jsonFactory5);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory4);
      
      JsonFactory jsonFactory6 = jsonFactory5.setInputDecorator((InputDecorator) null);
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory2));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory6.equals((Object)jsonFactory0));
      assertFalse(jsonFactory6.equals((Object)jsonFactory1));
      assertFalse(jsonFactory6.equals((Object)jsonFactory2));
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertTrue(jsonFactory6.canParseAsync());
      assertNotNull(jsonFactory6);
      assertSame(jsonFactory3, jsonFactory5);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory6);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory4);
      assertNotSame(jsonFactory6, jsonFactory0);
      assertSame(jsonFactory6, jsonFactory3);
      assertNotSame(jsonFactory6, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory5);
      assertNotSame(jsonFactory6, jsonFactory2);
      
      Class<Annotation> class1 = Annotation.class;
      Class<String> class2 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, true);
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      Class<NoClass> class3 = NoClass.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class1);
      assertFalse(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      Class<SimpleModule> class5 = SimpleModule.class;
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class4, class5);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.isEmpty());
      assertEquals(6, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list1);
      
      Class<Short> class6 = Short.class;
      Class<?> class7 = ClassUtil.primitiveType(class6);
      assertEquals("short", class7.toString());
      assertFalse(class7.isAnnotation());
      assertEquals(1041, class7.getModifiers());
      assertFalse(class7.isEnum());
      assertFalse(class7.isSynthetic());
      assertTrue(class7.isPrimitive());
      assertFalse(class7.isInterface());
      assertFalse(class7.isArray());
      assertNotNull(class7);
      
      String string0 = ClassUtil.classNameOf(objectMapper0);
      assertEquals("`com.fasterxml.jackson.databind.ObjectMapper`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      Class<Short> class1 = Short.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("short", class2.toString());
      assertNotNull(class2);
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = ClassUtil.backticked("G?*");
      assertEquals("`G?*`", string0);
      assertNotNull(string0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(34, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Double> class1 = Double.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Method[] methodArray1 = ClassUtil.getDeclaredMethods(class2);
      assertEquals(31, methodArray1.length);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertNotNull(methodArray1);
      assertNotSame(methodArray1, methodArray0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
      
      Class<?> class3 = ClassUtil.classOf((Object) null);
      assertNull(class3);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("G?*", (String) null, 674);
      assertEquals(674, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: G?*", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("G?*", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      assertEquals(674, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: G?*", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("G?*", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: G?*", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertEquals("G?*", sQLNonTransientException1.getMessage());
      assertEquals(674, sQLNonTransientException1.getErrorCode());
      assertNotNull(sQLNonTransientException1);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ClassUtil.quotedOr(fileSystemHandling0, "java.lang.Short");
      assertNotNull(string0);
      
      Class<NoClass> class0 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string1 = ClassUtil.backticked("\"org.evosuite.runtime.testdata.FileSystemHandling@57c052df\"");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, true);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Class<AccessPattern> class4 = AccessPattern.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class4);
      assertFalse(boolean0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class3);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Double> class2 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class2);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.getClassDescription(class1);
      assertEquals("`byte`", string0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(string0);
      
      Class<Character> class3 = Character.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("class java.lang.Object", class4.toString());
      assertEquals(1, class4.getModifiers());
      assertNotNull(class4);
      
      Class<?> class5 = ClassUtil.primitiveType(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertTrue(class5.isPrimitive());
      assertEquals("byte", class5.toString());
      assertEquals(1041, class5.getModifiers());
      assertNotNull(class5);
      assertSame(class1, class5);
      assertSame(class5, class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class1);
      assertFalse(boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      Iterator<NoClass> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("NULL", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: NULL", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("NULL", sQLClientInfoException1.getMessage());
      assertNotNull(sQLClientInfoException1);
      
      DataTruncation dataTruncation0 = new DataTruncation(156, true, false, (-1606), 156, sQLClientInfoException1);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: NULL", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("NULL", sQLClientInfoException1.getMessage());
      assertNotNull(dataTruncation0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(dataTruncation0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.classNameOf(mockRuntimeException0);
      assertEquals("`org.evosuite.runtime.mock.java.lang.MockRuntimeException`", string0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: NULL", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("NULL", sQLClientInfoException1.getMessage());
      assertNotNull(string0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      
      String string1 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "http://javax.xml.XMLConstants/feature/secure-processing");
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertNotNull(javaType0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockException mockException0 = new MockException("qsrm", jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(mockException0);
      
      Throwable throwable0 = mockException0.getCause();
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(throwable0.equals((Object)jsonMappingException0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(throwable0);
      assertNotSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, throwable0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(throwable0, jsonMappingException0);
      assertSame(throwable0, jsonMappingException1);
      
      String string0 = mockException0.getLocalizedMessage();
      assertEquals("qsrm", string0);
      assertFalse(jsonMappingException0.equals((Object)throwable0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(string0);
      assertNotSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, throwable0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): http://javax.xml.XMLConstants/feature/secure-processing
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "java.lang.Short");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(throwable0.equals((Object)jsonMappingException1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(throwable0, jsonMappingException0);
      assertNotSame(throwable0, jsonMappingException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("t[O", "Failed to setValue() for field ", 0, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)throwable0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("Failed to setValue() for field ", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("t[O", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: t[O", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)throwable0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("Failed to setValue() for field ", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("t[O", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: t[O", sQLSyntaxErrorException0.toString());
      assertNotNull(throwableArray0);
      assertSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, throwable0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(jsonMappingException1.equals((Object)throwable0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("Failed to setValue() for field ", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("t[O", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: t[O", sQLSyntaxErrorException0.toString());
      assertNotNull(stackTraceElementArray0);
      assertSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, throwable0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Short
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "http://javax.xml.XMLConstants/feature/secure-processing");
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertNotNull(writerBasedJsonGenerator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Sub-class %s (of class %s) must override method '%s'");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Sub-class %s (of class %s) must override method '%s'", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // http://javax.xml.XMLConstants/feature/secure-processing
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Long> class1 = Long.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Class<String> class3 = String.class;
      Class<Byte> class4 = Byte.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class4);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertNotNull(list1);
      
      Class<ObjectNode> class5 = ObjectNode.class;
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class5, class1);
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.isEmpty());
      assertEquals(8, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list1);
      
      Class<?> class6 = ClassUtil.classOf(class0);
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isInterface());
      assertEquals(17, class6.getModifiers());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isEnum());
      assertFalse(class6.isArray());
      assertEquals("class java.lang.Class", class6.toString());
      assertFalse(class6.isAnnotation());
      assertNotNull(class6);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" is not a primitive type", (String) null);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException:  is not a primitive type", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Class<NoClass> class0 = NoClass.class;
      Class<Byte> class1 = Byte.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Long> class2 = Long.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Class<Boolean> class3 = Boolean.class;
      Constructor<Boolean> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      Class<?> class4 = ClassUtil.getDeclaringClass(class2);
      assertNull(class4);
      
      Class<Byte> class5 = Byte.class;
      Class class6 = (Class)ClassUtil.getGenericSuperclass(class5);
      assertFalse(class6.isAnnotation());
      assertEquals("class java.lang.Number", class6.toString());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals(1025, class6.getModifiers());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertNotNull(class6);
      assertSame(class5, class1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException1.toString());
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Object> class1 = Object.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(12, methodArray0.length);
      assertNotNull(methodArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<NoClass> class1 = NoClass.class;
      Class<Object> class2 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      assertSame(class2, class0);
      
      boolean boolean1 = true;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertNotNull(simpleType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectReader0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonParser_Feature0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertNotNull(jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      boolean boolean1 = ClassUtil.hasClass(jsonFactory0, class2);
      assertFalse(boolean1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertTrue(boolean1 == boolean0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      
      Class<NoClass> class3 = NoClass.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      assertSame(class4, class3);
      
      boolean boolean2 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertSame(class4, class3);
      
      Iterator<NoClass> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      File file0 = MockFile.createTempFile("JSON", "NULL");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("JSON0NULL", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/JSON0NULL", file0.toString());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      try { 
        MockFile.createTempFile("JSON", "JSON", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(objectMapper0);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertNotNull(simpleType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectReader0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "http://javax.xml.XMLConstants/feature/secure-processing");
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertTrue(javaType0.equals((Object)simpleType0));
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      assertNotSame(javaType0, simpleType0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(throwable0.equals((Object)jsonMappingException0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(throwable0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, throwable0);
      assertNotSame(throwable0, jsonMappingException0);
      assertSame(throwable0, jsonMappingException1);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(18, methodArray0.length);
      assertNotNull(methodArray0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertNotNull(mockRuntimeException0);
      
      Class<?> class2 = ClassUtil.classOf(mockRuntimeException0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class org.evosuite.runtime.mock.java.lang.MockRuntimeException", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Double> class2 = Double.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<ArrayType> class4 = ArrayType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class4, list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(4, list1.size());
      assertNotNull(list1);
      assertSame(class0, class3);
      assertSame(list0, list1);
      assertSame(class3, class0);
      assertSame(list1, list0);
      
      Class<Float> class5 = Float.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class5, (List<JavaType>) vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.java.lang.Short", "net.sf.cglib.proxy.java.lang.Short", (-2690), sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-2690), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("net.sf.cglib.proxy.java.lang.Short", (String) null, sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-2690), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: net.sf.cglib.proxy.java.lang.Short", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLTimeoutException1.getMessage());
      assertNotNull(sQLTimeoutException1);
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTimeoutException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.java.lang.Short", "w*hkkIWR", 105, sQLDataException0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTimeoutException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLDataException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLWarning0.getMessage());
      assertEquals("w*hkkIWR", sQLWarning0.getSQLState());
      assertEquals(105, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: net.sf.cglib.proxy.java.lang.Short", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException2 = (SQLTimeoutException)ClassUtil.getRootCause(sQLTimeoutException0);
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException2.toString());
      assertNull(sQLTimeoutException2.getMessage());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException2);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException1);
      assertSame(sQLTimeoutException2, sQLTimeoutException0);
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      
      Class<String> class6 = String.class;
      Class<? extends Enum<?>> class7 = ClassUtil.findEnumType(class6);
      assertFalse(class7.isAnnotation());
      assertFalse(class7.isPrimitive());
      assertEquals(1, class7.getModifiers());
      assertFalse(class7.isSynthetic());
      assertFalse(class7.isEnum());
      assertFalse(class7.isInterface());
      assertFalse(class7.isArray());
      assertEquals("class java.lang.Object", class7.toString());
      assertNotNull(class7);
      
      Class<ObjectNode> class8 = ObjectNode.class;
      Class<?> class9 = ClassUtil.primitiveType(class8);
      assertNull(class9);
      
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      boolean boolean1 = ClassUtil.isBogusClass((Class<?>) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[2`c*zo$%c(4:p");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ClassUtil.quotedOr(fileSystemHandling0, "java.lang.Short");
      assertNotNull(string0);
      
      Class<NoClass> class0 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string1 = ClassUtil.backticked("\"org.evosuite.runtime.testdata.FileSystemHandling@101fd41f\"");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.lang.Short", "net.sf.cglib.proxy.java.lang.Short", 105, sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(105, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.lang.Short", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.lang.Short", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("java.lang.Double", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(105, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.lang.Short", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.lang.Short", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertNotNull(sQLTimeoutException1);
      
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", 698, sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(105, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.lang.Short", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.lang.Short", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertEquals(698, sQLWarning0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getSQLState());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException2 = (SQLTimeoutException)ClassUtil.getRootCause(sQLWarning0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(105, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.lang.Short", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.lang.Short", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertEquals(698, sQLWarning0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getSQLState());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.toString());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException2.toString());
      assertNull(sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNotNull(sQLTimeoutException2);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException1);
      assertSame(sQLTimeoutException2, sQLTimeoutException0);
      
      Class<Object> class2 = Object.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Ow>V'e");
      assertFalse(boolean0);
      
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(stackTraceElementArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-4267);
      intArray0[2] = (int) '&';
      intArray0[3] = 2443;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("18-87 h", intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-4267), 38, 2443}, intArray0);
      assertEquals("18-87 h", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: 18-87 h", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      sQLSyntaxErrorException0.setNextException(batchUpdateException0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-4267), 38, 2443}, intArray0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("18-87 h", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: 18-87 h", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      MockException mockException0 = new MockException(batchUpdateException0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-4267), 38, 2443}, intArray0);
      assertNotNull(mockException0);
      
      SQLException sQLException0 = new SQLException("(Ow>V'e", "(Ow>V'e", mockException0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-4267), 38, 2443}, intArray0);
      assertEquals("18-87 h", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: 18-87 h", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("(Ow>V'e", sQLException0.getSQLState());
      assertEquals("(Ow>V'e", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: (Ow>V'e", sQLException0.toString());
      assertNotNull(sQLException0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwRootCauseIfIOE(sQLException0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-4267), 38, 2443}, intArray0);
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("18-87 h", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: 18-87 h", batchUpdateException1.toString());
      assertEquals("18-87 h", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: 18-87 h", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("(Ow>V'e", sQLException0.getSQLState());
      assertEquals("(Ow>V'e", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: (Ow>V'e", sQLException0.toString());
      assertNotNull(batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertSame(batchUpdateException0, batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3661);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.actualType();
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNull(javaType0);
      
      Class<Error> class0 = Error.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Error is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NULL", "NULL");
      assertEquals("java.sql.SQLSyntaxErrorException: NULL", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NULL", sQLSyntaxErrorException0.getMessage());
      assertEquals("NULL", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NULL", "Y3=d;", 2286);
      assertEquals("Y3=d;", sQLTimeoutException0.getSQLState());
      assertEquals("NULL", sQLTimeoutException0.getMessage());
      assertEquals(2286, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: NULL", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      Throwable[] throwableArray0 = sQLTimeoutException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals("Y3=d;", sQLTimeoutException0.getSQLState());
      assertEquals("NULL", sQLTimeoutException0.getMessage());
      assertEquals(2286, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: NULL", sQLTimeoutException0.toString());
      assertNotNull(throwableArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.initCause(sQLTimeoutException0);
      assertEquals("java.sql.SQLSyntaxErrorException: NULL", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NULL", sQLSyntaxErrorException0.getMessage());
      assertEquals("NULL", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Y3=d;", sQLTimeoutException0.getSQLState());
      assertEquals("NULL", sQLTimeoutException0.getMessage());
      assertEquals(2286, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: NULL", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: NULL", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("NULL", sQLSyntaxErrorException1.getSQLState());
      assertEquals("NULL", sQLSyntaxErrorException1.getMessage());
      assertNotNull(sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = (SQLSyntaxErrorException)ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: NULL", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NULL", sQLSyntaxErrorException0.getMessage());
      assertEquals("NULL", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: NULL", sQLSyntaxErrorException2.toString());
      assertEquals("NULL", sQLSyntaxErrorException2.getMessage());
      assertEquals("NULL", sQLSyntaxErrorException2.getSQLState());
      assertNotNull(sQLSyntaxErrorException2);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException0);
      assertSame(sQLSyntaxErrorException2, sQLSyntaxErrorException1);
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-5);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)112, (byte) (-64), (byte) (-5)}, byteArray0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.java.lang.Short", "JSON", 698, sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(698, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("JSON", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("java.lang.Double", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertNotNull(sQLTimeoutException1);
      
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "java.lang.Double", (-2), sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertEquals((-2), sQLWarning0.getErrorCode());
      assertEquals("java.lang.Double", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.toString());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLWarning sQLWarning1 = new SQLWarning(sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLWarning1.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLTimeoutException: java.lang.Double", sQLWarning1.toString());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNotNull(sQLWarning1);
      
      SQLTimeoutException sQLTimeoutException2 = (SQLTimeoutException)ClassUtil.getRootCause(sQLWarning1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLWarning1.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLTimeoutException: java.lang.Double", sQLWarning1.toString());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException2.toString());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNull(sQLTimeoutException2.getMessage());
      assertNull(sQLTimeoutException2.getSQLState());
      assertNotNull(sQLTimeoutException2);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotSame(sQLWarning1, sQLWarning0);
      assertSame(sQLTimeoutException2, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Ow>V'e");
      assertFalse(boolean0);
      
      Class<Error> class0 = Error.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(5, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-4267);
      intArray0[1] = (-1);
      intArray0[2] = 719;
      intArray0[3] = 2443;
      intArray0[4] = 8;
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(stackTraceElementArray0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(Ow>V'e", intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-4267), (-1), 719, 2443, 8}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("(Ow>V'e", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (Ow>V'e", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      sQLSyntaxErrorException0.setNextException(batchUpdateException0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-4267), (-1), 719, 2443, 8}, intArray0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("(Ow>V'e", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (Ow>V'e", batchUpdateException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNotNull(sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Iterator<SimpleType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      int int0 = (-6);
      // Undeclared exception!
      try { 
        jsonNodeFactory0.arrayNode((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      System.setCurrentTimeMillis(1L);
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(77, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string0 = ClassUtil.nonNullString("J1?,JucC8mmH<");
      assertEquals("J1?,JucC8mmH<", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+g1N9dxbDt.k");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Integer integer0 = new Integer((-176));
      assertEquals((-176), (int)integer0);
      assertNotNull(integer0);
      
      String string1 = ClassUtil.getClassDescription(integer0);
      assertEquals("`java.lang.Integer`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      boolean boolean3 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      Class<IOException> class3 = IOException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class3);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2998));
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isAbstract());
      assertNotNull(placeholderForType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(placeholderForType0, "($1", "no default no-arguments constructor found");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals("($1", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("Sub-class %s (of class %s) must override method '%s'", "elementType", (-176), invalidTypeIdException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals("($1", invalidTypeIdException0.getTypeId());
      assertEquals("java.sql.SQLWarning: Sub-class %s (of class %s) must override method '%s'", sQLWarning0.toString());
      assertEquals("elementType", sQLWarning0.getSQLState());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getMessage());
      assertEquals((-176), sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2998));
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertNotNull(placeholderForType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(placeholderForType0, "P+aX4a;p|99m", "5");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals("P+aX4a;p|99m", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(invalidTypeIdException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals("P+aX4a;p|99m", invalidTypeIdException0.getTypeId());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'P+aX4a;p|99m' as a subtype of $-2997: 5", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'P+aX4a;p|99m' as a subtype of $-2997: 5", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("P+aX4a;p|99m", "Sub-class %s (of class %s) must override method '%s'", 2225, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals("P+aX4a;p|99m", invalidTypeIdException0.getTypeId());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'P+aX4a;p|99m' as a subtype of $-2997: 5", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'P+aX4a;p|99m' as a subtype of $-2997: 5", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("P+aX4a;p|99m", sQLWarning0.getMessage());
      assertEquals(2225, sQLWarning0.getErrorCode());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: P+aX4a;p|99m", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) invalidTypeIdException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      Class<Long> class4 = Long.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class4);
      assertFalse(boolean0);
      
      Class<Integer> class5 = Integer.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class5);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Object> class6 = Object.class;
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class6);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("urh)m@309f!", "urh)m@309f!", 4312);
      assertEquals(4312, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      MockIOException mockIOException0 = new MockIOException("ImO7\"5mEi~N}x|#|TbM", sQLFeatureNotSupportedException0);
      assertNotNull(mockIOException0);
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals(4312, sQLFeatureNotSupportedException0.getErrorCode());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(mockPrintStream0);
      
      StackTraceElement[] stackTraceElementArray0 = mockIOException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertEquals(4312, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(stackTraceElementArray0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        mockPrintStream0.format(locale0, (String) null, (Object[]) methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      System.setCurrentTimeMillis(1L);
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(77, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string0 = ClassUtil.nonNullString("J1?,JucC8mmH<");
      assertEquals("J1?,JucC8mmH<", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+g1N9dxbDt.k");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Class<Double> class1 = Double.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Short");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "size";
      String string1 = ClassUtil.quotedOr(fileSystemHandling0, "size");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<NoClass> class0 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertNotNull(list0);
      
      Class<Double> class2 = Double.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<ArrayType> class4 = ArrayType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class4, list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(4, list1.size());
      assertNotNull(list1);
      assertSame(class0, class3);
      assertSame(list0, list1);
      assertSame(class3, class0);
      assertSame(list1, list0);
      
      Class<RuntimeException> class5 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class5, false);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      Class<Float> class6 = Float.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class6, (List<JavaType>) vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType javaType0 = typeBindings0.getBoundType(0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNull(javaType0);
      
      Class<AccessPattern> class7 = AccessPattern.class;
      List<JavaType> list2 = ClassUtil.findSuperTypes((JavaType) null, class7, true);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      assertSame(class7, class0);
      assertSame(class7, class3);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray0);
      
      RuntimeException runtimeException0 = constructor0.newInstance(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertEquals("java.lang.RuntimeException", runtimeException0.toString());
      assertNull(runtimeException0.getMessage());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(runtimeException0);
      
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<?> class8 = classUtil_Ctor0.getDeclaringClass();
      assertEquals(1, class8.getModifiers());
      assertEquals("class java.lang.RuntimeException", class8.toString());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertFalse(class8.isPrimitive());
      assertFalse(class8.isInterface());
      assertFalse(class8.isArray());
      assertFalse(class8.isAnnotation());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(class8);
      
      String string1 = ClassUtil.nonNullString("serialVersionUID");
      assertEquals("serialVersionUID", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("serialVersionUID", "[null]", 0);
      assertEquals("serialVersionUID", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("[null]", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: serialVersionUID", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      RuntimeException runtimeException1 = (RuntimeException)ClassUtil.throwRootCauseIfIOE(runtimeException0);
      assertEquals(0, annotationArray0.length);
      assertEquals("java.lang.RuntimeException", runtimeException0.toString());
      assertNull(runtimeException0.getMessage());
      assertNull(runtimeException1.getMessage());
      assertEquals("java.lang.RuntimeException", runtimeException1.toString());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(runtimeException1);
      assertSame(runtimeException0, runtimeException1);
      assertSame(runtimeException1, runtimeException0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      char char0 = 'b';
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertTrue(character0.equals((Object)char0));
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = ClassUtil.backticked("elementType");
      assertEquals("`elementType`", string0);
      assertNotNull(string0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(34, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string1 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class com.fasterxml.jackson.databind.type.SimpleType", class1.toString());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, "elementType", "unknown");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class com.fasterxml.jackson.databind.type.SimpleType) must override method 'unknown'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked");
      assertFalse(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("f", "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", (-1169));
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("f", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1169), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: f", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      MockIOException mockIOException0 = new MockIOException("f", sQLFeatureNotSupportedException0);
      assertNotNull(mockIOException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("f", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1169), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: f", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedException0.printStackTrace();
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("f", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1169), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: f", sQLFeatureNotSupportedException0.toString());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(mockPrintStream0);
      
      StackTraceElement[] stackTraceElementArray0 = mockIOException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("f", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1169), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: f", sQLFeatureNotSupportedException0.toString());
      assertNotNull(stackTraceElementArray0);
      
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "ST<u-:{@'v4 /U", (Object[]) methodArray0);
      assertEquals(0, methodArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(14, byteArrayBuilder0.size());
      assertEquals(14, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      sQLFeatureNotSupportedException0.printStackTrace(printStream0);
      assertEquals(0, methodArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("f", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1169), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: f", sQLFeatureNotSupportedException0.toString());
      assertEquals(1117, byteArrayBuilder0.size());
      assertEquals(1117, byteArrayBuilder0.getCurrentSegmentLength());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Throwable[] throwableArray0 = mockIOException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("f", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1169), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: f", sQLFeatureNotSupportedException0.toString());
      assertNotNull(throwableArray0);
      
      String string0 = mockIOException0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: f", string0);
      assertEquals("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("f", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1169), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: f", sQLFeatureNotSupportedException0.toString());
      assertNotNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, mockIOException0);
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, mockRuntimeException0, "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class org.evosuite.runtime.mock.java.lang.MockRuntimeException (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ju ;}t#z:jQ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      assertNotNull(simpleObjectIdResolver0);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      
      Class<String> class1 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-2574));
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = objectIdGenerators_UUIDGenerator0.key(accessPattern0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(objectIdGenerator_IdKey0);
      
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdResolver0.equals((Object)simpleObjectIdResolver0));
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdResolver0);
      assertNotSame(simpleObjectIdResolver0, objectIdResolver0);
      assertNotSame(objectIdResolver0, simpleObjectIdResolver0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, simpleObjectIdResolver0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.annotation.SimpleObjectIdResolver (of class com.fasterxml.jackson.databind.type.PlaceholderForType) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<ArrayType> class1 = ArrayType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(2, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtil.isConcrete(class1);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string0 = ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Double");
      assertEquals("`net.sf.cglib.proxy.java.lang.Double`", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = ClassUtil.nullOrToString(integer0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<IOException> class2 = IOException.class;
      Method[] methodArray1 = ClassUtil.getDeclaredMethods(class2);
      assertEquals(0, methodArray1.length);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertNotNull(methodArray1);
      assertNotSame(methodArray1, methodArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Float> class0 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Integer integer0 = new Integer(1019);
      assertEquals(1019, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ClassUtil.nullOrToString(integer0);
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<String> class2 = String.class;
      boolean boolean0 = ClassUtil.hasClass(class1, class2);
      assertFalse(boolean0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<NoClass> class3 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Random.setNextRandom((-369));
      Random.setNextRandom((-369));
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      Class<NoClass> class3 = NoClass.class;
      Class<?> class4 = ClassUtil.getDeclaringClass(class3);
      assertNull(class4);
      assertSame(class3, class1);
      
      Class<?> class5 = ClassUtil.primitiveType(class0);
      assertNull(class5);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      
      Class<?> class6 = ClassUtil.classOf(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isEnum());
      assertEquals("class com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator", class6.toString());
      assertEquals(9, class6.getModifiers());
      assertFalse(class6.isAnnotation());
      assertNotNull(class6);
      
      Class<AccessibleObject> class7 = AccessibleObject.class;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      UUID uUID0 = objectIdGenerators_UUIDGenerator0.generateId("org.hibernate.proxy.");
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertEquals((-5548153263997517824L), uUID0.getLeastSignificantBits());
      assertEquals(8142789603175251968L, uUID0.getMostSignificantBits());
      assertEquals("71010000-7201-4000-b301-000074010000", uUID0.toString());
      assertNotNull(uUID0);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator1 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator1.equals((Object)objectIdGenerators_UUIDGenerator0));
      assertFalse(objectIdGenerators_UUIDGenerator1.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator1);
      
      UUID uUID1 = objectIdGenerators_UUIDGenerator0.generateId(objectIdGenerators_UUIDGenerator1);
      assertFalse(objectIdGenerators_UUIDGenerator1.equals((Object)objectIdGenerators_UUIDGenerator0));
      assertFalse(uUID1.equals((Object)uUID0));
      assertFalse(objectIdGenerators_UUIDGenerator0.equals((Object)objectIdGenerators_UUIDGenerator1));
      assertFalse(objectIdGenerators_UUIDGenerator1.maySerializeAsObject());
      assertEquals((-5259922887778697216L), uUID1.getLeastSignificantBits());
      assertEquals(8431019979394072576L, uUID1.getMostSignificantBits());
      assertEquals("75010000-7601-4000-b701-000078010000", uUID1.toString());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(uUID1);
      assertNotSame(objectIdGenerators_UUIDGenerator1, objectIdGenerators_UUIDGenerator0);
      assertNotSame(uUID1, uUID0);
      assertNotSame(objectIdGenerators_UUIDGenerator0, objectIdGenerators_UUIDGenerator1);
      
      boolean boolean3 = ClassUtil.isJacksonStdImpl(class7);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Class<CollectionLikeType> class8 = CollectionLikeType.class;
      String string0 = ClassUtil.nameOf(class8);
      assertEquals("`com.fasterxml.jackson.databind.type.CollectionLikeType`", string0);
      assertNotNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = mockRuntimeException0.getCause();
      assertNull(throwable0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`com.fasterxml.jackson.databind.type.CollectionLikeType`", mockRuntimeException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`com.fasterxml.jackson.databind.type.CollectionLikeType`", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: `com.fasterxml.jackson.databind.type.CollectionLikeType`", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`com.fasterxml.jackson.databind.type.CollectionLikeType`", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: `com.fasterxml.jackson.databind.type.CollectionLikeType`", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("`com.fasterxml.jackson.databind.type.CollectionLikeType`", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: `com.fasterxml.jackson.databind.type.CollectionLikeType`", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertNotNull(sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      String string1 = ClassUtil.nameOf(class6);
      assertEquals("`com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator`", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(objectIdGenerators_UUIDGenerator0.equals((Object)objectIdGenerators_UUIDGenerator1));
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isEnum());
      assertEquals("class com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator", class6.toString());
      assertEquals(9, class6.getModifiers());
      assertFalse(class6.isAnnotation());
      assertNotNull(string1);
      assertNotSame(objectIdGenerators_UUIDGenerator0, objectIdGenerators_UUIDGenerator1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked");
      assertFalse(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      Class<?> class2 = ClassUtil.rawClass((JavaType) null);
      assertNull(class2);
      
      Class<IOException> class3 = IOException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      Class<?> class5 = ClassUtil.getEnclosingClass(class4);
      assertNull(class5);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class3, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper0);
      
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectMapper objectMapper2 = objectMapper1.configure(deserializationFeature0, false);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      
      ByteArrayBuilder byteArrayBuilder0 = null;
      try {
        byteArrayBuilder0 = new ByteArrayBuilder((-393805500));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "NUMBER");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      assertNotNull(lRUMap0);
      
      JavaType[] javaTypeArray0 = new JavaType[2];
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      
      javaTypeArray0[0] = javaType0;
      Class<Integer> class2 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertNotNull(resolvedRecursiveType0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(throwable0.equals((Object)jsonMappingException0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(throwable0);
      assertNotSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertSame(jsonMappingException1, throwable0);
      assertNotSame(throwable0, jsonMappingException0);
      assertSame(throwable0, jsonMappingException1);
      
      Class<Boolean> class3 = Boolean.class;
      Constructor<Boolean> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Character character0 = Character.valueOf('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) character0);
      assertFalse(boolean0);
      
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<String> class1 = String.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      // Undeclared exception!
      try { 
        sQLException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, (OutputStream) null);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertNotNull(uTF8JsonGenerator0);
      
      ObjectMapper objectMapper2 = objectMapper0.copy();
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper2);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec(objectMapper2);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "NUMBER");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      DeserializationConfig deserializationConfig0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertNotNull(typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory2, typeFactory0);
      
      Class<String> class2 = String.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      
      javaTypeArray0[0] = javaType0;
      Class<Integer> class3 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertNotNull(resolvedRecursiveType0);
      
      Class<RuntimeException> class4 = RuntimeException.class;
      JavaType javaType1 = resolvedRecursiveType0.refine(class4, typeBindings0, javaTypeArray0[0], javaTypeArray0);
      assertEquals(2, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertNull(javaType1);
      
      javaTypeArray0[1] = null;
      // Undeclared exception!
      try { 
        typeFactory2.constructParametricType(class2, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.String with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Double> class2 = Double.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<ArrayType> class4 = ArrayType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class3, class4, list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(4, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertSame(class0, class3);
      assertSame(list0, list1);
      assertSame(class3, class0);
      assertSame(list1, list0);
      
      Class<RuntimeException> class5 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class5, false);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Float> class6 = Float.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class6, (List<JavaType>) vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      JavaType javaType0 = typeBindings0.getBoundType(0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNull(javaType0);
      
      Class<AccessPattern> class7 = AccessPattern.class;
      boolean boolean1 = true;
      List<JavaType> list2 = ClassUtil.findSuperTypes((JavaType) null, class7, true);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      assertSame(class7, class3);
      assertSame(class7, class0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      
      RuntimeException runtimeException0 = constructor0.newInstance(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertNull(runtimeException0.getMessage());
      assertEquals("java.lang.RuntimeException", runtimeException0.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(runtimeException0);
      
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<?> class8 = classUtil_Ctor0.getDeclaringClass();
      assertFalse(class8.isAnnotation());
      assertFalse(class8.isPrimitive());
      assertEquals(1, class8.getModifiers());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertFalse(class8.isInterface());
      assertFalse(class8.isArray());
      assertEquals("class java.lang.RuntimeException", class8.toString());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(class8);
      
      String string1 = ClassUtil.nonNullString("serialVersionUID");
      assertEquals("serialVersionUID", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl(class7);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(class7, class3);
      assertSame(class7, class0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class5);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<String> class9 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Double> class2 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class2);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class3 = ClassUtil.classOf(class2);
      assertFalse(class3.equals((Object)class1));
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertEquals("class java.lang.Class", class3.toString());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      assertNotSame(class3, class1);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException1.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertNotNull(sQLNonTransientException1);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<NoClass> class0 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<Double> class1 = Double.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      int int0 = 105;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("size", "net.sf.cglib.proxy.java.lang.Short", 105, sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("size", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: size", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(105, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("java.lang.Double", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("size", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: size", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(105, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertNotNull(sQLTimeoutException1);
      
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", 698, sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("size", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: size", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(105, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertEquals(698, sQLWarning0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getMessage());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException2 = (SQLTimeoutException)ClassUtil.getRootCause(sQLWarning0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("size", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: size", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("net.sf.cglib.proxy.java.lang.Short", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(105, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.lang.Double", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang.Double", sQLTimeoutException1.toString());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLTimeoutException1.getSQLState());
      assertEquals(698, sQLWarning0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getMessage());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLWarning0.toString());
      assertNull(sQLTimeoutException2.getSQLState());
      assertNull(sQLTimeoutException2.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException2.toString());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNotNull(sQLTimeoutException2);
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException1);
      assertSame(sQLTimeoutException2, sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      String string0 = "vVV?!2xE";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("vVV?!2xE", "vVV?!2xE", 0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("vVV?!2xE", sQLTimeoutException0.getMessage());
      assertEquals("vVV?!2xE", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: vVV?!2xE", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("vVV?!2xE", sQLTimeoutException0.getMessage());
      assertEquals("vVV?!2xE", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: vVV?!2xE", sQLTimeoutException0.toString());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwIfError(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("vVV?!2xE", sQLTimeoutException0.getMessage());
      assertEquals("vVV?!2xE", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: vVV?!2xE", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLTimeoutException: vVV?!2xE", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("vVV?!2xE", sQLTimeoutException1.getMessage());
      assertEquals("vVV?!2xE", sQLTimeoutException1.getSQLState());
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vVV?!2xE
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "3795~p5\\oO7";
      MockException mockException0 = new MockException("3795~p5oO7");
      assertNotNull(mockException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", problem: ", ", problem: ");
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(", problem: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(", problem: ", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(", problem: ", "!6/rXR{ZE", "3795~p5oO7", 0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals(", problem: .!6/rXR{ZE(3795~p5oO7:0)", stackTraceElement0.toString());
      assertEquals("3795~p5oO7", stackTraceElement0.getFileName());
      assertEquals("!6/rXR{ZE", stackTraceElement0.getMethodName());
      assertEquals(", problem: ", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(", problem: ", "3795~p5oO7", ", problem: ", (-521));
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals(", problem: .3795~p5oO7(, problem: )", stackTraceElement1.toString());
      assertEquals(", problem: ", stackTraceElement1.getClassName());
      assertEquals(", problem: ", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals((-521), stackTraceElement1.getLineNumber());
      assertEquals("3795~p5oO7", stackTraceElement1.getMethodName());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      assertEquals(2, stackTraceElementArray0.length);
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(", problem: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(", problem: ", sQLFeatureNotSupportedException0.getSQLState());
      
      Throwable throwable0 = mockException0.initCause(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(", problem: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(", problem: ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("3795~p5oO7", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7", throwable0.toString());
      assertNotNull(throwable0);
      
      String string1 = mockException0.toString();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Throwable throwable1 = ClassUtil.throwIfIOE(mockException0);
      assertNotNull(throwable1);
      assertSame(mockException0, throwable1);
      assertSame(throwable1, mockException0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      Class<Long> class1 = Long.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Number", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals(1025, class2.getModifiers());
      assertNotNull(class2);
      
      MockException mockException1 = (MockException)ClassUtil.throwIfError(mockException0);
      assertNotNull(mockException1);
      assertSame(mockException1, mockException0);
      assertSame(mockException1, throwable1);
      assertSame(mockException0, throwable1);
      assertSame(mockException0, mockException1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(", problem: ", "org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7");
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals(", problem: ", sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      Throwable[] throwableArray0 = sQLFeatureNotSupportedException1.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals(", problem: ", sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(throwableArray0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      
      Throwable[] throwableArray1 = sQLFeatureNotSupportedException1.getSuppressed();
      assertEquals(0, throwableArray1.length);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals(", problem: ", sQLFeatureNotSupportedException1.getMessage());
      assertNotNull(throwableArray1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertSame(throwableArray1, throwableArray0);
      
      sQLFeatureNotSupportedException1.printStackTrace();
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals(", problem: ", sQLFeatureNotSupportedException1.getMessage());
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = (SQLFeatureNotSupportedException)sQLFeatureNotSupportedException1.fillInStackTrace();
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals(", problem: ", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(", problem: ", sQLFeatureNotSupportedException2.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: , problem: ", sQLFeatureNotSupportedException2.toString());
      assertNotNull(sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException2);
      assertSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException1, "org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: 3795~p5oO7
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
      
      Class<ArrayType> class1 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("|iT~k");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: |iT~k", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("|iT~k", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: |iT~k
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Annotation> class2 = Annotation.class;
      classUtil_Ctor0.getParamCount();
      constructor0.toGenericString();
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getName();
      constructor0.getDeclaredAnnotation(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete(class0);
      ClassUtil.getClassDescription(constructor1);
      ClassUtil.nameOf(class1);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.isBogusClass(class3);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`java.lang.reflect.Constructor`", "@%ct5LYjN)t^4", 0);
      MockFile mockFile0 = new MockFile("`java.lang.reflect.Constructor`", "@%ct5LYjN)t^4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("public java.lang.String()", (Object[]) annotationArray0);
      sQLRecoverableException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "vwLn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vwLn
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      ClassUtil.classNameOf(character0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("keyUniverse");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("keyUniverse", (-2180));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
      jsonMappingException0.clearLocation();
      SQLWarning sQLWarning0 = new SQLWarning("`java.lang.Character`", jsonMappingException0);
      sQLWarning0.spliterator();
      sQLWarning0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "`java.lang.Character`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `java.lang.Character`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasClass("NULL", class0);
      ClassUtil.backticked("U5C/wrIWrzv_Yd)ai");
      ClassUtil.nullOrToString((Object) null);
      Class<CollectionType> class1 = CollectionType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(22, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.nameOf(class0);
      Character character0 = new Character('r');
      ClassUtil.nullOrToString(character0);
      Class<MapType> class1 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isLocalType(class0, true);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ClassUtil.rawClass(javaType0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getConstructors(class0);
      Integer integer0 = new Integer((-128));
      ClassUtil.classNameOf(integer0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.classNameOf(classUtil0);
      Class<ArrayType> class0 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getGenericInterfaces(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      SQLWarning sQLWarning0 = new SQLWarning("\"%s\"", (String) null);
      SQLWarning sQLWarning1 = new SQLWarning();
      sQLWarning0.setNextWarning(sQLWarning1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"%s\"
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<MapLikeType> class1 = MapLikeType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Double> class2 = Double.class;
      ClassUtil.isBogusClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
      Class<RuntimeException> class5 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Float> class6 = Float.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class6, (List<JavaType>) vector0);
      typeBindings0.getBoundType(0);
      Class<IOException> class7 = IOException.class;
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("elementType");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class7, typeBindings1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "Vd`CBudq[sSMgZqr");
      MockIOException mockIOException0 = new MockIOException("aYLe!?6F9j* z:nF", sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      ClassUtil.throwIfRTE(jsonMappingException0);
      Class<Boolean> class8 = Boolean.class;
      ClassUtil.findConstructor(class8, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      ClassUtil.isConcrete((Member) classUtil_Ctor1._ctor);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getDeclaringClass(class6);
      Class class9 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class9.isEnum());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.classNameOf(class1);
      ClassUtil.hasEnclosingMethod(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class3 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findClassAnnotations(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedReturnType();
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible((AccessibleObject[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.AccessibleObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonFactory0.disable(jsonParser_Feature0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      boolean boolean0 = ClassUtil.hasClass(jsonFactory0, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findClassAnnotations(class3);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      assertNotNull(constructor0);
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor0);
      assertFalse(boolean1 == boolean0);
      
      ClassUtil.emptyIterator();
      Boolean boolean2 = new Boolean(false);
      String string0 = ClassUtil.classNameOf(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals("`java.lang.reflect.Constructor`", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getTypeParameters();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedReturnType();
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.isJacksonStdImpl(class3);
      Double double0 = new Double(1.0);
      classUtil_Ctor0.getParameterAnnotations();
      Double double1 = new Double(9.223372036854776E18);
      ClassUtil.nonNull(double0, double1);
      boolean boolean0 = false;
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setInputDecorator(inputDecorator0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("NULL", "JSON");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // JSON
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.getGenericSuperclass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = null;
      ClassUtil.nonNullString((String) null);
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nonNull((JsonMappingException) null, (JsonMappingException) null);
      Class<Short> class1 = Short.class;
      ClassUtil.getPackageName(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "serialVersionUID");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Object object0 = ClassUtil.nonNull((Object) accessPattern0, (Object) null);
      assertEquals(AccessPattern.CONSTANT, object0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
