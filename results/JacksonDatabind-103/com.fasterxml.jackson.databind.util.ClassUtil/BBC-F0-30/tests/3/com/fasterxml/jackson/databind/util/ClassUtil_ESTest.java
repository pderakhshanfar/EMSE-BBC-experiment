/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:30:52 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, (Class<?>) null);
      List<Class<?>> list1 = ClassUtil.findSuperTypes((Class<?>) null, (Class<?>) null, list0);
      ClassUtil.getClassDescription(list1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.isLocalType(class1, true);
      ClassUtil.nonNullString("H");
      ClassUtil.emptyIterator();
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("H");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      Class<Byte> class2 = Byte.class;
      resolvedRecursiveType0.findSuperType(class2);
      resolvedRecursiveType0.setReference((JavaType) null);
      typeBindings0.getTypeParameters();
      resolvedRecursiveType0.isThrowable();
      ClassUtil.rawClass(resolvedRecursiveType0);
      ClassUtil.classNameOf(resolvedRecursiveType0);
      String string0 = "-U sU'#@e1yO";
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, (-1691), (Reader) null, objectMapper0, charsToNameCanonicalizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.getClassMethods(class1);
      Class<?> class2 = ClassUtil.classOf(enumSet0);
      Class<Long> class3 = Long.class;
      ClassUtil.isJacksonStdImpl(class3);
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<String> class1 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("/bx&HtU^5Szm", class1, "/bx&HtU^5Szm");
      ClassUtil.getRootCause(jsonMappingException0);
      ClassUtil.defaultValue(class0);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.isCollectionMapOrArray(class0);
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.quotedOr((Object) null, "uUfkUuGV");
      SQLException sQLException0 = new SQLException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("uUfkUuGV", "uUfkUuGV", sQLException0);
      MockIOException mockIOException0 = new MockIOException("uUfkUuGV", sQLIntegrityConstraintViolationException0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 78;
      intArray0[1] = (-638502591);
      intArray0[2] = 1285;
      intArray0[3] = (-1691);
      intArray0[4] = (-3);
      intArray0[5] = 32767;
      intArray0[6] = 0;
      intArray0[7] = 43;
      intArray0[8] = 60000;
      SQLTransientException sQLTransientException0 = new SQLTransientException("\"%s\"", "\"%s\"", 338, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException("\"%s\"", "\"%s\"", batchUpdateException0);
      MockError mockError0 = new MockError(sQLTransientException1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#o(xOJa8Ld-2Xl>P3g");
      ClassUtil.isJacksonStdImpl(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegal type (%s) to deserialize: prevented for security reasons");
      ClassUtil.isNonStaticInnerClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getOuterClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getClassMethods(class2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Void> class3 = Void.class;
      ClassUtil.findEnumType(class3);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      Class<RuntimeException> class4 = RuntimeException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class4, (-393805500));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      objectIdGenerators_UUIDGenerator0.key(accessPattern0);
      ClassUtil.nullOrToString(objectIdGenerators_UUIDGenerator0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<String> class5 = String.class;
      ClassUtil.canBeABeanType(class5);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Illegal type (%s) to deserialize: prevented for security reasons", "62U7y!8KbbJRXn");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Failed to find default constructor of class ", "Failed to find default constructor of class ", "#o(xOJa8Ld-2Xl>P3g", (-393805500));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "org.hibernate.proxy.java.lang.Boolean", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", (-393805500));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("]M", "]:E|F}1BAhDC:IymZC3", "#o(xOJa8Ld-2Xl>P3g", (-393805500));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator@0000000001", "com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator@0000000001", "iLt(OJ*Ne{n-NKUN(LP", (-393805500));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("org.hibernate.proxy.java.lang.Boolean", "Illegal type (%s) to deserialize: prevented for security reasons", "]:E|F}1BAhDC:IymZC3", (-393805500));
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, "h3>{rzJ,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // h3>{rzJ,
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.defaultValue(class1);
      Class<DecimalNode> class2 = DecimalNode.class;
      ClassUtil.isLocalType(class2, false);
      Class<String> class3 = String.class;
      ClassUtil.nameOf(class3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("b9bJE{uC\"}tVq)V8Wg");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Byte");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2513), (ObjectCodec) null, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.java.lang.Long", "?%,L=}]oDJ|-il", 2);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.java.lang.Long", sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      int int0 = 1206;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader1 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      objectReaderArray0[5] = objectReader1;
      ObjectReader objectReader2 = objectReader0.withFormatDetection(objectReaderArray0);
      // Undeclared exception!
      try { 
        objectReader2.withFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(24);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1226), objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      iOContext1.allocReadIOBuffer(863);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(863, 0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 16);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<CollectionType> class1 = CollectionType.class;
      Class<NoClass> class2 = NoClass.class;
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class0, class1, class2);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapLikeType0, "_0", "R");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '_0' as a subtype of [map-like type; class com.fasterxml.jackson.databind.annotation.NoClass, [simple type, class com.fasterxml.jackson.databind.type.CollectionType] -> [simple type, class com.fasterxml.jackson.databind.annotation.NoClass]]: R
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<DecimalNode> class1 = DecimalNode.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      Character character0 = new Character('1');
      ReferenceType referenceType1 = referenceType0.withValueHandler(character0);
      SimpleType.constructUnsafe(class2);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler((Object) null);
      JavaType javaType0 = referenceType2.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
      ClassUtil.rawClass(javaType0);
      ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Void");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Module> class2 = Module.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.classNameOf((Object) null);
      Boolean boolean0 = Boolean.FALSE;
      ClassUtil.classNameOf(boolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.canBeABeanType(class3);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class4);
      ClassUtil.backticked("org.hibernate.proxy.java.lang.Void");
      Class<Object> class5 = Object.class;
      Class<String> class6 = String.class;
      ClassUtil.findSuperTypes(class5, class6);
      ClassUtil.nonNullString("non-static member class");
      ClassUtil.getDeclaredMethods(class1);
      Class<String> class7 = String.class;
      ClassUtil.primitiveType(class7);
      Class<Module> class8 = Module.class;
      try { 
        ClassUtil.createInstance(class8, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<ObjectIdGenerators.UUIDGenerator> class2 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isLocalType(class0, false);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-7));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, true);
      ClassUtil.findSuperTypes(class1, class0, list0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c,z\"");
      Throwable throwable0 = null;
      String string0 = "kXT";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "kXT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 2861);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<BufferedInputStream> class2 = BufferedInputStream.class;
      ClassUtil.isNonStaticInnerClass(class2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.annotation.Annotation");
      NamedType namedType0 = new NamedType(class0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
      namedType0.toString();
      ClassUtil.nullOrToString(namedType0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.backticked("(C7;agqmgw,8Z+(");
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getConstructors(class0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.quotedOr(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ClassUtil.findEnumType(class0);
      Class<Float> class1 = Float.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType((JavaType) null);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperTypes(javaType0, class2, false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class0, class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext0, false);
      StringReader stringReader0 = new StringReader("primitive");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '+';
      charArray0[2] = 'j';
      charArray0[3] = '}';
      charArray0[4] = 'y';
      charArray0[5] = '@';
      charArray0[6] = '\"';
      charArray0[7] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2446), stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 3, (-641314725), false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, "9^//kK(aBV~cBJN");
      NoClass noClass0 = ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
      ClassUtil.classNameOf(noClass0);
      ClassUtil.findEnumType((Enum<?>) jsonToken0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockError mockError0 = new MockError("*r6z%$9TcRG");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      MockError mockError0 = new MockError();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, " is not a primitive type");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.java.lang.Error");
      MockIOException mockIOException0 = new MockIOException(sQLRecoverableException0);
      sQLRecoverableException0.initCause(mockIOException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      ClassUtil.findClassAnnotations(class0);
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H(aulZ>c<0>");
      ClassUtil.quotedOr(class0, "");
      ClassUtil.isJacksonStdImpl(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.hasEnclosingMethod(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9sdPr%mx1:Yq#Fyn)t");
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class3);
      ClassUtil.emptyIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Float> class4 = Float.class;
      ClassUtil.isBogusClass(class4);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[2];
      annotationMapArray0[0] = annotationMap1;
      annotationMapArray0[1] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap1, annotationMapArray0);
      Constructor<?> constructor1 = annotatedConstructor0.getAnnotated();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1901);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1525), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      MockException mockException0 = new MockException("net.sf.cglib.proxy.java.lang.Error");
      Integer integer0 = new Integer(588);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.Error (through reference chain: java.lang.Integer[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.java.lang.Long", "org.hibernate.proxy.java.lang.Long", 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Byte byte0 = new Byte((byte) (-49));
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      enumMap0.computeIfPresent(accessPattern1, biFunction0);
      enumMap0.put(accessPattern0, byte0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Byte byte0 = new Byte((byte)91);
      enumMap0.put(accessPattern0, byte0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      enumSet1.parallelStream();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<ArrayType> class1 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.class;
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<Long> class3 = Long.class;
      ClassUtil.nameOf(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (int) (byte) (-99), (int) (byte) (-99));
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class3, jsonToken0, "xKg=L:GWdP7i* 0A>");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: xKg=L:GWdP7i* 0A>
         //  at [Source: (byte[])\"\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isConcrete(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "net.sf.cglib.proxy.java.lang.String");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType(class0, true);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper4 = objectMapper3.setSerializerProvider(defaultSerializerProvider0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper5 = objectMapper4.configure(serializationFeature0, true);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      ObjectMapper objectMapper6 = objectMapper5.disable(deserializationFeature1);
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      objectMapper6.enable(deserializationFeature2);
      objectMapper5.readerForUpdating(objectMapper1);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.nonNull((ObjectIdResolver) null, (ObjectIdResolver) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2oN1x*=pGya_");
      Class<Character> class0 = Character.class;
      ClassUtil.nameOf(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class1 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "net.sf.cglib.proxy.java.lang.RuntimeException", (String) null);
      MockException mockException0 = new MockException(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.String` from String \"net.sf.cglib.proxy.java.lang.RuntimeException\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLFeatureNotSupportedException0);
      mockRuntimeException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLFeatureNotSupportedException0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, objectMapper1, pipedOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      JsonMappingException.from(jsonGenerator0, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(8, 8);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(decimalNode0);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonFactory0.configure(jsonParser_Feature0, true);
      jsonFactory0.setRootValueSeparator("JSON");
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException("V#H_`$8uB@{y+");
      sQLFeatureNotSupportedException0.initCause(sQLException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, false);
      Class<String> class1 = String.class;
      ClassUtil.findClassAnnotations(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      Class<String> class1 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[4];
      intArray0[1] = 1024;
      intArray0[2] = 1388;
      intArray0[3] = 1024;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "XRU\"ixo:al_=/Jc^>", 1388, batchUpdateException0);
      MockError mockError0 = new MockError();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":", "Missing referencedType", mockError0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "O)-K/ jc`W?PPB1#1W", (-1), sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("V", "XW]Ei@", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Module> class2 = Module.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1024;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 1024, batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 1388, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, sQLTimeoutException0);
      ClassUtil.throwIfError(sQLSyntaxErrorException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLSyntaxErrorException0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Character> class1 = Character.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.getDeclaredMethods(class0);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("DISABLED", mockError0);
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ag]", "Invalid UTF-8 start byte 0x", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "Invalid UTF-8 start byte 0x");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(15);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      Locale locale0 = new Locale("com.fasterxml.jackson.databind.deser.impl.FieldProperty", "doi63D,rq(w", "U|{N+}][");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jsonGenerator_Feature0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) jsonFactory1;
      Object object0 = ClassUtil.nonNull((Object) jsonFactory2, (Object) "com.fasterxml.jackson.databind.deser.impl.FieldProperty");
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "com.fasterxml.jackson.databind.deser.impl.FieldProperty";
      objectArray0[7] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "JSON", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) printStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator(" (");
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonParser_Feature1);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonParser_Feature1);
      JsonFactory jsonFactory5 = jsonFactory4.setCodec(objectReader0);
      JsonFactory jsonFactory6 = jsonFactory5.configure(jsonParser_Feature1, true);
      jsonFactory6.setRootValueSeparator("com.fasterxml.jackson.databind.util.ClassUtil");
      jsonFactory0.setRootValueSeparator("JSON");
      MockFile mockFile0 = new MockFile("JSON", "please use getAnnotations/ hasAnnotation to check for Annotations");
      MockFile mockFile1 = new MockFile("JSON", "bhz*S|he,L8K");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        mockPrintStream0.format((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double((-466.6685361917177));
      Class<Double> class0 = Double.class;
      ClassUtil.hasClass(double0, class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      Class<DecimalNode> class1 = DecimalNode.class;
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "]f1|");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ]f1|
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "L8K{XG{]L)#G";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L8K{XG{]L)#G");
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.getEnclosingClass(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLDataException sQLDataException0 = new SQLDataException(" has no default (no arg) constructor", sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLDataException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "&B[JlMeDntO=i2");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("4");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "O^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("need JSON Array to contain As.WRAPPER_ARRAY type information for class ", (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(batchUpdateException0);
      sQLNonTransientConnectionException0.printStackTrace();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.isProxyType(class1);
      ClassUtil.isLocalType(class1, false);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isConcrete(class0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip(96);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte)54;
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream0.mark(96);
      ClassUtil.classOf(sequenceInputStream0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.getDeclaredFields(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findClassAnnotations(class2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isConcrete(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "org.hibernate.proxy.java.io.IOException";
      ClassUtil.quotedOr(class0, "org.hibernate.proxy.java.io.IOException");
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.Module is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<JsonMappingException> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.hasClass(class0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isObjectOrPrimitive(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.primitiveType(class0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-614630275);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("2", "2", (-614630275), intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (-3068), (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("0&]", "0&]", (-3068), sQLNonTransientConnectionException0);
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
      ClassUtil.nonNullString((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lant.String", "java.lant.String");
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
      mockIOException0.toString();
      MockIOException mockIOException1 = new MockIOException("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTimeoutException: java.lant.String");
      mockIOException0.getSuppressed();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTimeoutException: java.lant.String
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassMethods(class0);
      Class<Character> class1 = Character.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.backticked((String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class3 = HashMap.class;
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      Class<Boolean> class5 = Boolean.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructMapType(class3, class4, class5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 1245230361 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$230611520) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.backticked((String) null);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(3253.56787729);
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class1);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.hasEnclosingMethod(class2);
      Class<CollectionType> class3 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("-LLB8m#F}5nU}01c@r");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("[]", "JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.format("JSON", (Object[]) null);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "#h*Tg.m>N");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) printStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // #h*Tg.m>N
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.nameOf((Named) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.cfg.ConfigOverride", (Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.cfg.ConfigOverride
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "%/Pe'q77", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2364, objectMapper0, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(3, 1536);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("O%", "JSON");
      sQLInvalidAuthorizationSpecException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: O%
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getGenericInterfaces(class1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "[AnnotedClass ");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [AnnotedClass 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getClassMethods(class0);
      MockIOException mockIOException0 = new MockIOException((String) null);
      mockIOException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.nonNullString("G\"");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Q[I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getPackageName(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Null passed for `valueType` of `findValueSerializer()`");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      SimpleType.constructUnsafe(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("primitive", class1, "=eS'yM5CDbS");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `boolean` from String \"primitive\": =eS'yM5CDbS
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Null passed for `valueType` of `findValueSerializer()`");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.quotedOr((Object) null, "DYNAMIC");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K]$$-JYKK3nf$f@b");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getDeclaringClass(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findConstructor(class2, true);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[3];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      annotationMapArray0[2] = null;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, (Constructor<?>) null, (AnnotationMap) null, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Cannot coerce `null` %s (disable `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES` to allow)");
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.String", "java.lang.String");
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.getConstructors(class3);
      ClassUtil.nullOrToString(class2);
      Class<String> class4 = String.class;
      ClassUtil.findSuperClasses(class4, class0, false);
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.getPackageName(class5);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription basicBeanDescription1 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector1);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription1);
      BeanSerializerBuilder beanSerializerBuilder1 = new BeanSerializerBuilder(basicBeanDescription0);
      constructor0.getDeclaredAnnotation(class1);
      Class<NoClass> class6 = NoClass.class;
      AnnotationMap.of(class6, (Annotation) null);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.backticked("%|-C6/:ThEB");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class2);
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class3, (JavaType) mapType0);
      mapType0.withTypeHandler(collectionType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) collectionType0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(referenceType0, "CANONICALIZE_FIELD_NAMES", ":7Eu'Ffcs7PwB~`5");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      File file0 = MockFile.createTempFile("{!iLr^pXGUg`%,", "net.sf.cglib.proxy.java.lang.String");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'CANONICALIZE_FIELD_NAMES' as a subtype of [reference type, class java.util.HashMap<java.util.LinkedList<java.util.HashMap<com.fasterxml.jackson.databind.JsonMappingException,com.fasterxml.jackson.databind.JsonMappingException>>><[collection type; class java.util.LinkedList, contains [map type; class java.util.HashMap, [simple type, class com.fasterxml.jackson.databind.JsonMappingException] -> [simple type, class com.fasterxml.jackson.databind.JsonMappingException]]]>]: :7Eu'Ffcs7PwB~`5
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      MockIOException mockIOException0 = new MockIOException("^c=(1q");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("strict", "strict", mockIOException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("strict", sQLIntegrityConstraintViolationException0);
      MockThrowable mockThrowable0 = new MockThrowable("java.lang.Boolean", sQLIntegrityConstraintViolationException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.String", "java.lang.String");
      Class<Annotation> class0 = Annotation.class;
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.nullOrToString("java.lang.String");
      ClassUtil.findSuperClasses(class0, class3, false);
      ClassUtil.getPackageName(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanSerializerBuilder beanSerializerBuilder1 = new BeanSerializerBuilder(basicBeanDescription0);
      constructor0.getDeclaredAnnotation(class2);
      Class<RuntimeException> class4 = RuntimeException.class;
      AnnotationMap.of(class4, (Annotation) null);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getClassMethods(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getAnnotatedParameterTypes();
      AccessibleObject.setAccessible((AccessibleObject[]) fieldArray0, false);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class4);
      ClassUtil.getConstructors(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      ClassUtil.findSuperClasses(class5, class0, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      Long long0 = new Long(0L);
      ClassUtil.verifyMustOverride(class1, long0, "Class ");
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Class ");
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLIntegrityConstraintViolationException0.getSuppressed();
      sQLIntegrityConstraintViolationException0.getStackTrace();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      sQLIntegrityConstraintViolationException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "Class ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      MockError mockError0 = new MockError();
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext_Impl0.weirdStringException("keyUniverse", (Class<?>) null, "com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter");
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      Class<Character> class0 = Character.class;
      ClassUtil.findEnumType(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.getConstructors(class2);
      ClassUtil.nullOrToString(class2);
      List<Class<?>> list0 = new ArrayList<Class<Boolean>>();
      Class<Object> class3 = Object.class;
      ClassUtil.getPackageName(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      constructor1.getDeclaredAnnotation(class1);
      Class<Byte> class4 = Byte.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class4, (Annotation) null);
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor1, annotationMap0, (AnnotationMap[]) null);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.hasClass((Object) null, class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.enable(jsonGenerator_Feature0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("PA#1mB<", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotatedParameterTypes();
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      ClassUtil.getConstructors(class0);
      ClassUtil.nullOrToString((Object) null);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperClasses(class4, class5, true);
      ClassUtil.getPackageName(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<Annotation> class6 = Annotation.class;
      constructor0.getDeclaredAnnotation(class6);
      AnnotationMap annotationMap0 = AnnotationMap.of(class4, (Annotation) null);
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap0, (AnnotationMap[]) null);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      Class<Character> class0 = Character.class;
      ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Integer> class1 = Integer.class;
      ClassUtil.getOuterClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isConcrete(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("VN'!ZaL_f}sTm'");
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)15;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "x(");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, jsonMappingException0);
      mockRuntimeException0.initCause(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "VN'!ZaL_f}sTm'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class1);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, true);
      ClassUtil.nameOf((Named) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Character> class3 = Character.class;
      ClassUtil.getPackageName(class3);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.isConcrete(class4);
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      MockError mockError0 = new MockError();
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("keyUniverse", (Class<?>) null, "com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type [null] from String \"keyUniverse\": com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class1);
      MapType mapType1 = mapType0.withTypeHandler(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapType1, "vals", ".=9");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.hasClass("elementType", class1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassLoader.getSystemClassLoader();
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 407);
      Boolean boolean0 = coreXMLDeserializers_Std0.supportsUpdate((DeserializationConfig) null);
      ClassUtil.nullOrToString(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLDataException sQLDataException0 = new SQLDataException("int", "java.lang.String", (-919));
      batchUpdateException0.addSuppressed(sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("entrySet", batchUpdateException0);
      MockError mockError0 = new MockError();
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<IOException> class0 = IOException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("java.lang.String", class0, "com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.IOException` from String \"java.lang.String\": com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class1);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, true);
      SQLDataException sQLDataException0 = new SQLDataException("", "primitive");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "kKq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // kKq
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isProxyType(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<CollectionType> class2 = CollectionType.class;
      Class<NoClass> class3 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class3, false);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.isProxyType(class4);
      ClassUtil.findSuperClasses(class1, class4, false);
      ClassUtil.findSuperTypes(class4, class2, list0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      MockThrowable mockThrowable0 = new MockThrowable("qj,J{dP;N");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("a8(LjWn!!d9LcT].r`", mockThrowable0);
      MockError mockError0 = new MockError("serialVersionUID", sQLTimeoutException0);
      MockThrowable mockThrowable1 = new MockThrowable("Internal error: failed to locate expected buffered tokens", sQLTimeoutException0);
      ClassUtil.throwRootCauseIfIOE(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: a8(LjWn!!d9LcT].r`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      Class<ReferenceType> class2 = ReferenceType.class;
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Error> class3 = Error.class;
      ClassUtil.findSuperTypes(class2, class3);
      System.setCurrentTimeMillis(1462L);
      ClassUtil.primitiveType(class3);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      ClassUtil.nameOf((Named) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getOuterClass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isConcrete(class2);
      Class<String> class3 = String.class;
      ClassUtil.nameOf(class3);
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "", 5, intArray0);
      ClassUtil.throwIfRTE(batchUpdateException0);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class4);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classNameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.nameOf(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`com.fasterxml.jackson.databind.annotation.NoClass`", "vals", (-886), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`com.fasterxml.jackson.databind.annotation.NoClass`", "`com.fasterxml.jackson.databind.annotation.NoClass`", sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException1);
      Boolean boolean0 = new Boolean("wN,YCLd");
      ClassUtil.nonNull((Object) boolean0, (Object) class0);
      sQLFeatureNotSupportedException1.getSuppressed();
      sQLFeatureNotSupportedException1.setNextException(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException1.fillInStackTrace();
      sQLFeatureNotSupportedException1.forEach(consumer0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`com.fasterxml.jackson.databind.annotation.NoClass`");
      MockError mockError0 = new MockError("vals");
      mockPrintWriter0.println((Object) mockError0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (-1988), sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "%nh&^[5Zq)GVp>Qa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %nh&^[5Zq)GVp>Qa
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isProxyType(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedParameterTypes();
      Class<Annotation> class2 = Annotation.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      Class<String> class5 = String.class;
      ClassUtil.getConstructors(class5);
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassDescription(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getClassMethods(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findConstructor(class2, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ClassUtil.isLocalType(class2, true);
      Class<Object> class3 = Object.class;
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      String string0 = "G\"";
      ClassUtil.quotedOr(class0, "G\"");
      SimpleType.constructUnsafe(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.canBeABeanType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Long> class0 = Long.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.classOf((Object) null);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)23;
      intArray0[1] = (int) (byte) (-115);
      intArray0[2] = (int) (byte)50;
      intArray0[3] = (int) (byte) (-115);
      intArray0[4] = (int) (byte)23;
      intArray0[5] = (int) (byte)50;
      intArray0[6] = (int) (byte)50;
      intArray0[7] = (-1012);
      intArray0[8] = (int) (byte)50;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("VUV*x9DGgw<6(", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Reader returned 0 characters when trying to read ", (-2218), intArray0, sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, (byte)50, batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "net.sf.cglib.proxy.java.lang.Object");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" (from class ", "~lhR*$E{>u,!d", 15);
      MockPrintStream mockPrintStream0 = new MockPrintStream("hSn,j[l");
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.nullOrToString(" (from class ");
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getPackageName(class3);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<MapLikeType> class4 = MapLikeType.class;
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      AnnotationMap annotationMap0 = AnnotationMap.of(class4, (Annotation) null);
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, classUtil_Ctor0._ctor, annotationMap0, (AnnotationMap[]) null);
      annotatedConstructor0.getMember();
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      ClassUtil.findEnumType(class6);
      Class<Object> class7 = Object.class;
      ClassUtil.getOuterClass(class7);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getClassMethods(class0);
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Integer");
      Class<Long> class1 = Long.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      MockError mockError0 = new MockError((String) null);
      mockError0.printStackTrace();
      mockError0.getLocalizedMessage();
      mockError0.getCause();
      ClassUtil.nonNull((Error) null, (Error) mockError0);
      AnnotationIntrospector.nopInstance();
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[8];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[2] = annotationMap0;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap0;
      annotationMapArray0[5] = annotationMap0;
      annotationMapArray0[6] = annotationMap0;
      annotationMapArray0[7] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, (Constructor<?>) null, annotationMap0, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.String", "java.lang.String");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getOuterClass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isConcrete(class2);
      Class<String> class3 = String.class;
      ClassUtil.nameOf(class3);
      Class<String> class4 = String.class;
      ClassUtil.createInstance(class4, false);
      ClassUtil.isBogusClass(class4);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" (from class ", "~lhR*$E{>u,!d", 15);
      MockPrintStream mockPrintStream0 = new MockPrintStream("hSn,j[l");
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.nullOrToString(" (from class ");
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getPackageName(class3);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<MapLikeType> class4 = MapLikeType.class;
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      AnnotationMap annotationMap0 = AnnotationMap.of(class4, (Annotation) null);
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, classUtil_Ctor0._ctor, annotationMap0, (AnnotationMap[]) null);
      Member member0 = annotatedConstructor0.getMember();
      ClassUtil.checkAndFixAccess(member0, false);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.createInstance(class0, false);
      assertEquals("", string0);
      
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("", "", mockIOException0);
      SQLException sQLException0 = new SQLException("", "", sQLWarning0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLException0);
      ClassUtil.getRootCause(throwable0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.isLocalType(class2, false);
      Class<Float> class3 = Float.class;
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "%]fO");
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      MockFile mockFile0 = new MockFile("keyUniverse");
      File file0 = MockFile.createTempFile("JSON", "keyUniverse", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory3.createParser(file0);
      JsonMappingException.from(jsonParser0, "tYEzCje:O:4P");
      ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.findEnumType(class1);
      Class<?> class2 = ClassUtil.classOf(defaultDeserializationContext_Impl0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      Class<String> class3 = String.class;
      ClassUtil.findSuperTypes(class3, class2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.quotedOr(class0, "G\"");
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3]);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("G\"", "\"class java.lang.Double\"");
      DataTruncation dataTruncation0 = new DataTruncation(2349, true, false, 2349, 1536, sQLTransientConnectionException0);
      dataTruncation0.getNextWarning();
      sQLTransientConnectionException0.initCause((Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getEnclosingClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findConstructor(class0, true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isLocalType(class1, true);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) null, 3, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.backticked("root");
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      ClassUtil.primitiveType(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<AccessibleObject> class3 = AccessibleObject.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.classNameOf(class0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.mark(664);
      String string0 = "D";
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileInputStream0, "D", (JsonLocation) null);
      ClassUtil.classOf(jsonMappingException0);
      Class<MapLikeType> class1 = MapLikeType.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "FaBCTgh", (Throwable) jsonMappingException0);
      try { 
        mockFileInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Object object0 = new Object();
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getClassDescription(class0);
      ArrayList<Class<Object>> arrayList0 = new ArrayList<Class<Object>>();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Short> class2 = Short.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.isConcrete(class1);
      ClassUtil.nameOf(class0);
      Class<String> class3 = String.class;
      ClassUtil.createInstance(class3, false);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Float float0 = new Float(0.0);
      ClassUtil.isJacksonStdImpl((Object) float0);
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.nameOf(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`com.fasterxml.jackson.databind.annotation.NoClass`", "vals", (-886), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`com.fasterxml.jackson.databind.annotation.NoClass`", "`com.fasterxml.jackson.databind.annotation.NoClass`", sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException1);
      Boolean boolean0 = new Boolean("wN,YCLd");
      ClassUtil.nonNull((Object) boolean0, (Object) class0);
      sQLFeatureNotSupportedException1.getSuppressed();
      sQLFeatureNotSupportedException1.setNextException(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException1.fillInStackTrace();
      sQLFeatureNotSupportedException1.forEach(consumer0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.write(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockError mockError0 = new MockError("vals");
      mockPrintWriter0.println((Object) mockError0);
      sQLFeatureNotSupportedException1.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException1);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isConcrete(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.getOuterClass(class2);
      ClassUtil.classOf(class2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.classOf(class0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.backticked("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      ClassUtil.nullOrToString(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ap3_a>rGWV\"nMA*k ", "java.lang.Class@0000000001", (-2743));
      MockIOException mockIOException0 = new MockIOException(sQLIntegrityConstraintViolationException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byteArrayBuilder0.setCurrentSegmentLength(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0, true);
      mockIOException0.printStackTrace((PrintStream) mockPrintStream1);
      mockIOException0.getMessage();
      mockIOException0.fillInStackTrace();
      ClassUtil.throwIfError(mockIOException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.backticked("UNKNOWN");
      ClassUtil.isNonStaticInnerClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.String", "java.lang.String");
      Class<Annotation> class0 = Annotation.class;
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperClasses(class0, class3, false);
      ClassUtil.getPackageName(class1);
      ClassUtil.nameOf((Named) null);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.nameOf(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findSuperClasses(class3, class1, false);
      Class<Object> class4 = Object.class;
      ClassUtil.nameOf(class0);
      Byte byte0 = new Byte((byte)6);
      ClassUtil.getClassDescription(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("xyK?*{PsS1V:", "yN=']Ca", (-1096));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("xyK?*{PsS1V:", 2690);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "`java.lang.Integer`", (-1096));
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference1.toString();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("xyK?*{PsS1V:", "yN=']Ca", (-1096));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("xyK?*{PsS1V:", "yN=']Ca", sQLInvalidAuthorizationSpecException1);
      sQLSyntaxErrorException0.getSuppressed();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`com.fasterxml.jackson.databind.type.MapType`", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): xyK?*{PsS1V: (through reference chain: java.lang.String[2690])
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getClassMethods(class0);
      ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" (from class ", "~lhR*$E{>u,!d", 15);
      MockPrintStream mockPrintStream0 = new MockPrintStream("hSn,j[l");
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.nullOrToString(" (from class ");
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getPackageName(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<MapLikeType> class4 = MapLikeType.class;
      Class<Annotation> class5 = Annotation.class;
      constructor0.getDeclaredAnnotation(class5);
      AnnotationMap annotationMap0 = AnnotationMap.of(class4, (Annotation) null);
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, classUtil_Ctor0._ctor, annotationMap0, (AnnotationMap[]) null);
      Member member0 = annotatedConstructor0.getMember();
      ClassUtil.checkAndFixAccess(member0, false);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Float float0 = new Float((-1.0));
      Float float1 = ClassUtil.nonNull(float0, float0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, float1, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Float (of class java.lang.Integer) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.nameOf(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class3, class3, true);
      Class<Object> class4 = Object.class;
      ClassUtil.nameOf(class4);
      Byte byte0 = new Byte((byte)6);
      ClassUtil.getClassDescription(byte0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yN=']Ca", "xyK?*{PsS1V:", (byte)6);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("`java.lang.Object`", (byte)6);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "xyK?*{PsS1V:", (-2032));
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException_Reference0.toString();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`java.lang.Object`", "`java.lang.Object`", jsonMappingException1);
      sQLSyntaxErrorException0.getSuppressed();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.annotation.JsonSerialize$Typing", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): yN=']Ca (through reference chain: java.lang.String[6])
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getClassMethods(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getAnnotatedParameterTypes();
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class4);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.getConstructors(class0);
      Class<String> class5 = String.class;
      ClassUtil.isProxyType(class5);
      ClassUtil.getClassDescription(class0);
      Class<RuntimeException> class6 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class6);
      Class<ReferenceType> class7 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class7, class1, true);
      Class<String> class8 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.quotedOr(class0, "G\"");
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3]);
      SimpleType simpleType1 = simpleType0.withValueHandler(collectionType0);
      simpleType1.isTypeOrSubTypeOf(class1);
      ClassUtil.rawClass(simpleType1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.classOf(class2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}.", "}.");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // }.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = true;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      String string0 = "vals";
      String string1 = "03{TLsU:u";
      String string2 = "7*$#f4aN";
      String string3 = "^'G:)17;<l";
      int int0 = 0;
      Map<String, ClientInfoStatus> map0 = null;
      String string4 = "TokenFilter.INCLUDE_ALL";
      MockError mockError0 = new MockError("TokenFilter.INCLUDE_ALL");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      String string5 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "^'G:)17;<l", 1426);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement((String) null, "", "^'G:)17;<l", 1426);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      
      Character character0 = new Character('G');
      String string0 = ClassUtil.getClassDescription(character0);
      assertEquals("`java.lang.Character`", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "F0VLZ s<87ihbn>q~", "F0VLZ s<87ihbn>q~");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "F0VLZ s<87ihbn>q~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // F0VLZ s<87ihbn>q~
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", "java.lang");
      MockError mockError0 = new MockError("java.lang", sQLTimeoutException0);
      SQLException sQLException0 = new SQLException("size", "X", mockError0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.lang", "java.lang", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "size");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      sQLNonTransientConnectionException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Cannot coerce `null` %s (disable `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES` to allow)", "elementType", 0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      assertEquals("Cannot coerce `null` %s (disable `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES` to allow)", throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      constructor0.getGenericParameterTypes();
      constructor0.getAnnotations();
      constructor0.getParameterTypes();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+gnPb VJ'8\"", "+gnPb VJ'8\"", 852, sQLFeatureNotSupportedException0);
      classUtil_Ctor0.getParameterAnnotations();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("+gnPb VJ'8\"", "+gnPb VJ'8\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // +gnPb VJ'8\"
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isProxyType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("enum", "");
      SQLException sQLException0 = new SQLException("plVD3u-j7e=Rt:tnl", "plVD3u-j7e=Rt:tnl", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" has no default (no arg) constructor", "plVD3u-j7e=Rt:tnl", sQLException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException(" has no default (no arg) constructor", throwable0);
      Throwable throwable1 = ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // enum
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Double> class2 = Double.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.primitiveType(class1);
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isNonStaticInnerClass(class2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 0);
      sQLTransactionRollbackException0.getSuppressed();
      sQLTransactionRollbackException0.printStackTrace();
      sQLTransactionRollbackException0.initCause((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "\"%s\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"%s\"
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[1] = (-494);
      intArray0[2] = 0;
      intArray0[3] = (-494);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Xf\"np{v", "; failed to set access: ", sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLSyntaxErrorException0);
      SQLWarning sQLWarning0 = new SQLWarning("; failed to set access: ", "gXwZWBT1^0{~w<tR", (-494), batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "l1m?ePk(K9_5Z0$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // l1m?ePk(K9_5Z0$
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      String string0 = "enum";
      int int0 = (-1);
      try { 
        Short.valueOf("enum", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }
}
