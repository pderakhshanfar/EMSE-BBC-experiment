/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 22:36:06 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[4]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withTypeHandler((Object) null);
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withStaticTyping();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      referenceType3.isTypeOrSubTypeOf(class2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Instantiation of ", "Instantiation of ");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLRecoverableException0);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withTypeHandler(exceptionInInitializerError0);
      stdValueInstantiator0._delegateType = (JavaType) referenceType4;
      referenceType2.withContentTypeHandler(class0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canInstantiate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stdValueInstantiator0._delegateType = (JavaType) collectionLikeType0;
      collectionLikeType0.isThrowable();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.findTypeDeserializer((DeserializationConfig) null, stdValueInstantiator0._delegateType);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.String`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      javaType0.findSuperType(class1);
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[2], javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withValueHandler(javaTypeArray0[1]);
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withStaticTyping();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Instantiation of ", "Instantiation of ");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLRecoverableException0);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withTypeHandler(exceptionInInitializerError0);
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.module.SimpleModule");
      sQLRecoverableException0.setNextException(sQLException0);
      stdValueInstantiator0._delegateType = (JavaType) referenceType4;
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.getArrayDelegateCreator();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      javaType0.findSuperType(class1);
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[2], javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withTypeHandler((Object) null);
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withStaticTyping();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Instantiation of ", "Instantiation of ");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLRecoverableException0);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withTypeHandler(exceptionInInitializerError0);
      stdValueInstantiator0._delegateType = (JavaType) referenceType4;
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingDelegate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler((Object) null);
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) stdValueInstantiator0, (Object) class0);
      stdValueInstantiator0._arrayDelegateType = (JavaType) arrayType0;
      stdValueInstantiator0.canCreateFromLong();
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator0.getDefaultCreator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator1.canCreateUsingDelegate();
      System.setCurrentTimeMillis((-2332L));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[2], javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withTypeHandler((Object) null);
      referenceType2.withStaticTyping();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Instantiation of ", "Instantiation of ");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLRecoverableException0);
      stdValueInstantiator0._delegateType = (JavaType) referenceType0;
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[2], javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withTypeHandler((Object) null);
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withStaticTyping();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Instantiation of ", "Instantiation of ");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLRecoverableException0);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withTypeHandler(exceptionInInitializerError0);
      stdValueInstantiator0._delegateType = (JavaType) referenceType4;
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<CreatorProperty> class0 = CreatorProperty.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler(deserializationProblemHandler0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      Class<Object> class1 = Object.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class1, (Object) hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, (JsonParser) null, injectableValues_Std1);
      stdValueInstantiator0.createFromString(defaultDeserializationContext0, "_]y4");
      stdValueInstantiator0.canCreateFromString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[3] = deserializationFeature3;
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      DeserializationFeature deserializationFeature4 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      contextAttributes1.withPerCallAttribute(deserializationFeature1, deserializationFeature4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(contextAttributes1);
      Locale locale0 = new Locale("", "ht'\"f.'}*PVql6G{'7[", "ht'\"f.'}*PVql6G{'7[");
      ArrayType arrayType2 = arrayType1.withContentTypeHandler(locale0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType2);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.getValueClass();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._arrayDelegateArguments = settableBeanPropertyArray0;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.getValueClass();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getIncompleteParameter();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator1.canCreateUsingDelegate();
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator1.canCreateFromObjectWith();
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator1.getArrayDelegateCreator();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdValueInstantiator0.canCreateFromBoolean();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[2];
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      beanDeserializerBuilder0.removeProperty(propertyName0);
      settableBeanPropertyArray0[0] = null;
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[4]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withTypeHandler((Object) null);
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withStaticTyping();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Instantiation of ", "Instantiation of ");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLRecoverableException0);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withTypeHandler(exceptionInInitializerError0);
      stdValueInstantiator0._delegateType = (JavaType) referenceType4;
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DeserializationConfig deserializationConfig0 = null;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (-510), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      // Undeclared exception!
      stdValueInstantiator0.wrapException(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "st .RV{4`.D?]:");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-670));
      stdValueInstantiator0._arrayDelegateType = (JavaType) placeholderForType0;
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      File file0 = MockFile.createTempFile("Instantiation of ", "Instantiation of ");
      jsonFactory0.createParser(file0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      Class<SettableBeanProperty> class2 = SettableBeanProperty.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InvocationTargetException> class3 = InvocationTargetException.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructReferenceType(class3, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getValueClass();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      objectMapper0.readerFor(class1);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0._defaultCreator = null;
      Class<ExceptionInInitializerError> class1 = ExceptionInInitializerError.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      PropertyName propertyName0 = PropertyName.construct("PROPERTY", "PROPERTY");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(resolvedRecursiveType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, false);
      JsonSerializer<InvocationTargetException> jsonSerializer0 = (JsonSerializer<InvocationTargetException>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withSerializer(jsonSerializer0);
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)objectIdWriter1.idType;
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, resolvedRecursiveType1, settableBeanPropertyArray0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-35);
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      objectReader0.treeAsTokens(binaryNode0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      injectableValues_Std0.addValue((Class<?>) class0, (Object) deserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, (BeanDescription) basicBeanDescription0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 0);
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, invocationTargetException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLWarning sQLWarning0 = new SQLWarning("R=-rV=8(", "", (-3132));
      SQLTransientException sQLTransientException0 = new SQLTransientException("R=-rV=8(", sQLWarning0);
      sQLTransientException0.fillInStackTrace();
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLTransientException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, exceptionInInitializerError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.initCause((Throwable) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1km9rdr-w");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, invocationTargetException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateFromDouble();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<String> class2 = String.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      MapType mapType1 = mapType0.withContentTypeHandler(typeFactory0);
      MapLikeType mapLikeType0 = mapType1.withContentTypeHandler((Object) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, mapLikeType0);
      stdValueInstantiator1.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator1.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, mapLikeType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      DeserializationContext deserializationContext0 = null;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JavaType[] javaTypeArray1 = new JavaType[5];
      javaTypeArray1[0] = javaType0;
      javaTypeArray1[1] = javaType0;
      javaTypeArray1[2] = (JavaType) referenceType0;
      javaTypeArray1[3] = (JavaType) referenceType0;
      javaTypeArray1[4] = javaType0;
      JavaType javaType1 = referenceType0.refine(class1, typeBindings0, javaTypeArray0[1], javaTypeArray1);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, javaType1, jsonToken0, "");
      stdValueInstantiator0.wrapAsJsonMappingException((DeserializationContext) null, jsonMappingException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `com.fasterxml.jackson.databind.JsonMappingException`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      stdValueInstantiator0.getValueClass();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      TypeBindings.emptyBindings();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "need JSON Object to contain As.WRAPPER_OBJECT type information for class ", (-3232), jsonMappingException0);
      stdValueInstantiator1.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext_Impl0, (-2107L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError("I>X9sJ}qO\"");
      Class<DecimalNode> class0 = DecimalNode.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateUsingDefault();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, exceptionInInitializerError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      defaultDeserializationContext_Impl0.getArrayBuilders();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0._defaultCreator = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdValueInstantiator0.canCreateUsingDefault();
      Class<InvocationTargetException> class1 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class1);
      stdValueInstantiator1.canCreateUsingDefault();
      stdValueInstantiator1.canCreateFromLong();
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "btQcD2Y?)$MK@iz");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      stdValueInstantiator0.canCreateUsingDefault();
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateUsingDefault();
      stdValueInstantiator1.canCreateFromLong();
      stdValueInstantiator1.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Internal error: unknown key type ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Internal error: unknown key type ");
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[4] = mapperFeature4;
      ObjectMapper objectMapper2 = objectMapper1.enable(mapperFeatureArray0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "Internal error: unknown key type ");
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromDouble(deserializationContext0, (-890.038679086323));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      stdValueInstantiator0.canCreateFromBoolean();
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      System.setCurrentTimeMillis(0L);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      System.setCurrentTimeMillis((-4944L));
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromDouble(defaultDeserializationContext_Impl0, (-4944L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Internal error: unknown key type ");
      stdValueInstantiator0.canCreateFromBoolean();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      deserializerFactoryConfig1.valueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0.getWithArgsCreator();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateUsingDefault();
      stdValueInstantiator0.canInstantiate();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromString(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.configureIncompleteParameter((AnnotatedParameter) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.canCreateFromDouble();
      stdValueInstantiator0.getDefaultCreator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("UO4(4b-50;7DFv9");
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateFromLong();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory1, class0);
      JsonMappingException jsonMappingException1 = stdValueInstantiator1.wrapException(jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory2 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      deserializerFactoryConfig0.valueInstantiators();
      defaultDeserializationContext_Impl0.copy();
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator2.getDefaultCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      stdValueInstantiator2.rewrapCtorProblem(defaultDeserializationContext_Impl0, jsonMappingException1);
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0._incompleteParameter = null;
      stdValueInstantiator0.canCreateFromDouble();
      stdValueInstantiator0.getDefaultCreator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("UO4(4b-50;7DFv9");
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0._incompleteParameter = null;
      stdValueInstantiator0.canCreateFromDouble();
      SQLWarning sQLWarning0 = new SQLWarning("QjiMCvxg&QaEKp(cW[N", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("'XA7iN#Y5;+J^-", "", sQLTransactionRollbackException0);
      stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      stdValueInstantiator0.canCreateFromBoolean();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      deserializerFactoryConfig1.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.canCreateFromLong();
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator0.getDefaultCreator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator1.canCreateUsingDelegate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.canCreateFromLong();
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator0.getDefaultCreator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<Object> class1 = Object.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLNonTransientException0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) invocationTargetException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(jsonMappingException0);
      stdValueInstantiator1.wrapException(sQLTransientConnectionException0);
      stdValueInstantiator1.canCreateFromLong();
      stdValueInstantiator0.canCreateUsingDefault();
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromBoolean(defaultDeserializationContext_Impl0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory1, class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Instantiation of ", "Instantiation of ", (-5130));
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, jsonMappingException0);
      stdValueInstantiator1.getDefaultCreator();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactory0, class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.canCreateFromString();
      stdValueInstantiator0.getValueTypeDesc();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      System.setCurrentTimeMillis(1470L);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("cy?Iw'&`X1ISPd", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("cy?Iw'&`X1ISPd", "cy?Iw'&`X1ISPd", (-835), sQLFeatureNotSupportedException0);
      SQLException sQLException0 = new SQLException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext0, sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-23);
      byteArray0[0] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.getConfig();
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDefault(defaultDeserializationContext_Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      AnnotatedWithParams annotatedWithParams0 = null;
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getIncompleteParameter();
      stdValueInstantiator1.getIncompleteParameter();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator1.canCreateUsingDelegate();
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator1.canCreateFromObjectWith();
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator1.getArrayDelegateCreator();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdValueInstantiator0.canCreateFromBoolean();
      JavaType javaType0 = null;
      SettableBeanProperty[] settableBeanPropertyArray0 = null;
      SettableBeanProperty[] settableBeanPropertyArray1 = new SettableBeanProperty[2];
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      beanDeserializerBuilder0.removeProperty(propertyName0);
      settableBeanPropertyArray1[0] = null;
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator1.canCreateUsingArrayDelegate();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator1.canCreateUsingDelegate();
      stdValueInstantiator1.canCreateUsingArrayDelegate();
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator1.canCreateFromObjectWith();
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      stdValueInstantiator1.canCreateFromBoolean();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createUsingArrayDelegate(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.Integer`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0._incompleteParameter = null;
      stdValueInstantiator0.canCreateFromLong();
      stdValueInstantiator0.canCreateFromDouble();
      stdValueInstantiator0.getDefaultCreator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<Object> class1 = Object.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class1);
      stdValueInstantiator0.canCreateFromLong();
      stdValueInstantiator0.canCreateUsingDefault();
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromBoolean(defaultDeserializationContext_Impl0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateFromBoolean();
      String string0 = "q=43Vv";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("q=43Vv");
      stdValueInstantiator0.wrapException(sQLIntegrityConstraintViolationException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory2 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLIntegrityConstraintViolationException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createUsingArrayDelegate(defaultDeserializationContext_Impl0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.String`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertNotNull(stdValueInstantiator0);
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromBoolean();
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("q=43Vv");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("q=43Vv", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: q=43Vv", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLIntegrityConstraintViolationException0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("q=43Vv", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: q=43Vv", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(jsonMappingException0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertNotNull(stdValueInstantiator0);
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromObjectWith();
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(boolean0);
      
      boolean boolean1 = stdValueInstantiator0.canCreateFromBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(boolean1);
      
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      boolean boolean2 = stdValueInstantiator0.canCreateUsingDelegate();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      SettableBeanProperty[] settableBeanPropertyArray0 = stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertNull(settableBeanPropertyArray0);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertNotNull(stdValueInstantiator1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      stdValueInstantiator0._fromStringCreator = null;
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactory0, class0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = stdValueInstantiator1.wrapException(jsonMappingException0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory1);
      
      Iterable<ValueInstantiators> iterable0 = deserializerFactoryConfig0.valueInstantiators();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(iterable0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl1);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(deserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromString(defaultDeserializationContext_Impl1, "X;G]\"a\"agfn|!at;fC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      System.setCurrentTimeMillis((-4088L));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(stdValueInstantiator0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) defaultDeserializationContext_Impl0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertNotNull(stdValueInstantiator0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Object object0 = null;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) defaultDeserializationContext_Impl0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNotNull(stdValueInstantiator0);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertNotNull(stdValueInstantiator1);
      
      AnnotatedWithParams annotatedWithParams0 = null;
      stdValueInstantiator1.configureFromIntCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      
      AnnotatedParameter annotatedParameter0 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(annotatedParameter0);
      
      Throwable throwable0 = null;
      stdValueInstantiator1.configureFromBooleanCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNotNull(stdValueInstantiator0);
      
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      
      AnnotatedParameter annotatedParameter0 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(annotatedParameter0);
      
      AnnotatedParameter annotatedParameter1 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(annotatedParameter1);
      
      SettableBeanProperty[] settableBeanPropertyArray0 = stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(settableBeanPropertyArray0);
      
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(boolean0);
      
      boolean boolean1 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(boolean1);
      
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      String string0 = "=0_beZwp.|/V";
      String string1 = "q;Dsx@=h\\c}";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "q;Dsx@=hc}");
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("q;Dsx@=hc}", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(sQLClientInfoException1);
      
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertSame(map1, map0);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(map0, map1);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map1);
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "", map1, sQLClientInfoException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("", sQLClientInfoException2.getMessage());
      assertEquals("", sQLClientInfoException2.getSQLState());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(sQLClientInfoException2);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertNotNull(stdValueInstantiator1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromInt(defaultDeserializationContext_Impl0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertNotNull(stdValueInstantiator0);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertNotNull(stdValueInstantiator1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig1);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      String string0 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string1 = "lyo3X,p:lq<ZjB]F";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("=0_beZwp.|/V", "lyo3X,p:lq<ZjB]F");
      assertEquals("lyo3X,p:lq<ZjB]F", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: =0_beZwp.|/V", sQLSyntaxErrorException0.toString());
      assertEquals("=0_beZwp.|/V", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fx4[0,uhX<Mr", (String) null, hashMap0, sQLSyntaxErrorException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("lyo3X,p:lq<ZjB]F", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: =0_beZwp.|/V", sQLSyntaxErrorException0.toString());
      assertEquals("=0_beZwp.|/V", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: fx4[0,uhX<Mr", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("fx4[0,uhX<Mr", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.Integer`", stdValueInstantiator2.getValueTypeDesc());
      assertFalse(stdValueInstantiator2.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator2.canCreateFromString());
      assertFalse(stdValueInstantiator2.canInstantiate());
      assertFalse(stdValueInstantiator2.canCreateFromInt());
      assertFalse(stdValueInstantiator2.canCreateUsingDefault());
      assertFalse(stdValueInstantiator2.canCreateFromBoolean());
      assertFalse(stdValueInstantiator2.canCreateFromDouble());
      assertFalse(stdValueInstantiator2.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator2.canCreateFromLong());
      assertFalse(stdValueInstantiator2.canCreateFromObjectWith());
      assertNotNull(stdValueInstantiator2);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator2.createFromInt(defaultDeserializationContext_Impl0, (-223));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertNotNull(stdValueInstantiator0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "st .RV{4`.D?]:");
      assertFalse(boolean0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-670));
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.findSuperType(class0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertNull(javaType0);
      
      stdValueInstantiator0._arrayDelegateType = (JavaType) placeholderForType0;
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertTrue(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertTrue(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(stdValueInstantiator0._arrayDelegateType.isArrayType());
      assertFalse(stdValueInstantiator0._arrayDelegateType.hasHandlers());
      assertTrue(stdValueInstantiator0._arrayDelegateType.hasContentType());
      assertFalse(stdValueInstantiator0._arrayDelegateType.isPrimitive());
      assertFalse(stdValueInstantiator0._arrayDelegateType.isInterface());
      assertFalse(stdValueInstantiator0._arrayDelegateType.isFinal());
      assertFalse(stdValueInstantiator0._arrayDelegateType.useStaticType());
      assertTrue(stdValueInstantiator0._arrayDelegateType.isConcrete());
      assertFalse(stdValueInstantiator0._arrayDelegateType.isAbstract());
      assertFalse(stdValueInstantiator0._arrayDelegateType.isEnumType());
      assertTrue(stdValueInstantiator0._arrayDelegateType.isJavaLangObject());
      assertFalse(stdValueInstantiator0._arrayDelegateType.hasValueHandler());
      assertFalse(stdValueInstantiator0._arrayDelegateType.isMapLikeType());
      assertFalse(stdValueInstantiator0._arrayDelegateType.isCollectionLikeType());
      
      JavaType javaType1 = stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertSame(javaType1, placeholderForType0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertTrue(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertTrue(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.hasHandlers());
      assertTrue(javaType1.hasContentType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.isContainerType());
      assertEquals(0, javaType1.containedTypeCount());
      assertTrue(javaType1.isJavaLangObject());
      assertTrue(javaType1.isConcrete());
      assertNotNull(javaType1);
      
      boolean boolean1 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertFalse(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertTrue(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertTrue(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNotNull(stdValueInstantiator0);
      
      AnnotatedParameter annotatedParameter0 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(annotatedParameter0);
      
      stdValueInstantiator0._incompleteParameter = null;
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(boolean0);
      
      boolean boolean1 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(boolean1);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDefaultCreator();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(annotatedWithParams0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = '/';
      charArray0[2] = 'U';
      charArray0[3] = 'c';
      charArray0[4] = 'f';
      charArray0[5] = 'g';
      charArray0[6] = '6';
      charArray0[7] = 'Y';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertArrayEquals(new char[] {'C', '/', 'U', 'c', 'f', 'g', '6', 'Y'}, charArray0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createInstance((DeserializationConfig) null, readerBasedJsonParser0, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNotNull(stdValueInstantiator0);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertNotNull(stdValueInstantiator1);
      
      stdValueInstantiator1.configureFromIntCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      
      AnnotatedParameter annotatedParameter0 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(annotatedParameter0);
      
      AnnotatedParameter annotatedParameter1 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(annotatedParameter1);
      
      SettableBeanProperty[] settableBeanPropertyArray0 = stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertNull(settableBeanPropertyArray0);
      
      boolean boolean0 = stdValueInstantiator1.canCreateUsingDelegate();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(boolean0);
      
      boolean boolean1 = stdValueInstantiator1.canCreateUsingArrayDelegate();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(boolean1);
      
      boolean boolean2 = stdValueInstantiator0.canCreateFromInt();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(boolean2);
      
      boolean boolean3 = stdValueInstantiator1.canCreateFromObjectWith();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(boolean3);
      
      boolean boolean4 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(boolean4);
      
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(defaultDeserializationContext0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertNotNull(stdValueInstantiator0);
      
      AnnotatedParameter annotatedParameter0 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertNull(annotatedParameter0);
      
      stdValueInstantiator0._incompleteParameter = null;
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(boolean0);
      
      boolean boolean1 = stdValueInstantiator0.canCreateFromDouble();
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(boolean1);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDefaultCreator();
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertNull(annotatedWithParams0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      Class<Object> class1 = Object.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertEquals("`java.lang.Object`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertNotNull(stdValueInstantiator1);
      
      boolean boolean2 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(boolean2);
      
      boolean boolean3 = stdValueInstantiator0.canCreateUsingDefault();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(boolean3);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy", "com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy", 2);
      assertEquals("com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(2, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertNotNull(stdValueInstantiator0);
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromObjectWith();
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(boolean0);
      
      boolean boolean1 = stdValueInstantiator0.canCreateFromBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(boolean1);
      
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      boolean boolean2 = stdValueInstantiator0.canCreateUsingDelegate();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(boolean2);
      
      SettableBeanProperty[] settableBeanPropertyArray0 = stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertNull(settableBeanPropertyArray0);
      
      boolean boolean3 = stdValueInstantiator0.canCreateFromBoolean();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(boolean3);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDefaultCreator();
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertNull(annotatedWithParams0);
      
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext0, sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertNotNull(stdValueInstantiator0);
      
      AnnotatedParameter annotatedParameter0 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertNull(annotatedParameter0);
      
      stdValueInstantiator0._incompleteParameter = null;
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(boolean0);
      
      boolean boolean1 = stdValueInstantiator0.canCreateFromDouble();
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(boolean1);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDefaultCreator();
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertNull(annotatedWithParams0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = '/';
      charArray0[2] = 'U';
      charArray0[3] = 'c';
      charArray0[4] = 'f';
      charArray0[5] = 'g';
      charArray0[6] = '6';
      charArray0[7] = 'Y';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertArrayEquals(new char[] {'C', '/', 'U', 'c', 'f', 'g', '6', 'Y'}, charArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createInstance((DeserializationConfig) null, readerBasedJsonParser0, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(stdValueInstantiator0);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDelegateCreator();
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertNull(annotatedWithParams0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertNotNull(stdValueInstantiator0);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDelegateCreator();
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertNull(annotatedWithParams0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertNotNull(stdValueInstantiator0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext0, 314L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertNotNull(stdValueInstantiator0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext0, 314L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertNotNull(stdValueInstantiator0);
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromBoolean();
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("q=43Vv");
      assertEquals("q=43Vv", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: q=43Vv", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLIntegrityConstraintViolationException0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("q=43Vv", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: q=43Vv", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromString(defaultDeserializationContext0, "X;G]\"a\"agfn|!at;fC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertNotNull(stdValueInstantiator0);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertNotNull(stdValueInstantiator1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(5, serializationFeatureArray0.length);
      assertNotNull(objectMapper2);
      
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature1, true);
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(serializationFeature1.equals((Object)serializationFeature0));
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(serializationFeature1, serializationFeature0);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(5, serializationFeatureArray0.length);
      assertNotNull(objectMapper3);
      
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(serializationFeature1.equals((Object)serializationFeature0));
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(serializationFeature1, serializationFeature0);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(5, serializationFeatureArray0.length);
      assertNotNull(deserializationContext0);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createUsingDelegate(deserializationContext0, deserializationContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.Integer`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertNotNull(simpleType0);
      
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.useStaticType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.isArrayType());
      assertTrue(simpleType1.isFinal());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isInterface());
      assertNotNull(simpleType1);
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType1);
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.useStaticType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.isArrayType());
      assertTrue(simpleType1.isFinal());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isInterface());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("[simple type, class java.lang.Integer]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertNotNull(stdValueInstantiator0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertNotNull(stdValueInstantiator0);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertNotNull(stdValueInstantiator1);
      
      AnnotatedWithParams annotatedWithParams0 = null;
      stdValueInstantiator1.configureFromIntCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      
      AnnotatedParameter annotatedParameter0 = stdValueInstantiator0.getIncompleteParameter();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertNull(annotatedParameter0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertNotNull(stdValueInstantiator0);
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertNotNull(stdValueInstantiator1);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("No delegate constructor for ", "No delegate constructor for ");
      assertEquals("No delegate constructor for ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: No delegate constructor for ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("No delegate constructor for ", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertEquals("No delegate constructor for ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: No delegate constructor for ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("No delegate constructor for ", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: No delegate constructor for ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: No delegate constructor for ", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class1, (Throwable) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      JavaType javaType0 = null;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertNotNull(stdValueInstantiator0);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = null;
      try {
        stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateFromObjectWith();
      stdValueInstantiator0.canCreateFromBoolean();
      stdValueInstantiator0.getValueClass();
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.canCreateFromBoolean();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromString(defaultDeserializationContext0, "nTUJxg6U)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateFromLong();
      stdValueInstantiator0.canCreateUsingDefault();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy", "com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy", (-5130));
      // Undeclared exception!
      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
