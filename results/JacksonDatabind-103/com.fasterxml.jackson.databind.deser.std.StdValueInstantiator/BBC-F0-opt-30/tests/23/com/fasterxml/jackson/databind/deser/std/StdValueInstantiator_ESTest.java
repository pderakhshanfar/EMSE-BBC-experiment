/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:58:16 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      List<JavaType> list0 = arrayType0.getInterfaces();
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType1 = resolvedRecursiveType0.withContentValueHandler((Object) null);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = javaType1;
      javaTypeArray0[2] = (JavaType) arrayType0;
      javaTypeArray0[3] = javaType1;
      javaTypeArray0[4] = (JavaType) arrayType0;
      javaTypeArray0[5] = javaType1;
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings1, javaType1, javaTypeArray0, javaTypeArray0[2]);
      CollectionLikeType collectionLikeType0 = collectionType0.withStaticTyping();
      Class<InvocationTargetException> class2 = InvocationTargetException.class;
      ReferenceType referenceType0 = ReferenceType.construct(class2, typeBindings0, javaTypeArray0[0], javaTypeArray0, javaTypeArray0[4]);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = referenceType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = arrayType0.getErasedSignature(stringBuilder1);
      arrayType0.getGenericSignature(stringBuilder2);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromDoubleCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, arrayType0, (SettableBeanProperty[]) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `com.fasterxml.jackson.databind.Module`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".N!Gzgv+s&M]:4>i");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(".N!Gzgv+s&M]:4>i").when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler(deserializationProblemHandler0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig1, (JavaType) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<Module> class0 = Module.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) jsonParser0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig1, jsonParser0, injectableValues_Std1);
      stdValueInstantiator1.createFromLong(defaultDeserializationContext0, 1);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapAsJsonMappingException(deserializationContext0, sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withNoProblemHandlers();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(mockFileInputStream0).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler(deserializationProblemHandler0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '2';
      charArray0[2] = 'n';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 0, 512);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      injectableValues_Std0.addValue("JSON", (Object) mapperFeature0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      stdValueInstantiator0.createFromInt(defaultDeserializationContext0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".N!Gzgv+s&M]:4>i");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler(deserializationProblemHandler0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig1, (JavaType) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      Class<Module> class0 = Module.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) jsonParser0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig1, jsonParser0, injectableValues_Std1);
      stdValueInstantiator1.createFromLong(defaultDeserializationContext0, 1);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapAsJsonMappingException(deserializationContext0, sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromBooleanCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      valueInstantiator_Base0.getDefaultCreator();
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, simpleType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("", "");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      propertyName0.simpleAsEncoded((MapperConfig<?>) null);
      JavaType javaType0 = pOJOPropertyBuilder0.getPrimaryType();
      stdValueInstantiator0._delegateType = javaType0;
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.canCreateFromLong();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<Integer> class1 = Integer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      Class<MapperFeature> class2 = MapperFeature.class;
      NamedType namedType0 = new NamedType(class2, "a5x8hPZnsJ5Amu");
      namedType0.toString();
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(namedType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      namedType0.toString();
      namedType0.setName("\"J]WfLt");
      namedType0.toString();
      stdValueInstantiator0._delegateType = javaType0;
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._defaultCreator;
      resolvedRecursiveType0.toCanonical();
      stdValueInstantiator0._defaultCreator = null;
      stdValueInstantiator0.canCreateFromObjectWith();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingDefault();
      resolvedRecursiveType0.setReference(stdValueInstantiator0._delegateType);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingDefault();
      stdValueInstantiator0.canInstantiate();
      stdValueInstantiator0.canCreateFromDouble();
      stdValueInstantiator0.canCreateFromObjectWith();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      objectMapper1.enable(deserializationFeature1);
      Class<StdTypeResolverBuilder> class1 = StdTypeResolverBuilder.class;
      try { 
        objectMapper1.convertValue((Object) deserializationFeature0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('com.fasterxml.jackson.core.io.SerializedString@0000000153')
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withNoProblemHandlers();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler(deserializationProblemHandler0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '2';
      charArray0[2] = 'n';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 0, 512);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      injectableValues_Std0.addValue("JSON", (Object) mapperFeature0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      stdValueInstantiator0.createFromInt(defaultDeserializationContext0, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, placeholderForType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonParser jsonParser0 = null;
      objectMapper0.readValues((JsonParser) null, (JavaType) placeholderForType0);
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      SerializationFeature serializationFeature1 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature1);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        valueInstantiator_Base0.createFromObjectWith(deserializationContext0, (Object[]) serializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<PropertyName> class0 = PropertyName.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withNoProblemHandlers();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      deserializationConfig1.without(jsonParser_Feature0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler(deserializationProblemHandler0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, (-1), 889);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, (InjectableValues) null);
      stdValueInstantiator0.createFromString(defaultDeserializationContext0, "<1%*^]sAM=NRGU}3h^");
      stdValueInstantiator0.canCreateFromBoolean();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[3];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._withArgsCreator;
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<Module> class1 = Module.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.createKeyDeserializer(defaultDeserializationContext_Impl0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null, (Object) null, (Object) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, simpleType0);
      JavaType javaType0 = referenceType0.withContentType(arrayType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getValueClass();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromLong(defaultDeserializationContext0, (-558L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromStringCreator;
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      stdValueInstantiator0._defaultCreator = null;
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.canCreateFromObjectWith();
      stdValueInstantiator0.getValueClass();
      stdValueInstantiator0.canCreateFromBoolean();
      stdValueInstantiator0.canCreateFromDouble();
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
      MapType mapType1 = mapType0.withKeyTypeHandler(class0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MapType mapType2 = mapType1.withTypeHandler(mockFileInputStream0);
      MapType mapType3 = mapType2.withContentValueHandler(mapType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType3, mapType3, mapType0);
      stdValueInstantiator0._arrayDelegateType = (JavaType) mapLikeType0;
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.canCreateFromString();
      stdValueInstantiator0.canInstantiate();
      stdValueInstantiator0.canInstantiate();
      stdValueInstantiator0.canCreateFromLong();
      stdValueInstantiator0._arrayDelegateCreator = null;
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.String`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromBoolean((DeserializationContext) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.getWithArgsCreator();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for UNKNOWN TYPE
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0, class0, class0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Value0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[2] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[3] = deserializationFeature2;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=2=RAwXh9sJ");
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLDataException0, "=2=RAwXh9sJ");
      // Undeclared exception!
      try { 
        stdValueInstantiator1.rewrapCtorProblem(deserializationContext0, invocationTargetException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._defaultCreator;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withKeyTypeHandler(simpleType0);
      MapType mapType3 = mapType2.withContentValueHandler(typeFactory0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, mapType3, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", " value failed: ", 3448);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0.wrapException(jsonMappingException0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withName(propertyName0);
      JavaType javaType0 = pOJOPropertyBuilder1.getPrimaryType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromLongCreator;
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      HashMap<String, JsonMappingException> hashMap0 = new HashMap<String, JsonMappingException>();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setFilterProvider(simpleFilterProvider0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Serializers.Base serializers_Base0 = new Serializers.Base();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(serializers_Base0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(serializerFactory0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromString(deserializationContext0, ")&?O|$;[8AM*'8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canInstantiate();
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.Object`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<PropertyAccessor> class0 = PropertyAccessor.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getValueClass();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = new PropertyName("\"Oa3Q*. }u7");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withName(propertyName0);
      pOJOPropertyBuilder1.getSetter();
      annotationIntrospector1.resolveSetterConflict((MapperConfig<?>) null, (AnnotatedMethod) null, (AnnotatedMethod) null);
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler(deserializationProblemHandler0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory1);
      LinkedList<JsonNode> linkedList0 = new LinkedList<JsonNode>();
      Double double0 = new Double((-1.0));
      jsonNodeFactory1.numberNode(double0);
      List<JsonNode> list0 = arrayNode0.findParents("6t-f4s]p%Yax]", (List<JsonNode>) linkedList0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = arrayNode1.traverse((ObjectCodec) objectMapper0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, (InjectableValues) null);
      stdValueInstantiator0.createFromBoolean(defaultDeserializationContext0, false);
      stdValueInstantiator0.createUsingDefault(defaultDeserializationContext0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, exceptionInInitializerError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Double> class0 = Double.TYPE;
      JavaType javaType0 = objectMapper0.constructType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getDelegateCreator();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getValueClass();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      MockIOException mockIOException0 = new MockIOException("+.Mu^&-5:<,z_z", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.rewrapCtorProblem(defaultDeserializationContext0, mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<Module> class0 = Module.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JavaType javaType0 = null;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "^#Nq&gW6]`XTL3H~6");
      SQLTransientException sQLTransientException0 = new SQLTransientException("^#Nq&gW6]`XTL3H~6", jsonMappingException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLTransientException0);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.canCreateFromDouble();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._withArgsCreator;
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canInstantiate();
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate(defaultDeserializationContext0, beanDeserializerFactory0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.Object`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[map type; class ", "[map type; class ", 343);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1._fromBooleanCreator;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, jsonMappingException0);
      stdValueInstantiator1.wrapAsJsonMappingException(defaultDeserializationContext_Impl0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromLongCreator;
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")*X)Rx%)YuYH7", ")*X)Rx%)YuYH7", 363);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      JsonMappingException jsonMappingException1 = stdValueInstantiator1.wrapException(jsonMappingException0);
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(")*X)Rx%)YuYH7", jsonMappingException1);
      stdValueInstantiator0.wrapException(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings.createIfNeeded(class0, javaType0);
      Class<String> class1 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class1);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1._fromBooleanCreator;
      stdValueInstantiator1._delegateCreator = null;
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator2._arrayDelegateType = javaType0;
      stdValueInstantiator2.canCreateUsingArrayDelegate();
      stdValueInstantiator0.getArrayDelegateCreator();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._defaultCreator;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      MapType mapType2 = mapType1.withKeyTypeHandler(simpleType0);
      MapType mapType3 = mapType2.withContentValueHandler(typeFactory0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, mapType3, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", " value failed: ", 3448);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0.wrapException(jsonMappingException0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")*X)Rx%)YuCYH7", "l:4FUv=,FQw", 363);
      stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(")*X)Rx%)YuCYH7");
      stdValueInstantiator0.canCreateFromString();
      stdValueInstantiator1.getArrayDelegateCreator();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")*X)Rx%)YuYH7", "l:4FUv=,g FQ:w", 363);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      stdValueInstantiator1.unwrapAndWrapException(defaultDeserializationContext0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Parser of type ", "vL,%9b5xi", 2164);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLClientInfoException0);
      // Undeclared exception!
      stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("E}A)Y+<vNA=1d9&]w", "", 1024);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      Class<String> class1 = String.class;
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator((DeserializationConfig) null, class1);
      stdValueInstantiator2.wrapException(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings.createIfNeeded(class0, javaType0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0.getDefaultCreator();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext_Impl0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")*X)Rx%)YuYH7", "l:4FUv=,FQw", 363);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLSyntaxErrorException0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdValueInstantiator1.rewrapCtorProblem(defaultDeserializationContext0, jsonMappingException0);
      stdValueInstantiator1.getWithArgsCreator();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "GTu`Y*O<v?=.pK!D,*", "GTu`Y*O<v?=.pK!D,*");
      stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, jsonMappingException0);
      stdValueInstantiator0.getWithArgsCreator();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromLong((DeserializationContext) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateFromInt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0.getValueClass();
      stdValueInstantiator0.getWithArgsCreator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 733);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Module> class1 = Module.class;
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      javaTypeArray0[5] = null;
      javaTypeArray0[6] = null;
      javaTypeArray0[7] = null;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ExceptionInInitializerError> class2 = ExceptionInInitializerError.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class3);
      AnnotationMap annotationMap0 = AnnotationMap.of(class2, (Annotation) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-26));
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0._delegateCreator = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator1.unwrapAndWrapException((DeserializationContext) null, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0.getValueClass();
      stdValueInstantiator0.getWithArgsCreator();
      DeserializationContext deserializationContext0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 733);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) defaultDeserializationContext0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings.createIfNeeded(class0, javaType0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1._fromIntCreator;
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("]+P`ab%afF-w3=Zp>6e", clientInfoStatus0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      stdValueInstantiator1.getArrayDelegateCreator();
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator2.wrapException(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getDefaultCreator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLFeatureNotSupportedException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext_Impl0.converterInstance((Annotated) null, (Object) null);
      sQLFeatureNotSupportedException0.setNextException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NMDWGf{p", "]+P`ab%afF-w3=Zp>6e", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("Cannot find a deserializer for non-concrete Map type ", clientInfoStatus0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0.wrapException(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(propertyAccessor0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      objectReader1.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put(")ew4Mr{", "y<)g87m_rN00z");
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ObjectNode objectNode2 = objectNode1.without((Collection<String>) set0);
      ObjectNode objectNode3 = objectNode2.put((String) null, (Float) null);
      ObjectNode objectNode4 = objectNode3.put("", 0L);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      try { 
        objectReader0.treeToValue((TreeNode) objectNode4, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \")ew4Mr{\" (class com.fasterxml.jackson.annotation.PropertyAccessor), not marked as ignorable (3 known properties: \"cause\", \"stackTrace\", \"path\"])
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.annotation.PropertyAccessor[\")ew4Mr{\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NMDWGf{p", "]+P`ab%afF-w3=Zp>6e", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromString(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getIncompleteParameter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MinimalClassNameIdResolver> class1 = MinimalClassNameIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0, (Object) class0, (Object) invocationTargetException0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(stdValueInstantiator1);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, arrayType1, (SettableBeanProperty[]) null);
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NMDWGf{p", "]+P`ab%afF-w3=Zp>6e", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromIntCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = null;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromDouble(defaultDeserializationContext_Impl0, 9.223372036854776E18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0.getValueClass();
      stdValueInstantiator0.getWithArgsCreator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Null constructor not allowed", "] -- unresolved forward-reference?", 733);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0._fromDoubleCreator = null;
      stdValueInstantiator0.getValueClass();
      stdValueInstantiator0.getWithArgsCreator();
      DeserializationContext deserializationContext0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{^VrSh!)FY&oGUv", "com.fasterxml.jackson.core.TreeCodec", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("{^VrSh!)FY&oGUv", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLInvalidAuthorizationSpecException1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("{^VrSh!)FY&oGUv", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.getValueTypeDesc();
      stdValueInstantiator0.canInstantiate();
      stdValueInstantiator0.canCreateUsingDefault();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forCreation((DeserializationConfig) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TypeFactory.unknownType();
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, deserializationContext0);
      beanDeserializerBuilder0.getBuildMethod();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = null;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      classArray0[1] = class0;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findMethod((String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getIncompleteParameter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stdValueInstantiator1.configureIncompleteParameter((AnnotatedParameter) null);
      stdValueInstantiator1.canCreateUsingArrayDelegate();
      stdValueInstantiator0.getArrayDelegateCreator();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingDefault();
      stdValueInstantiator0.canCreateUsingDelegate();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings.createIfNeeded(class0, javaType0);
      Class<String> class1 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class1);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator1._fromBooleanCreator;
      stdValueInstantiator1._delegateCreator = null;
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator2.canCreateUsingArrayDelegate();
      stdValueInstantiator0.getArrayDelegateCreator();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      assertNull(annotatedWithParams0);
      
      stdValueInstantiator0._fromDoubleCreator = null;
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertNotNull(class1);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.JsonMappingException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator0.getWithArgsCreator();
      assertNull(annotatedWithParams1);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      DeserializationContext deserializationContext0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{^VrSh!)FY&oGUv", "{^VrSh!)FY&oGUv", 733);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: {^VrSh!)FY&oGUv", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("{^VrSh!)FY&oGUv", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("{^VrSh!)FY&oGUv", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(733, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.TypeIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NMDWGf{p", "]+P`ab%afF-w3=Zp>6e", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLClientInfoException0.toString());
      assertEquals("NMDWGf{p", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("]+P`ab%afF-w3=Zp>6e", sQLClientInfoException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLClientInfoException0.toString());
      assertEquals("NMDWGf{p", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("]+P`ab%afF-w3=Zp>6e", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      sQLClientInfoException0.addSuppressed(sQLSyntaxErrorException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLClientInfoException0.toString());
      assertEquals("NMDWGf{p", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("]+P`ab%afF-w3=Zp>6e", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLClientInfoException0.toString());
      assertEquals("NMDWGf{p", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("]+P`ab%afF-w3=Zp>6e", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLTransientConnectionException0.getMessage());
      
      String string0 = sQLTransientConnectionException0.getLocalizedMessage();
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", string0);
      assertNotNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLClientInfoException0.toString());
      assertEquals("NMDWGf{p", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("]+P`ab%afF-w3=Zp>6e", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLTransientConnectionException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning("] -- unresolved forward-reference?", "] -- unresolved forward-reference?", 91, sQLTransientConnectionException0);
      assertNotNull(sQLWarning0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLClientInfoException0.toString());
      assertEquals("NMDWGf{p", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("]+P`ab%afF-w3=Zp>6e", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: NMDWGf{p", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLClientInfoException: NMDWGf{p", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLWarning: ] -- unresolved forward-reference?", sQLWarning0.toString());
      assertEquals(91, sQLWarning0.getErrorCode());
      assertEquals("] -- unresolved forward-reference?", sQLWarning0.getSQLState());
      assertEquals("] -- unresolved forward-reference?", sQLWarning0.getMessage());
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      assertNotNull(typeBindings0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      
      JavaType[] javaTypeArray0 = new JavaType[0];
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, (JavaType) simpleType0);
      assertNotNull(mapType0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      
      MapLikeType mapLikeType0 = mapType0.withContentTypeHandler(simpleType0);
      assertNotNull(mapLikeType0);
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertEquals(0, javaTypeArray0.length);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapLikeType0, mapType0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapLikeType0);
      assertNotNull(stdValueInstantiator0);
      assertTrue(mapType0.equals((Object)mapLikeType0));
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("[map type; class java.lang.ExceptionInInitializerError, [simple type, class java.lang.ExceptionInInitializerError] -> [simple type, class java.lang.ExceptionInInitializerError]]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertTrue(mapType0.equals((Object)mapLikeType0));
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertEquals("[map type; class java.lang.ExceptionInInitializerError, [simple type, class java.lang.ExceptionInInitializerError] -> [simple type, class java.lang.ExceptionInInitializerError]]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertEquals("[map type; class java.lang.ExceptionInInitializerError, [simple type, class java.lang.ExceptionInInitializerError] -> [simple type, class java.lang.ExceptionInInitializerError]]", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertNotNull(jsonLocation0);
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, "UNKNOWN TYPE", jsonLocation0);
      assertNotNull(jsonMappingException0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: UNKNOWN TYPE\n at [Source: UNKNOWN; line: -1, column: -1]", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: UNKNOWN TYPE\n at [Source: UNKNOWN; line: -1, column: -1]", sQLFeatureNotSupportedException0.toString());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", (String) null, 3310, sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals(3310, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals("", sQLFeatureNotSupportedException1.getMessage());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: UNKNOWN TYPE\n at [Source: UNKNOWN; line: -1, column: -1]", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: UNKNOWN TYPE\n at [Source: UNKNOWN; line: -1, column: -1]", sQLFeatureNotSupportedException0.toString());
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator1.wrapAsJsonMappingException(defaultDeserializationContext_Impl0, sQLFeatureNotSupportedException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      assertNotNull(typeBindings0);
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      Class<MinimalClassNameIdResolver> class1 = MinimalClassNameIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class1);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canInstantiate());
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getArrayDelegateCreator();
      assertNull(annotatedWithParams0);
      assertSame(class0, class1);
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertSame(class1, class0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator0._fromBooleanCreator;
      assertNull(annotatedWithParams1);
      
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator1);
      assertNotNull(stdValueInstantiator2);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator2.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver`", stdValueInstantiator2.getValueTypeDesc());
      assertFalse(stdValueInstantiator2.canCreateUsingDefault());
      assertFalse(stdValueInstantiator2.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator2.canInstantiate());
      assertFalse(stdValueInstantiator2.canCreateFromBoolean());
      assertFalse(stdValueInstantiator2.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator2.canCreateFromLong());
      assertFalse(stdValueInstantiator2.canCreateFromString());
      assertFalse(stdValueInstantiator2.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator2.canCreateFromDouble());
      assertFalse(stdValueInstantiator2.canCreateFromInt());
      
      boolean boolean0 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertFalse(boolean0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator2));
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertSame(class1, class0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator2);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      StdValueInstantiator stdValueInstantiator3 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      assertNotNull(stdValueInstantiator3);
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator2));
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(stdValueInstantiator3.canCreateUsingDefault());
      assertFalse(stdValueInstantiator3.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator3.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator3.canCreateFromLong());
      assertFalse(stdValueInstantiator3.canCreateFromString());
      assertFalse(stdValueInstantiator3.canCreateFromBoolean());
      assertFalse(stdValueInstantiator3.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator3.canInstantiate());
      assertFalse(stdValueInstantiator3.canCreateFromDouble());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator3.getValueTypeDesc());
      assertFalse(stdValueInstantiator3.canCreateFromInt());
      
      AnnotatedWithParams annotatedWithParams2 = stdValueInstantiator3.getArrayDelegateCreator();
      assertNull(annotatedWithParams2);
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator3.equals((Object)stdValueInstantiator2));
      assertNotSame(stdValueInstantiator3, stdValueInstantiator0);
      assertNotSame(stdValueInstantiator3, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator3, stdValueInstantiator2);
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(stdValueInstantiator3.canCreateUsingDefault());
      assertFalse(stdValueInstantiator3.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator3.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator3.canCreateFromLong());
      assertFalse(stdValueInstantiator3.canCreateFromString());
      assertFalse(stdValueInstantiator3.canCreateFromBoolean());
      assertFalse(stdValueInstantiator3.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator3.canInstantiate());
      assertFalse(stdValueInstantiator3.canCreateFromDouble());
      assertEquals("[simple type, class java.lang.Object]", stdValueInstantiator3.getValueTypeDesc());
      assertFalse(stdValueInstantiator3.canCreateFromInt());
      
      // Undeclared exception!
      try { 
        stdValueInstantiator2.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      assertNotNull(typeBindings0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType[] javaTypeArray0 = new JavaType[4];
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      assertEquals(PropertyAccessor.GETTER, propertyAccessor0);
      assertFalse(propertyAccessor0.isGetterEnabled());
      assertFalse(propertyAccessor0.fieldEnabled());
      assertFalse(propertyAccessor0.creatorEnabled());
      assertTrue(propertyAccessor0.getterEnabled());
      assertFalse(propertyAccessor0.setterEnabled());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(propertyAccessor0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(propertyAccessor0.isGetterEnabled());
      assertFalse(propertyAccessor0.fieldEnabled());
      assertFalse(propertyAccessor0.creatorEnabled());
      assertTrue(propertyAccessor0.getterEnabled());
      assertFalse(propertyAccessor0.setterEnabled());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(propertyAccessor0.isGetterEnabled());
      assertFalse(propertyAccessor0.fieldEnabled());
      assertFalse(propertyAccessor0.creatorEnabled());
      assertTrue(propertyAccessor0.getterEnabled());
      assertFalse(propertyAccessor0.setterEnabled());
      
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      assertNotNull(typeFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(propertyAccessor0.isGetterEnabled());
      assertFalse(propertyAccessor0.fieldEnabled());
      assertFalse(propertyAccessor0.creatorEnabled());
      assertTrue(propertyAccessor0.getterEnabled());
      assertFalse(propertyAccessor0.setterEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      assertNotNull(typeFactory1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(propertyAccessor0.isGetterEnabled());
      assertFalse(propertyAccessor0.fieldEnabled());
      assertFalse(propertyAccessor0.creatorEnabled());
      assertTrue(propertyAccessor0.getterEnabled());
      assertFalse(propertyAccessor0.setterEnabled());
      
      Class<InvocationTargetException> class1 = InvocationTargetException.class;
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class1, javaType0, javaType0);
      assertNotNull(mapLikeType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(propertyAccessor0.isGetterEnabled());
      assertFalse(propertyAccessor0.fieldEnabled());
      assertFalse(propertyAccessor0.creatorEnabled());
      assertTrue(propertyAccessor0.getterEnabled());
      assertFalse(propertyAccessor0.setterEnabled());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(objectMapper0);
      assertNotNull(mapLikeType1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(propertyAccessor0.isGetterEnabled());
      assertFalse(propertyAccessor0.fieldEnabled());
      assertFalse(propertyAccessor0.creatorEnabled());
      assertTrue(propertyAccessor0.getterEnabled());
      assertFalse(propertyAccessor0.setterEnabled());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isConcrete());
      assertTrue(mapLikeType1.isMapLikeType());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isInterface());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isPrimitive());
      
      javaTypeArray0[0] = (JavaType) mapLikeType1;
      javaTypeArray0[1] = javaType0;
      PropertyName propertyName0 = PropertyName.construct("lM]FQp", "lM]FQp");
      assertNotNull(propertyName0);
      assertEquals("lM]FQp", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("lM]FQp", propertyName0.getSimpleName());
      
      ObjectIdGenerator<Object> objectIdGenerator0 = (ObjectIdGenerator<Object>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator0, true);
      assertNotNull(objectIdWriter0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertEquals("lM]FQp", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("lM]FQp", propertyName0.getSimpleName());
      assertTrue(objectIdWriter0.alwaysAsId);
      
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withAlwaysAsId(true);
      assertNotNull(objectIdWriter1);
      assertSame(objectIdWriter0, objectIdWriter1);
      assertSame(objectIdWriter1, objectIdWriter0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertEquals("lM]FQp", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("lM]FQp", propertyName0.getSimpleName());
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(objectIdWriter1.alwaysAsId);
      
      ObjectIdWriter objectIdWriter2 = objectIdWriter1.withSerializer((JsonSerializer<?>) null);
      assertNotNull(objectIdWriter2);
      assertFalse(objectIdWriter2.equals((Object)objectIdWriter1));
      assertFalse(objectIdWriter2.equals((Object)objectIdWriter0));
      assertNotSame(objectIdWriter0, objectIdWriter2);
      assertSame(objectIdWriter0, objectIdWriter1);
      assertSame(objectIdWriter1, objectIdWriter0);
      assertNotSame(objectIdWriter1, objectIdWriter2);
      assertNotSame(objectIdWriter2, objectIdWriter1);
      assertNotSame(objectIdWriter2, objectIdWriter0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertEquals("lM]FQp", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("lM]FQp", propertyName0.getSimpleName());
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(objectIdWriter1.alwaysAsId);
      assertTrue(objectIdWriter2.alwaysAsId);
      
      SimpleType simpleType0 = (SimpleType)objectIdWriter2.idType;
      assertNotNull(simpleType0);
      assertSame(simpleType0, javaType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[3], javaTypeArray0[0]);
      assertNotNull(mapType0);
      assertEquals(4, javaTypeArray0.length);
      assertSame(javaType0, simpleType0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      
      MapType mapType1 = mapType0.withContentTypeHandler("lM]FQp");
      assertNotNull(mapType1);
      assertTrue(mapType1.equals((Object)mapType0));
      assertEquals(4, javaTypeArray0.length);
      assertSame(javaType0, simpleType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("x/GS'h", "an|@V}@zA;eR9+{\"");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("an|@V}@zA;eR9+{\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("x/GS'h", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: x/GS'h", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLFeatureNotSupportedException0);
      assertNotNull(exceptionInInitializerError0);
      assertEquals("an|@V}@zA;eR9+{\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("x/GS'h", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: x/GS'h", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.lang.ExceptionInInitializerError", exceptionInInitializerError0.toString());
      assertNull(exceptionInInitializerError0.getMessage());
      
      MapType mapType2 = mapType1.withValueHandler(exceptionInInitializerError0);
      assertNotNull(mapType2);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertEquals(4, javaTypeArray0.length);
      assertSame(javaType0, simpleType0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertEquals("an|@V}@zA;eR9+{\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("x/GS'h", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: x/GS'h", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.lang.ExceptionInInitializerError", exceptionInInitializerError0.toString());
      assertNull(exceptionInInitializerError0.getMessage());
      assertFalse(mapType2.useStaticType());
      assertEquals(0, mapType2.containedTypeCount());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      
      MapType mapType3 = mapType2.withKeyTypeHandler(objectIdWriter1);
      assertNotNull(mapType3);
      assertFalse(objectIdWriter0.equals((Object)objectIdWriter2));
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType0));
      assertEquals(4, javaTypeArray0.length);
      assertSame(javaType0, simpleType0);
      assertNotSame(objectIdWriter0, objectIdWriter2);
      assertSame(objectIdWriter0, objectIdWriter1);
      assertSame(objectIdWriter1, objectIdWriter0);
      assertNotSame(objectIdWriter1, objectIdWriter2);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType1);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertEquals("lM]FQp", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("lM]FQp", propertyName0.getSimpleName());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertEquals("an|@V}@zA;eR9+{\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("x/GS'h", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: x/GS'h", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.lang.ExceptionInInitializerError", exceptionInInitializerError0.toString());
      assertNull(exceptionInInitializerError0.getMessage());
      assertFalse(mapType2.useStaticType());
      assertEquals(0, mapType2.containedTypeCount());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isAbstract());
      assertEquals(0, mapType3.containedTypeCount());
      assertFalse(mapType3.useStaticType());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.hasHandlers());
      assertTrue(mapType3.hasValueHandler());
      assertFalse(mapType3.isEnumType());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isFinal());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(objectIdWriter1.alwaysAsId);
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapType3);
      assertNotNull(stdValueInstantiator0);
      assertFalse(objectIdWriter0.equals((Object)objectIdWriter2));
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType3));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType0));
      assertEquals(4, javaTypeArray0.length);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertEquals("[map type; class com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver, [simple type, class java.lang.Object] -> [map-like type; class java.lang.reflect.InvocationTargetException, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("lM]FQp", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("lM]FQp", propertyName0.getSimpleName());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertEquals("an|@V}@zA;eR9+{\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("x/GS'h", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: x/GS'h", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.lang.ExceptionInInitializerError", exceptionInInitializerError0.toString());
      assertNull(exceptionInInitializerError0.getMessage());
      assertFalse(mapType2.useStaticType());
      assertEquals(0, mapType2.containedTypeCount());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isAbstract());
      assertEquals(0, mapType3.containedTypeCount());
      assertFalse(mapType3.useStaticType());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.hasHandlers());
      assertTrue(mapType3.hasValueHandler());
      assertFalse(mapType3.isEnumType());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isFinal());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(objectIdWriter0.alwaysAsId);
      assertTrue(objectIdWriter1.alwaysAsId);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromInt(defaultDeserializationContext0, (-823));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNull(deserializationConfig0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromInt(defaultDeserializationContext_Impl0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDefault(defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("", "", 22);
      assertNotNull(sQLDataException0);
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(22, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      assertNotNull(collectionLikeType0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasHandlers());
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "", collectionLikeType0);
      assertNotNull(virtualAnnotatedMember0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertEquals("", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      Field field0 = virtualAnnotatedMember0.getAnnotated();
      assertNull(field0);
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertEquals("", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      AnnotationMap annotationMap0 = AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      assertNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      assertNotNull(annotatedField0);
      
      AnnotatedField annotatedField1 = annotatedField0.withAnnotations((AnnotationMap) null);
      assertNotNull(annotatedField1);
      assertTrue(annotatedField1.equals((Object)annotatedField0));
      assertNotSame(annotatedField0, annotatedField1);
      assertNotSame(annotatedField1, annotatedField0);
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDefault(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.reflect.InvocationTargetException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      JavaType javaType0 = stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertNull(javaType0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.reflect.InvocationTargetException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDefault();
      assertFalse(boolean0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.reflect.InvocationTargetException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      boolean boolean1 = stdValueInstantiator0.canCreateUsingDelegate();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertEquals("`java.lang.reflect.InvocationTargetException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate(defaultDeserializationContext0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.reflect.InvocationTargetException`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertEquals("`java.lang.Integer`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDelegateCreator();
      assertNull(annotatedWithParams0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      String string0 = "ifG$za\\(iX{XmM6'JU1";
      ObjectMapper objectMapper2 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "ifG$za(iX{XmM6'JU1");
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      assertNotNull(objectMapper3);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, objectMapper3.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper4 = objectMapper3.disable(serializationFeature0);
      assertNotNull(objectMapper4);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertFalse(objectMapper4.equals((Object)objectMapper1));
      assertSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertNotSame(objectMapper4, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper4.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper4.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertFalse(objectMapper4.equals((Object)objectMapper1));
      assertSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertNotSame(objectMapper4, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper4.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createUsingDelegate(deserializationContext0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.Integer`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = null;
      try {
        stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDelegateCreator();
      assertNull(annotatedWithParams0);
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(boolean0);
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromString();
      assertFalse(boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("phone", "Deserialization of %s by passing existing instance (of %s) not supported", 1);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("Deserialization of %s by passing existing instance (of %s) not supported", sQLTransientConnectionException0.getSQLState());
      assertEquals("phone", sQLTransientConnectionException0.getMessage());
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: phone", sQLTransientConnectionException0.toString());
      
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLTransientConnectionException0);
      assertNotNull(invocationTargetException0);
      assertEquals("Deserialization of %s by passing existing instance (of %s) not supported", sQLTransientConnectionException0.getSQLState());
      assertEquals("phone", sQLTransientConnectionException0.getMessage());
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: phone", sQLTransientConnectionException0.toString());
      assertNull(invocationTargetException0.getMessage());
      assertEquals("java.lang.reflect.InvocationTargetException", invocationTargetException0.toString());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(stdValueInstantiator0, invocationTargetException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromDouble();
      assertFalse(boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      
      boolean boolean1 = stdValueInstantiator0.canCreateFromBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean(defaultDeserializationContext0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      
      boolean boolean0 = stdValueInstantiator1.canCreateUsingArrayDelegate();
      assertFalse(boolean0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertEquals("`java.lang.String`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getArrayDelegateCreator();
      assertNull(annotatedWithParams0);
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromStringCreator;
      assertNull(annotatedWithParams0);
      
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      stdValueInstantiator0._defaultCreator = null;
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator0.getWithArgsCreator();
      assertNull(annotatedWithParams1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromObjectWith();
      assertFalse(boolean0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertNotNull(class1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      boolean boolean1 = stdValueInstantiator0.canCreateFromBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean2 = stdValueInstantiator0.canCreateFromDouble();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean3 = stdValueInstantiator0.canCreateUsingDelegate();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean4 = stdValueInstantiator0.canCreateFromString();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean5 = stdValueInstantiator0.canInstantiate();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean6 = stdValueInstantiator0.canInstantiate();
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean7 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(boolean7);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      stdValueInstantiator0._arrayDelegateCreator = null;
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.String`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      JsonFactory jsonFactory0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(propertyAccessor0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      typeFactory0.withClassLoader(classLoader1);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      javaTypeArray0[0] = (JavaType) mapLikeType1;
      javaTypeArray0[1] = javaType0;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean(defaultDeserializationContext_Impl0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator1);
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean(defaultDeserializationContext0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
  }
}
