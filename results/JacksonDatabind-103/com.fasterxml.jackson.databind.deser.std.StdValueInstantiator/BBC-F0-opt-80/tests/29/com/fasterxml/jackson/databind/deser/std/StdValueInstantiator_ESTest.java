/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 04:15:34 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayOutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.JapaneseEra;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ((TypeBase) javaType0).toCanonical();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType1 = typeFactory0.constructType((Type) javaType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType1);
      valueInstantiator_Base0.getDelegateCreator();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType1);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      typeFactory0.withCache(lRUMap0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.canCreateFromLong();
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.getDelegateCreator();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ((TypeBase) javaType0).toCanonical();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType1 = typeFactory0.constructType((Type) javaType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType1);
      valueInstantiator_Base0.getDelegateCreator();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType1);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      int int0 = 0;
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      typeFactory0.withCache(lRUMap0);
      stdValueInstantiator0.canCreateFromLong();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JapaneseEra japaneseEra0 = JapaneseEra.HEISEI;
      int int1 = (-2593);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      String string0 = "";
      Object[] objectArray0 = new Object[2];
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createUsingArrayDelegate(defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0, (Object) null, (Object) beanDeserializerFactory0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._withArgsCreator;
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.getValueClass();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean(defaultDeserializationContext_Impl0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, javaType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.setMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      objectMapper0.readerFor(javaType0);
      objectMapper2.configure(serializationFeature0, false);
      AnnotationIntrospector.nopInstance();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializationConfig deserializationConfig0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[2] = deserializationFeature2;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1, deserializationFeatureArray0);
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      HashMap<ThaiBuddhistEra, DoubleNode> hashMap0 = new HashMap<ThaiBuddhistEra, DoubleNode>();
      ObjectReader objectReader3 = objectReader2.withAttributes(hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader3, byteArrayOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(objectMapper0, objectReader3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.getArrayDelegateCreator();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, javaType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      MockIOException mockIOException0 = new MockIOException("");
      stdValueInstantiator0.wrapException(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getValueClass();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "/pom.properties";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findClass("/pom.properties");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromDoubleCreator;
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.canCreateFromString();
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1512;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-2891);
      intArray0[5] = 1068;
      intArray0[6] = (-1029);
      intArray0[7] = (-16842752);
      intArray0[8] = (-3364);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Q=;)0|i7Y Yc \"(/");
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("No delegate constructor for ", "Q=;)0|i7Y Yc \"(/", 0, intArray0, mockIOException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(batchUpdateException1, "JUs#E{mUUfl}r");
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, invocationTargetException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("yM`jOaz/F$qi4y", class0, "yM`jOaz/F$qi4y");
      stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, jsonMappingException0);
      stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext_Impl0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0._delegateType = javaType0;
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      System.setCurrentTimeMillis((-4635L));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromStringCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      System.setCurrentTimeMillis(679L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromBooleanCreator;
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-877L));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      ObjectReader objectReader2 = objectReader1.forType(class0);
      objectReader2.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      Class<Integer> class2 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      Class<SettableBeanProperty> class3 = SettableBeanProperty.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class2, typeBindings0, (JavaType) resolvedRecursiveType0, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownTypeId(collectionLikeType0, "wv", (TypeIdResolver) null, "Fo;QzhWW4@f8V@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      SQLException sQLException0 = new SQLException();
      Object object0 = new Object();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getWithArgsCreator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType1 = typeFactory0.constructType((Type) javaType0);
      Class<EnumSet> class0 = EnumSet.class;
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      typeFactory0.constructCollectionType(class0, class1);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType1, (TypeResolutionContext) null, annotationMap0, (-2399));
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateFromObjectWith();
      stdValueInstantiator0.canInstantiate();
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0.getIncompleteParameter();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      SQLException sQLException0 = new SQLException();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromStringCreator;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.canInstantiate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromDoubleCreator;
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator1.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      StdValueInstantiator stdValueInstantiator2 = new StdValueInstantiator(stdValueInstantiator1);
      stdValueInstantiator2.canCreateUsingDelegate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromDoubleCreator;
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.canCreateUsingDelegate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a");
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType1);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromStringCreator;
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, simpleType0, settableBeanPropertyArray0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType1, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0._arrayDelegateType = javaType0;
      stdValueInstantiator0.canCreateUsingDelegate();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType1);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._fromStringCreator;
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, simpleType0, settableBeanPropertyArray0);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.canCreateUsingDefault();
      stdValueInstantiator1.getValueClass();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      TypeFactory.unknownType();
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DoubleNode> class0 = DoubleNode.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException(" value failed: ", class0, "Cannot deserialize a Map.Entry out of empty JSON Object");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", " value failed: ", 1059, jsonMappingException0);
      DataTruncation dataTruncation0 = new DataTruncation((-67), false, true, (-67), (-67), sQLNonTransientException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, dataTruncation0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper2 = objectMapper1.setTypeFactory(typeFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper3 = objectMapper2.setInjectableValues(injectableValues_Std0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      ObjectMapper objectMapper4 = objectMapper3.setSerializerFactory(serializerFactory0);
      DeserializationContext deserializationContext0 = objectMapper4.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean(deserializationContext0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      SQLException sQLException0 = new SQLException();
      Object object0 = new Object();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getWithArgsCreator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType1 = typeFactory0.constructType((Type) javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType1, (TypeResolutionContext) null, annotationMap0, (-2399));
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.canCreateFromObjectWith();
      stdValueInstantiator0.canInstantiate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("yyyy-MM-dd");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "yyyy-MM-dd");
      mockIOException0.getMessage();
      SQLWarning sQLWarning0 = new SQLWarning(mockIOException0);
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(mockIOException0);
      mockIOException0.initCause(jsonMappingException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      stdValueInstantiator0.wrapException(mockIOException0);
      stdValueInstantiator0.canCreateFromLong();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType1);
      stdValueInstantiator0.getWithArgsCreator();
      System.setCurrentTimeMillis((-1417L));
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      MockException mockException0 = new MockException("NZ3R}D_,0gGXKg-LVM");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      exceptionInInitializerError0.getStackTrace();
      exceptionInInitializerError0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException();
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, exceptionInInitializerError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("AUTO_DETECT_SETTERS", sQLTransientConnectionException0);
      sQLNonTransientConnectionException0.printStackTrace();
      sQLTransientConnectionException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      MockException mockException0 = new MockException("");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      exceptionInInitializerError0.getStackTrace();
      exceptionInInitializerError0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException();
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, exceptionInInitializerError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<JsonNode> class0 = JsonNode.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canCreateFromDouble();
      stdValueInstantiator0.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("w");
      String string0 = "expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'", "`com.fasterxml.jackson.databind.JsonNode`");
      javaType0.getSuperClass();
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getDelegateCreator();
      mockIOException0.getMessage();
      mockIOException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientConnectionException0);
      stdValueInstantiator0.getValueClass();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.configureFromArraySettings((AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.wrapException(mockIOException0);
      stdValueInstantiator0.getDelegateCreator();
      DeserializationContext deserializationContext0 = null;
      int int0 = 1023;
      Integer integer0 = new Integer(1023);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createUsingDelegate((DeserializationContext) null, integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `com.fasterxml.jackson.databind.JsonNode`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0._constructorArguments = null;
      stdValueInstantiator1._delegateType = null;
      stdValueInstantiator0.canCreateFromDouble();
      stdValueInstantiator1.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("`java.time.chrono.ThaiBuddhistEra`");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("items", "items");
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getDelegateCreator();
      stdValueInstantiator1._delegateCreator = null;
      mockIOException0.getMessage();
      mockIOException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning(mockIOException0);
      stdValueInstantiator1.getValueClass();
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.wrapException(sQLWarning0);
      stdValueInstantiator1.getDelegateCreator();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.time.chrono.ThaiBuddhistEra`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      MockException mockException0 = new MockException("TW?b#L0CepenG)g2");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(mockException0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      jsonMappingException0.clearLocation();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.wrapException(jsonMappingException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getDelegateCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.canInstantiate();
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.canCreateFromBoolean();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(exceptionInInitializerError0, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      stdValueInstantiator0.configureIncompleteParameter((AnnotatedParameter) null);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateFromBoolean();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      MockException mockException0 = new MockException("TW?b#L0CepenG)g2");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(mockException0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      jsonMappingException0.clearLocation();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.wrapException(jsonMappingException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getDelegateCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate(defaultDeserializationContext0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.Integer`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean(defaultDeserializationContext0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      MockException mockException0 = new MockException("TW?b#L0CepenG)g2");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(mockException0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.wrapException(jsonMappingException0);
      stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, jsonMappingException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDefault((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleModule simpleModule0 = new SimpleModule("(ts%b9!6ISe;o&%wQJ");
      objectMapper0.registerModule(simpleModule0);
      defaultDeserializationContext_Impl0.copy();
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0.canCreateUsingDefault();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      MockException mockException0 = new MockException("TW?b#L0CepenG)g2");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(mockException0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.wrapException(jsonMappingException0);
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("HW!q{6UY@MEz=z!-", class0, "HW!q{6UY@MEz=z!-");
      stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, jsonMappingException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean((DeserializationContext) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      AnnotatedWithParams annotatedWithParams0 = null;
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockIOException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext0, sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler((Object) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      simpleType1.refine(class0, typeBindings0, simpleType0, (JavaType[]) null);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType1);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      MockException mockException0 = new MockException("TW?b#L0CepenG)g2");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("TW?b#L0CepenG)g2");
      sQLTransactionRollbackException0.initCause(exceptionInInitializerError0);
      stdValueInstantiator0.wrapException(sQLTransactionRollbackException0);
      stdValueInstantiator0.wrapException(sQLTransactionRollbackException0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) defaultDeserializationContext_Impl0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      String string0 = "9k]rQe[6EB";
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) defaultDeserializationContext_Impl0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
      Boolean boolean0 = Boolean.valueOf("");
      objectMapper1.setDefaultMergeable(boolean0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0.getArrayDelegateCreator();
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("yyyy-MM-dd");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "yyyy-MM-dd");
      mockIOException0.getMessage();
      SQLWarning sQLWarning0 = new SQLWarning(mockIOException0);
      stdValueInstantiator0.wrapException(mockIOException0);
      MockThrowable mockThrowable0 = new MockThrowable();
      stdValueInstantiator0.wrapException(mockIOException0);
      stdValueInstantiator0.canCreateFromLong();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0._defaultCreator = null;
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.canCreateFromString();
      stdValueInstantiator0.getValueTypeDesc();
      stdValueInstantiator0.canInstantiate();
      stdValueInstantiator0.getWithArgsCreator();
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1._delegateType = null;
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator1.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("`java.time.chrono.ThaiBuddhistEra`");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("items", "items");
      mockIOException0.getMessage();
      SQLWarning sQLWarning0 = new SQLWarning(mockIOException0);
      stdValueInstantiator0.wrapException(sQLWarning0);
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromString((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      JavaType javaType0 = TypeFactory.unknownType();
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, (ObjectIdGenerator<?>) null, false);
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withAlwaysAsId(false);
      SimpleType simpleType0 = (SimpleType)objectIdWriter1.idType;
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) null, propertyName0, (ObjectIdGenerator<?>) null, false);
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withAlwaysAsId(false);
      JavaType javaType0 = objectIdWriter1.idType;
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      PropertyName propertyName0 = new PropertyName("=eiC`YK\"W!7%V ,\"dle", "=eiC`YK\"W!7%V ,\"dle");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withName(propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder2 = pOJOPropertyBuilder1.withSimpleName("=eiC`YK\"W!7%V ,\"dle");
      pOJOPropertyBuilder2.getConstructorParameter();
      stdValueInstantiator0.configureIncompleteParameter((AnnotatedParameter) null);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
      Boolean boolean0 = Boolean.valueOf("");
      objectMapper1.setDefaultMergeable(boolean0);
      stdValueInstantiator0.getValueClass();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromString((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDefault((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0._constructorArguments = null;
      stdValueInstantiator1._delegateType = null;
      stdValueInstantiator0.canCreateFromDouble();
      stdValueInstantiator1.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("`java.time.chrono.ThaiBuddhistEra`");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("items", "items");
      mockIOException0.getMessage();
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromInt((DeserializationContext) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0.canCreateFromInt();
      stdValueInstantiator0.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("");
      mockIOException0.getLocalizedMessage();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("items");
      sQLTimeoutException0.setNextException(sQLTransientConnectionException0);
      sQLTimeoutException0.initCause(mockIOException0);
      mockIOException0.getMessage();
      mockIOException0.initCause((Throwable) null);
      mockIOException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning(mockIOException0);
      stdValueInstantiator0.wrapException(mockIOException0);
      stdValueInstantiator0.getDelegateCreator();
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.ExceptionInInitializerError`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleModule simpleModule0 = new SimpleModule("UNKNOWN TYPE");
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "UNKNOWN TYPE");
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromLong(deserializationContext0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, configOverrides0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature1);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig3 = deserializationConfig2.without(formatFeature0);
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig3, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, (JsonParser) null, injectableValues_Std0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromLong(defaultDeserializationContext0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0._constructorArguments = null;
      stdValueInstantiator1._delegateType = null;
      stdValueInstantiator1.canCreateFromInt();
      stdValueInstantiator1.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("`java.time.chrono.ThaiBuddhistEra`");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Internal error: TypeReference constructed without actual type information", "items", 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Internal error: TypeReference constructed without actual type information");
      sQLTimeoutException0.setNextException(sQLTransientConnectionException0);
      sQLTimeoutException0.initCause(mockIOException0);
      mockIOException0.getMessage();
      mockIOException0.initCause(sQLTimeoutException0);
      mockIOException0.getSuppressed();
      stdValueInstantiator1.getDelegateCreator();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.time.chrono.ThaiBuddhistEra`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      // Undeclared exception!
      try { 
        StdKeyDeserializers.findStringBasedKeyDeserializer((DeserializationConfig) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromDouble(defaultDeserializationContext_Impl0, (-3335.3585));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._arrayDelegateCreator;
      stdValueInstantiator0._defaultCreator = null;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      simpleValueInstantiators0.addValueInstantiator(class0, stdValueInstantiator0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext0, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.canCreateFromObjectWith();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      exceptionInInitializerError0.getStackTrace();
      MapType mapType0 = null;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      PropertyName propertyName0 = new PropertyName("=eiC`YK\"W!7%V ,\"dle", "=eiC`YK\"W!7%V ,\"dle");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withName(propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder2 = pOJOPropertyBuilder1.withSimpleName("=eiC`YK\"W!7%V ,\"dle");
      pOJOPropertyBuilder2.getConstructorParameter();
      stdValueInstantiator0.configureIncompleteParameter((AnnotatedParameter) null);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
      Boolean boolean0 = Boolean.valueOf("");
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingArrayDelegate(deserializationContext0, objectMapper1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.ExceptionInInitializerError`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      MockException mockException0 = new MockException("TW?b#L0CepenG)g2");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(mockException0);
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      jsonMappingException0.clearLocation();
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      stdValueInstantiator0.canCreateUsingArrayDelegate();
      stdValueInstantiator0.wrapException(jsonMappingException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      valueInstantiator_Base0.getDelegateCreator();
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      AnnotatedWithParams annotatedWithParams1 = stdValueInstantiator0._delegateCreator;
      stdValueInstantiator0.canInstantiate();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator0._constructorArguments = null;
      stdValueInstantiator1._delegateType = null;
      stdValueInstantiator0.canCreateFromDouble();
      stdValueInstantiator1.getValueTypeDesc();
      MockIOException mockIOException0 = new MockIOException("`java.time.chrono.ThaiBuddhistEra`");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("items", "items");
      mockIOException0.getMessage();
      mockIOException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning(mockIOException0);
      stdValueInstantiator0.wrapException(sQLWarning0);
      stdValueInstantiator1.getDelegateCreator();
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.time.chrono.ThaiBuddhistEra`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.canInstantiate();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      Class<EnumSet> class1 = EnumSet.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructRawCollectionType(class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$561288772) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler(deserializationProblemHandler0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig2);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig1, deserializationConfig2);
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      
      Class<String> class0 = String.class;
      DeserializationConfig deserializationConfig3 = deserializationConfig2.withView(class0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig1));
      assertNotNull(deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig1, deserializationConfig3);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig1, deserializationConfig2);
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertNotSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNotSame(deserializationConfig3, deserializationConfig2);
      assertNotSame(deserializationConfig3, deserializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertNull(deserializationConfig3.getRootName());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertNull(deserializationConfig3.getDefaultMergeable());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig3, class0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig1));
      assertNotNull(stdValueInstantiator0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertNull(deserializationConfig3.getRootName());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig1));
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig1, deserializationConfig3);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig1, deserializationConfig2);
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertNotSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNotSame(deserializationConfig3, deserializationConfig2);
      assertNotSame(deserializationConfig3, deserializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertNull(deserializationConfig3.getRootName());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(boolean0);
      
      boolean boolean1 = stdValueInstantiator0.canCreateUsingDelegate();
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig1, deserializationConfig3);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig1, deserializationConfig2);
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertNotSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNotSame(deserializationConfig3, deserializationConfig2);
      assertNotSame(deserializationConfig3, deserializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertNull(deserializationConfig3.getRootName());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(boolean1);
      
      boolean boolean2 = stdValueInstantiator0.canCreateFromString();
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig1, deserializationConfig3);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig1, deserializationConfig2);
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertNotSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNotSame(deserializationConfig3, deserializationConfig2);
      assertNotSame(deserializationConfig3, deserializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertNull(deserializationConfig3.getRootName());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(boolean2);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getArrayDelegateCreator();
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig1));
      assertNull(annotatedWithParams0);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig1, deserializationConfig3);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig1, deserializationConfig2);
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertNotSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNotSame(deserializationConfig3, deserializationConfig2);
      assertNotSame(deserializationConfig3, deserializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getRootName());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertNull(deserializationConfig3.getRootName());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(annotationIntrospector0);
      
      PropertyName propertyName0 = new PropertyName("=eiC`YK\"W!7%V ,\"dle", "=eiC`YK\"W!7%V ,\"dle");
      assertNotNull(propertyName0);
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      assertNotNull(pOJOPropertyBuilder0);
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withName(propertyName0);
      assertFalse(pOJOPropertyBuilder1.equals((Object)pOJOPropertyBuilder0));
      assertNotNull(pOJOPropertyBuilder1);
      assertNotSame(pOJOPropertyBuilder0, pOJOPropertyBuilder1);
      assertNotSame(pOJOPropertyBuilder1, pOJOPropertyBuilder0);
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder1.couldDeserialize());
      assertFalse(pOJOPropertyBuilder1.anyVisible());
      assertFalse(pOJOPropertyBuilder1.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder1.hasGetter());
      assertFalse(pOJOPropertyBuilder1.anyIgnorals());
      assertFalse(pOJOPropertyBuilder1.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder1.hasField());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder1.getInternalName());
      assertFalse(pOJOPropertyBuilder1.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder1.hasSetter());
      assertFalse(pOJOPropertyBuilder1.couldSerialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder1.getName());
      
      POJOPropertyBuilder pOJOPropertyBuilder2 = pOJOPropertyBuilder1.withSimpleName("=eiC`YK\"W!7%V ,\"dle");
      assertFalse(pOJOPropertyBuilder0.equals((Object)pOJOPropertyBuilder1));
      assertFalse(pOJOPropertyBuilder1.equals((Object)pOJOPropertyBuilder0));
      assertFalse(pOJOPropertyBuilder2.equals((Object)pOJOPropertyBuilder0));
      assertNotNull(pOJOPropertyBuilder2);
      assertNotSame(pOJOPropertyBuilder0, pOJOPropertyBuilder1);
      assertNotSame(pOJOPropertyBuilder0, pOJOPropertyBuilder2);
      assertNotSame(pOJOPropertyBuilder1, pOJOPropertyBuilder0);
      assertSame(pOJOPropertyBuilder1, pOJOPropertyBuilder2);
      assertNotSame(pOJOPropertyBuilder2, pOJOPropertyBuilder0);
      assertSame(pOJOPropertyBuilder2, pOJOPropertyBuilder1);
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder1.couldDeserialize());
      assertFalse(pOJOPropertyBuilder1.anyVisible());
      assertFalse(pOJOPropertyBuilder1.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder1.hasGetter());
      assertFalse(pOJOPropertyBuilder1.anyIgnorals());
      assertFalse(pOJOPropertyBuilder1.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder1.hasField());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder1.getInternalName());
      assertFalse(pOJOPropertyBuilder1.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder1.hasSetter());
      assertFalse(pOJOPropertyBuilder1.couldSerialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder1.getName());
      assertFalse(pOJOPropertyBuilder2.hasField());
      assertFalse(pOJOPropertyBuilder2.anyVisible());
      assertFalse(pOJOPropertyBuilder2.anyIgnorals());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder2.getInternalName());
      assertFalse(pOJOPropertyBuilder2.hasSetter());
      assertFalse(pOJOPropertyBuilder2.couldDeserialize());
      assertFalse(pOJOPropertyBuilder2.hasGetter());
      assertFalse(pOJOPropertyBuilder2.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder2.couldSerialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder2.getName());
      assertFalse(pOJOPropertyBuilder2.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder2.isExplicitlyIncluded());
      
      AnnotatedParameter annotatedParameter0 = pOJOPropertyBuilder2.getConstructorParameter();
      assertFalse(pOJOPropertyBuilder0.equals((Object)pOJOPropertyBuilder1));
      assertFalse(pOJOPropertyBuilder0.equals((Object)pOJOPropertyBuilder2));
      assertFalse(pOJOPropertyBuilder1.equals((Object)pOJOPropertyBuilder0));
      assertFalse(pOJOPropertyBuilder2.equals((Object)pOJOPropertyBuilder0));
      assertNull(annotatedParameter0);
      assertNotSame(pOJOPropertyBuilder0, pOJOPropertyBuilder1);
      assertNotSame(pOJOPropertyBuilder0, pOJOPropertyBuilder2);
      assertNotSame(pOJOPropertyBuilder1, pOJOPropertyBuilder0);
      assertSame(pOJOPropertyBuilder1, pOJOPropertyBuilder2);
      assertNotSame(pOJOPropertyBuilder2, pOJOPropertyBuilder0);
      assertSame(pOJOPropertyBuilder2, pOJOPropertyBuilder1);
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertFalse(propertyName0.isEmpty());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder1.couldDeserialize());
      assertFalse(pOJOPropertyBuilder1.anyVisible());
      assertFalse(pOJOPropertyBuilder1.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder1.hasGetter());
      assertFalse(pOJOPropertyBuilder1.anyIgnorals());
      assertFalse(pOJOPropertyBuilder1.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder1.hasField());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder1.getInternalName());
      assertFalse(pOJOPropertyBuilder1.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder1.hasSetter());
      assertFalse(pOJOPropertyBuilder1.couldSerialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder1.getName());
      assertFalse(pOJOPropertyBuilder2.hasField());
      assertFalse(pOJOPropertyBuilder2.anyVisible());
      assertFalse(pOJOPropertyBuilder2.anyIgnorals());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder2.getInternalName());
      assertFalse(pOJOPropertyBuilder2.hasSetter());
      assertFalse(pOJOPropertyBuilder2.couldDeserialize());
      assertFalse(pOJOPropertyBuilder2.hasGetter());
      assertFalse(pOJOPropertyBuilder2.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder2.couldSerialize());
      assertEquals("=eiC`YK\"W!7%V ,\"dle", pOJOPropertyBuilder2.getName());
      assertFalse(pOJOPropertyBuilder2.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder2.isExplicitlyIncluded());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getArrayDelegateCreator();
      assertNull(annotatedWithParams0);
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertEquals("`java.lang.ExceptionInInitializerError`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotNull(stdValueInstantiator1);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator1.getValueTypeDesc());
      
      stdValueInstantiator0._constructorArguments = null;
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      
      stdValueInstantiator1._delegateType = null;
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator1.getValueTypeDesc());
      
      boolean boolean0 = stdValueInstantiator1.canCreateFromInt();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator1.getValueTypeDesc());
      assertFalse(boolean0);
      
      String string0 = stdValueInstantiator1.getValueTypeDesc();
      assertFalse(stdValueInstantiator0.equals((Object)stdValueInstantiator1));
      assertFalse(stdValueInstantiator1.equals((Object)stdValueInstantiator0));
      assertNotNull(string0);
      assertNotSame(stdValueInstantiator0, stdValueInstantiator1);
      assertNotSame(stdValueInstantiator1, stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromInt());
      assertFalse(stdValueInstantiator1.canCreateFromString());
      assertFalse(stdValueInstantiator1.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingDefault());
      assertFalse(stdValueInstantiator1.canCreateFromBoolean());
      assertFalse(stdValueInstantiator1.canCreateFromDouble());
      assertFalse(stdValueInstantiator1.canCreateFromLong());
      assertFalse(stdValueInstantiator1.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator1.canCreateFromObjectWith());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator1.getValueTypeDesc());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", string0);
      
      MockIOException mockIOException0 = new MockIOException("`java.time.chrono.ThaiBuddhistEra`");
      assertNotNull(mockIOException0);
      
      String string1 = mockIOException0.getLocalizedMessage();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", string1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Internal error: TypeReference constructed without actual type information", "items", 1);
      assertNotNull(sQLTimeoutException0);
      assertEquals("items", sQLTimeoutException0.getSQLState());
      assertEquals(1, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Internal error: TypeReference constructed without actual type information", sQLTimeoutException0.toString());
      assertEquals("Internal error: TypeReference constructed without actual type information", sQLTimeoutException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Internal error: TypeReference constructed without actual type information");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("Internal error: TypeReference constructed without actual type information", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: Internal error: TypeReference constructed without actual type information", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      sQLTimeoutException0.setNextException(sQLTransientConnectionException0);
      assertEquals("items", sQLTimeoutException0.getSQLState());
      assertEquals(1, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Internal error: TypeReference constructed without actual type information", sQLTimeoutException0.toString());
      assertEquals("Internal error: TypeReference constructed without actual type information", sQLTimeoutException0.getMessage());
      assertEquals("Internal error: TypeReference constructed without actual type information", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: Internal error: TypeReference constructed without actual type information", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)sQLTimeoutException0.initCause(mockIOException0);
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertEquals("items", sQLTimeoutException0.getSQLState());
      assertEquals(1, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Internal error: TypeReference constructed without actual type information", sQLTimeoutException0.toString());
      assertEquals("Internal error: TypeReference constructed without actual type information", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Internal error: TypeReference constructed without actual type information", sQLTimeoutException1.toString());
      assertEquals("Internal error: TypeReference constructed without actual type information", sQLTimeoutException1.getMessage());
      assertEquals(1, sQLTimeoutException1.getErrorCode());
      assertEquals("items", sQLTimeoutException1.getSQLState());
      
      String string2 = mockIOException0.getMessage();
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", string2);
      
      MockThrowable mockThrowable0 = (MockThrowable)mockIOException0.initCause(sQLTimeoutException0);
      assertNotNull(mockThrowable0);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertEquals("items", sQLTimeoutException0.getSQLState());
      assertEquals(1, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Internal error: TypeReference constructed without actual type information", sQLTimeoutException0.toString());
      assertEquals("Internal error: TypeReference constructed without actual type information", sQLTimeoutException0.getMessage());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: `java.time.chrono.ThaiBuddhistEra`", mockThrowable0.toString());
      
      Throwable[] throwableArray0 = mockIOException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      SQLWarning sQLWarning0 = new SQLWarning(mockIOException0);
      assertNotNull(sQLWarning0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: `java.time.chrono.ThaiBuddhistEra`", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: org.evosuite.runtime.mock.java.lang.MockThrowable: `java.time.chrono.ThaiBuddhistEra`", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      
      // Undeclared exception!
      stdValueInstantiator0.wrapException(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      assertNotNull(stdValueInstantiator0);
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BaseSettings baseSettings0 = null;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = null;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonNodeFactory0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig2);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertSame(deserializationConfig1, deserializationConfig2);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertSame(deserializationConfig2, deserializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig3 = deserializationConfig2.without(formatFeature0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertSame(deserializationConfig1, deserializationConfig2);
      assertSame(deserializationConfig1, deserializationConfig3);
      assertSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertSame(deserializationConfig2, deserializationConfig1);
      assertSame(deserializationConfig3, deserializationConfig2);
      assertSame(deserializationConfig3, deserializationConfig1);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig3.getRootName());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig3, class0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertNotNull(stdValueInstantiator0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig3.getRootName());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean0 = stdValueInstantiator0.canCreateFromString();
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertSame(deserializationConfig1, deserializationConfig2);
      assertSame(deserializationConfig1, deserializationConfig3);
      assertSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertSame(deserializationConfig2, deserializationConfig1);
      assertSame(deserializationConfig3, deserializationConfig2);
      assertSame(deserializationConfig3, deserializationConfig1);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig3.getRootName());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(boolean0);
      
      AnnotatedWithParams annotatedWithParams0 = stdValueInstantiator0.getDefaultCreator();
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertNull(annotatedWithParams0);
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertSame(deserializationConfig1, deserializationConfig2);
      assertSame(deserializationConfig1, deserializationConfig3);
      assertSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertSame(deserializationConfig2, deserializationConfig1);
      assertSame(deserializationConfig3, deserializationConfig2);
      assertSame(deserializationConfig3, deserializationConfig1);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig3.getRootName());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      
      boolean boolean1 = stdValueInstantiator0.canCreateFromInt();
      assertTrue(boolean1 == boolean0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig3));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig3.equals((Object)deserializationConfig0));
      assertNotSame(deserializationConfig0, deserializationConfig3);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertSame(deserializationConfig1, deserializationConfig2);
      assertSame(deserializationConfig1, deserializationConfig3);
      assertSame(deserializationConfig2, deserializationConfig3);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertSame(deserializationConfig2, deserializationConfig1);
      assertSame(deserializationConfig3, deserializationConfig2);
      assertSame(deserializationConfig3, deserializationConfig1);
      assertNotSame(deserializationConfig3, deserializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig3.getRootName());
      assertTrue(deserializationConfig3.canOverrideAccessModifiers());
      assertFalse(deserializationConfig3.useRootWrapping());
      assertFalse(deserializationConfig3.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig3.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig3.getDeserializationFeatures());
      assertFalse(deserializationConfig3.requiresFullValue());
      assertTrue(deserializationConfig3.isAnnotationProcessingEnabled());
      assertFalse(stdValueInstantiator0.canCreateFromBoolean());
      assertFalse(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator0.canCreateUsingDelegate());
      assertFalse(stdValueInstantiator0.canCreateFromObjectWith());
      assertFalse(stdValueInstantiator0.canCreateFromLong());
      assertFalse(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertEquals("`java.time.chrono.ThaiBuddhistEra`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(stdValueInstantiator0.canCreateFromString());
      assertFalse(stdValueInstantiator0.canCreateFromInt());
      assertFalse(stdValueInstantiator0.canCreateFromDouble());
      assertFalse(stdValueInstantiator0.canCreateUsingDefault());
      assertFalse(boolean1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      int int0 = (-2055);
      // Undeclared exception!
      try { 
        MockDateFormat.getTimeInstance((-2055));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2055
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getDelegateCreator();
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      stdValueInstantiator0.getWithArgsCreator();
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      stdValueInstantiator0.canCreateUsingDelegate();
      stdValueInstantiator0.getDefaultCreator();
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      // Undeclared exception!
      try { 
        StdKeyDeserializers.findStringBasedKeyDeserializer((DeserializationConfig) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withTypeHandler((Object) null);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType1);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getIncompleteParameter();
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertEquals("[simple type, class java.lang.Integer]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      String string0 = "TW?b#L0CepenG)g2";
      MockException mockException0 = new MockException("TW?b#L0CepenG)g2");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(mockException0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(exceptionInInitializerError0, "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("l]}FcN`>GCCq7", "", invocationTargetException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapAsJsonMappingException((DeserializationContext) null, sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      JavaType javaType0 = TypeFactory.unknownType();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, javaType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = null;
      try {
        stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<InvocationTargetException> class1 = InvocationTargetException.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      resolvedRecursiveType0.refine(class1, (TypeBindings) null, collectionLikeType0, javaTypeArray0);
      collectionLikeType0.getErasedSignature();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      stdValueInstantiator1.getWithArgsCreator();
      // Undeclared exception!
      try { 
        stdValueInstantiator1.createFromString((DeserializationContext) null, "6*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }
}
