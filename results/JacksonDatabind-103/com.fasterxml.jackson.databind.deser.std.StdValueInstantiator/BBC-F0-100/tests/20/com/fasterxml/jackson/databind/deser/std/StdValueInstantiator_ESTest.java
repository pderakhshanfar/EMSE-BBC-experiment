/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 20:47:38 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.PipedInputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTimeoutException;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingArrayDelegate(defaultDeserializationContext_Impl0, jsonFactory_Feature0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for UNKNOWN TYPE
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDelegate(defaultDeserializationContext_Impl0, placeholderForType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No delegate constructor for `java.lang.Integer`
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._delegateArguments = settableBeanPropertyArray0;
      SettableBeanProperty[] settableBeanPropertyArray1 = stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
      assertNull(settableBeanPropertyArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, (TypeResolutionContext) null, annotationMap0, (-1985));
      stdValueInstantiator0.configureIncompleteParameter(annotatedParameter0);
      assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, (JavaType) null, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertTrue(stdValueInstantiator0.canInstantiate());
      assertFalse(stdValueInstantiator1.canCreateUsingArrayDelegate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0._constructorArguments = settableBeanPropertyArray0;
      StdValueInstantiator stdValueInstantiator1 = new StdValueInstantiator(stdValueInstantiator0);
      assertEquals("`java.lang.Object`", stdValueInstantiator1.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig0, class0);
      stdValueInstantiator0.configureFromStringCreator((AnnotatedWithParams) null);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.configureFromLongCreator((AnnotatedWithParams) null);
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.configureFromIntCreator((AnnotatedWithParams) null);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapType0);
      stdValueInstantiator0.configureFromDoubleCreator((AnnotatedWithParams) null);
      assertEquals("[map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.configureFromBooleanCreator((AnnotatedWithParams) null);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig0, simpleType0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "y1a^2 pJEne5X}:`^t");
      stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, jsonMappingException0);
      assertEquals("[simple type, class java.lang.ExceptionInInitializerError]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertEquals("`int`", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertEquals("`com.fasterxml.jackson.databind.jsontype.TypeIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(class1);
      assertTrue(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertEquals("`com.fasterxml.jackson.core.JsonFactory$Feature`", stdValueInstantiator0.getValueTypeDesc());
      assertNotNull(class1);
      assertTrue(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType0);
      Class<?> class1 = stdValueInstantiator0.getValueClass();
      assertEquals("[array type, component type: [simple type, class com.fasterxml.jackson.annotation.ObjectIdResolver]]", stdValueInstantiator0.getValueTypeDesc());
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getIncompleteParameter();
      assertEquals("`com.fasterxml.jackson.databind.MapperFeature`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JavaType javaType0 = TypeFactory.unknownType();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<MapperFeature> class0 = MapperFeature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      JavaType javaType0 = TypeFactory.unknownType();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, javaType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      stdValueInstantiator0.getFromObjectArguments((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, simpleType0, settableBeanPropertyArray0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, simpleType0, (SettableBeanProperty[]) null);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertTrue(stdValueInstantiator0.canInstantiate());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertEquals("`com.fasterxml.jackson.databind.jsontype.TypeIdResolver`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDefault();
      assertFalse(boolean0);
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromObjectWith();
      assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("", sQLDataException0);
      sQLDataException0.initCause(sQLDataException1);
      // Undeclared exception!
      stdValueInstantiator0.wrapException(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      long[] longArray0 = new long[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" value failed: ");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fYk[v]je5y^Ca1,Ag)", " value failed: ", (-723), longArray0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.wrapAsJsonMappingException(defaultDeserializationContext_Impl0, batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = null;
      try {
        stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapType0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromBoolean();
      assertEquals("[map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      boolean boolean0 = stdValueInstantiator0.canCreateFromDouble();
      assertFalse(boolean0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromLong();
      assertFalse(boolean0);
      assertEquals("[simple type, class com.fasterxml.jackson.databind.JsonMappingException]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromInt();
      assertFalse(boolean0);
      assertEquals("[simple type, class java.lang.String]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      String string0 = stdValueInstantiator0.getValueTypeDesc();
      assertEquals("UNKNOWN TYPE", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("25EB");
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, exceptionInInitializerError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<PipedInputStream> class0 = PipedInputStream.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-63));
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) placeholderForType0, (Object) null);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, arrayType0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, (String) null);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem(deserializationContext0, invocationTargetException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class1 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "", "");
      stdValueInstantiator0.wrapAsJsonMappingException((DeserializationContext) null, jsonMappingException0);
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.rewrapCtorProblem(defaultDeserializationContext_Impl0, exceptionInInitializerError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "t!lTipy`Y");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("t!lTipy`Y", "t!lTipy`Y", 1, jsonMappingException0);
      stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLIntegrityConstraintViolationException0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("No delegate constructor for ", (String) null, 1639);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("No delegate constructor for ", "No delegate constructor for ", (-887), sQLTimeoutException0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.unwrapAndWrapException(defaultDeserializationContext_Impl0, sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "t!lTipy`Y");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("t!lTipy`Y", "t!lTipy`Y", 1, jsonMappingException0);
      stdValueInstantiator0.wrapException(sQLIntegrityConstraintViolationException0);
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromBoolean(defaultDeserializationContext_Impl0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromDouble(defaultDeserializationContext_Impl0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromLong((DeserializationContext) null, (-355L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromInt(defaultDeserializationContext_Impl0, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<String> class0 = String.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromString(defaultDeserializationContext_Impl0, "com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createFromObjectWith((DeserializationContext) defaultDeserializationContext_Impl0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdValueInstantiator0.createUsingDefault(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, simpleType0, settableBeanPropertyArray0);
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertTrue(stdValueInstantiator0.canCreateUsingArrayDelegate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType0, settableBeanPropertyArray0, (AnnotatedWithParams) null, settableBeanPropertyArray0);
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      stdValueInstantiator0.configureFromArraySettings((AnnotatedWithParams) null, simpleType0, (SettableBeanProperty[]) null);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingArrayDelegate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      stdValueInstantiator0.configureFromObjectSettings((AnnotatedWithParams) null, (AnnotatedWithParams) null, simpleType0, (SettableBeanProperty[]) null, (AnnotatedWithParams) null, (SettableBeanProperty[]) null);
      boolean boolean0 = stdValueInstantiator0.canCreateUsingDelegate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapType0);
      boolean boolean0 = stdValueInstantiator0.canInstantiate();
      assertEquals("[map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      boolean boolean0 = stdValueInstantiator0.canCreateFromString();
      assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
      stdValueInstantiator0.getWithArgsCreator();
      assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapType0);
      stdValueInstantiator0.getDefaultCreator();
      assertEquals("[map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
      assertEquals("[simple type, class java.lang.String]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
      stdValueInstantiator0.getArrayDelegateCreator();
      assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, mapType0);
      stdValueInstantiator0.getDelegateCreator();
      assertEquals("[map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", stdValueInstantiator0.getValueTypeDesc());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
      assertEquals("[simple type, class com.fasterxml.jackson.databind.JsonMappingException]", stdValueInstantiator0.getValueTypeDesc());
  }
}
