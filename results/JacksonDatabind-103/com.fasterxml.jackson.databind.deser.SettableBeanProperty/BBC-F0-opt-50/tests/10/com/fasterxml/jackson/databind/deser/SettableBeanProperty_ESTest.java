/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 09:15:38 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.math.RoundingMode;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, objectMapper0, (ByteQuadsCanonicalizer) null, byteArray0, 1, 2, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      settableBeanProperty0.deserialize(uTF8StreamJsonParser0, defaultDeserializationContext_Impl0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      PropertyName propertyName1 = propertyName0.withSimpleName("*-D6]");
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, jsonFactory0, propertyMetadata0);
      PropertyName propertyName2 = creatorProperty0.getFullName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(propertyName2.hasSimpleName());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4252, mapType0, propertyMetadata0);
      creatorProperty0.assignIndex(2);
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex(4252);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '@JsonUnwrapped' already had index (2), trying to assign 4252
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      PropertyName propertyName1 = propertyName0.withSimpleName("*-D6]");
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, jsonFactory0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName((String) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[16];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueDeserializer());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaTypeArray0[0]);
      Class<NamedType> class1 = NamedType.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) mapType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("JSON");
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      assertEquals("JSON", objectIdReferenceProperty0.getName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-860), (Object) null, propertyMetadata0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<ByteArrayInputStream> jsonDeserializer0 = (JsonDeserializer<ByteArrayInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 3058, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(3058);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(3058, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Integer integer0 = new Integer(6);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 6, integer0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName((String) null);
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("PX]}Gbp-*@Pbhs%a'e");
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("PX]}Gbp-*@Pbhs%a'e", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Integer integer0 = new Integer(6);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 6, integer0, propertyMetadata0);
      JsonDeserializer<JsonDeserializer<UTF8DataInputJsonParser>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<UTF8DataInputJsonParser>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withSimpleName((String) null);
      assertSame(settableBeanProperty1, settableBeanProperty0);
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withSimpleName("JSON");
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(9);
      creatorProperty0.withSimpleName("PX]}Gbp-*@Pbhs%a'e");
      assertEquals(9, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1423), javaType0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("?bg(g!doc@$)9u%w").when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      assertNotNull(jsonDeserializer1);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer1);
      assertEquals("#temporary-name", settableBeanProperty0.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      creatorProperty0.withNullProvider(jsonDeserializer0);
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1114111, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(69);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(69, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1423), javaType0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-875), vector0, propertyMetadata0);
      JsonDeserializer<IllegalArgumentException> jsonDeserializer0 = (JsonDeserializer<IllegalArgumentException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withName(propertyName0);
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1686, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(1686);
      creatorProperty0.withName(propertyName0);
      assertEquals(1686, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2191), (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[16];
      Class<RoundingMode> class1 = RoundingMode.class;
      MapType mapType0 = MapType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "d@.[u41~O0", false, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4261, class0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(boolean0);
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1423), javaType0, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1276), (Object) null, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueDeserializer();
      assertFalse(boolean0);
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1689, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1234, creatorProperty0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty1.getWrapperName();
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNotNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName1 = PropertyName.construct("Null SerializerProvider passed for ", "Null SerializerProvider passed for ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1276), (Object) null, propertyMetadata0);
      PropertyName propertyName2 = creatorProperty0.getWrapperName();
      assertTrue(propertyName2.hasNamespace());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertNotNull(propertyName2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, "non-static member class", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, javaType0, javaTypeArray0, (JavaType) mapType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, propertyName0, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertNotNull(typeDeserializer0);
      assertNotSame(typeDeserializer0, asExternalTypeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2269), propertyName0, propertyMetadata0);
      Class<RoundingMode> class0 = RoundingMode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1519));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty1.getValueDeserializer();
      assertNotNull(jsonDeserializer0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(">?16O~MjYP#");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      creatorProperty0.getType();
      assertEquals(">?16O~MjYP#", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<TextNode> class0 = TextNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType1, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2191), annotationMap0, propertyMetadata0);
      creatorProperty0.getType();
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 180, resolvedRecursiveType0, propertyMetadata0);
      creatorProperty0.getType();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<NamedType> class0 = NamedType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2840));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 3988, placeholderForType0, propertyMetadata0);
      JavaType javaType0 = creatorProperty0.getType();
      assertFalse(javaType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(9);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getObjectIdInfo();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, typeBindings0, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getObjectIdInfo();
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      PropertyName propertyName1 = propertyName0.withSimpleName("*-D6]");
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, "*-D6]", true, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, javaType0, propertyName1, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 733, (Object) null, propertyMetadata0);
      String string0 = creatorProperty0.getName();
      assertEquals("*-D6]", string0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[2] = javaType0;
      MapType mapType0 = MapType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[2]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, "JSON", true, javaTypeArray0[4]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, propertyMetadata0, propertyMetadata0);
      creatorProperty0.getName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getManagedReferenceName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      creatorProperty0.getInjectableValueId();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, typeFactory0, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[12];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getContextAnnotation(class1);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<Annotation> class1 = Annotation.class;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, "Invalid Object Id definition for %s: cannot find property with name '%s'", false, javaType0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1114102, roundingMode0, propertyMetadata0);
      creatorProperty0.getAnnotation(class1);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1654, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.setAndReturn(propertyName0, asExternalTypeDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 980, class1, propertyMetadata0);
      try { 
        creatorProperty0.set(propertyMetadata0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[16];
      Class<RoundingMode> class1 = RoundingMode.class;
      MapType mapType0 = MapType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "d@.[u41~O0", false, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4213, valueInstantiator_Base0, propertyMetadata0);
      char[] charArray0 = new char[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 4213, (-204));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, annotationMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '@JsonUnwrapped'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4261, mapType0, propertyMetadata0);
      StringReader stringReader0 = new StringReader("");
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleValueInstantiators0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-9999), (InputStream) null, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 0, 3, false);
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaTypeArray0[0], classNameIdResolver0, "*-D6]", false, mapType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 566, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, readerBasedJsonParser0, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserialize(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.core.json.UTF8StreamJsonParser' as a subtype of [map type; class com.fasterxml.jackson.core.json.UTF8StreamJsonParser, [simple type, class com.fasterxml.jackson.core.json.UTF8StreamJsonParser] -> [simple type, class com.fasterxml.jackson.core.json.UTF8StreamJsonParser]]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 5002, (Object) null, propertyMetadata0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UTF16_BE", "UTF16_BE", 4324, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLIntegrityConstraintViolationException0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      MockIOException mockIOException0 = new MockIOException((String) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(mockIOException0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4261, mockIllegalArgumentException0, propertyMetadata0);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 23, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "JSON", "JSON");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'JSON' as a subtype of null: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[14];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      MockIOException mockIOException0 = new MockIOException("' already had index (");
      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1487, (Object) null, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "wO{%Kx^)<Ck", "wO{%Kx^)<Ck");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'wO{%Kx^)<Ck' as a subtype of null: wO{%Kx^)<Ck
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4261, mapType0, propertyMetadata0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 3127);
      try { 
        creatorProperty0._throwAsIOE(sQLTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-987), 2);
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, (Exception) null, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-21), (Object) null, propertyMetadata0);
      char[] charArray0 = new char[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("email");
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      try { 
        creatorProperty0._throwAsIOE(filteringParserDelegate0, sQLTransactionRollbackException0, roundingMode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // email
         //  at [Source: (char[])\"\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1654, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      StringReader stringReader0 = new StringReader("JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParserDelegate0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1085, (Object) null, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-379), (Object) null, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "", "Invalid delegate-creator definition for %s: value instantiator (%s) returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '' as a subtype of null: Invalid delegate-creator definition for %s: value instantiator (%s) returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1239), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[4];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON");
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, unresolvedForwardReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaTypeArray0[0]);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      char[] charArray0 = new char[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ut-aiX`O:&WgVJ^tP", "yyyy-MM-dd", 29);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(valueInstantiator_Base0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ut-aiX`O:&WgVJ^tP (through reference chain: com.fasterxml.jackson.databind.deser.ValueInstantiator$Base[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2055, (Object) null, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      MockIllegalArgumentException mockIllegalArgumentException1 = new MockIllegalArgumentException("JSON");
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException1, mockIllegalArgumentException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '@JsonUnwrapped' (expected type: [simple type, class com.fasterxml.jackson.core.json.UTF8StreamJsonParser]; actual type: `org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException`), problem: JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2055, (Object) null, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, mockIllegalArgumentException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '@JsonUnwrapped' (expected type: [simple type, class com.fasterxml.jackson.core.json.UTF8StreamJsonParser]; actual type: `org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(">?16O~MjYP#");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class));
      doReturn((JavaType) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Object object0 = creatorProperty1.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, objectMapper0);
      assertEquals(">?16O~MjYP#", creatorProperty1.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4261, jsonFactory0, propertyMetadata0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerators_StringIdGenerator0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.annotation.ObjectIdGenerators.StringIdGenerator.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
      assertNotNull(object0);
      assertEquals("@JsonUnwrapped", creatorProperty1.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, classNameIdResolver0, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, vector0, true);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1684, 2, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
      try { 
        creatorProperty0.deserializeWith(readerBasedJsonParser0, defaultDeserializationContext_Impl0, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot merge polymorphic property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(">?16O~MjYP#");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, objectMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(">?16O~MjYP#");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((JavaType) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(">?16O~MjYP#", creatorProperty1.getName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4297, jsonFactory0, propertyMetadata0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonParserSequence0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      
      Object object0 = settableBeanProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals("#temporary-name", settableBeanProperty0.getName());
      assertNotNull(object0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(">?16O~MjYP#");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class1 = Annotation.class;
      classArray0[0] = class1;
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(class1);
      assertTrue(creatorProperty0.hasViews());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class1 = Annotation.class;
      classArray0[0] = class1;
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertTrue(creatorProperty0.hasViews());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      creatorProperty0.setViews(classArray0);
      // Undeclared exception!
      try { 
        creatorProperty0.visibleInView(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ViewMatcher$Single", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1689, (Object) null, propertyMetadata0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      boolean boolean0 = objectIdReferenceProperty0.hasValueTypeDeserializer();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      boolean boolean0 = creatorProperty1.hasValueDeserializer();
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, (String) null, false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-875), vector0, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2269), propertyMetadata0, propertyMetadata0);
      creatorProperty0._propertyIndex = (-2269);
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex((-2269));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '@JsonUnwrapped' already had index (-2269), trying to assign -2269
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      Class<NamedType>[] classArray0 = (Class<NamedType>[]) Array.newInstance(Class.class, 2);
      creatorProperty0.setViews(classArray0);
      creatorProperty0.withName(propertyName0);
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[14];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), objectMapper0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("");
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      NamedType namedType0 = new NamedType(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1654, namedType0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      // Undeclared exception!
      try { 
        settableBeanProperty0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1448, annotationMap0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, (String) null);
      try { 
        creatorProperty0._throwAsIOE(unresolvedForwardReference0, deserializerFactoryConfig0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 980, class1, propertyMetadata0);
      creatorProperty0.getNullValueProvider();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getFullName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[16];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      boolean boolean0 = objectIdReferenceProperty0.isIgnorable();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4261, mapType0, propertyMetadata0);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      String string0 = objectIdReferenceProperty0.toString();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("[property '']", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 4261, jsonFactory0, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("JSON");
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1239), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "(5%Vq");
      try { 
        creatorProperty0._throwAsIOE(unresolvedForwardReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 980, class1, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[16];
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", true, javaTypeArray0[0]);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaTypeArray0[0], propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), typeBindings0, (PropertyMetadata) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.markAsIgnorable();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 9, (Object) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertNull(typeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<RoundingMode> class0 = RoundingMode.class;
      NamedType namedType0 = new NamedType(class0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(namedType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 3047, (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        creatorProperty0.getContextAnnotation(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2269), propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 882, 0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIOException0, jsonFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
