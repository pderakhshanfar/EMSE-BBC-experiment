/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 06:28:34 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.FailingDeserializer;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.time.chrono.IsoEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "y", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, (JsonParser) jsonParserDelegate0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1065, jsonParserSequence0, propertyMetadata0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParserDelegate0, (DeserializationContext) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "fD8IWNr8a`>sfoq c|", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1718), asExternalTypeDeserializer0, propertyMetadata0);
      creatorProperty0.assignIndex(15);
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex((-1718));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (15), trying to assign -1718
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, typeResolutionContext_Basic0, annotationMap0, (-3421));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3421), annotationMap0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(serializerProvider0);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, serializerProvider0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, typeResolutionContext_Basic0, annotationMap0, (-385));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3471), (Object) null, propertyMetadata0);
      JsonDeserializer<IllegalArgumentException> jsonDeserializer0 = (JsonDeserializer<IllegalArgumentException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 89, (Object) null, propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<IsoEra>[] classArray0 = (Class<IsoEra>[]) Array.newInstance(Class.class, 7);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty1._viewMatcher = viewMatcher0;
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer1 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer(jsonDeserializer1);
      assertEquals("#temporary-name", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasViews());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(78);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals(78, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("; actual type: ");
      assertEquals("; actual type: ", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 36, (Object) null, propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty1._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("JSON");
      assertTrue(settableBeanProperty0.hasViews());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("JSON", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) arrayType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, referenceType0, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withSimpleName("#;h~Wr7Or");
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2556, "rDlT", propertyMetadata0);
      creatorProperty0.assignIndex(2556);
      creatorProperty0.withSimpleName("d0l04V_");
      assertEquals(2556, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, arrayType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 489, typeFactory0, propertyMetadata0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      creatorProperty0.withNullProvider(jsonDeserializer0);
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 69, propertyName0, propertyMetadata0);
      creatorProperty0.assignIndex(69);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(69, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "Qt", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3101, referenceType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withNullProvider((NullValueProvider) null);
      assertEquals("#temporary-name", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 270, propertyName0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, arrayType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 489, typeFactory0, propertyMetadata0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      creatorProperty0.setViews(classArray0);
      creatorProperty0.withName((PropertyName) null);
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, ",-~-4(I}0pDwxwhN@Tp", propertyMetadata0);
      JsonDeserializer<SimpleObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<SimpleObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName((PropertyName) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, ",-~-4(I}0pDwxwhN@Tp", propertyMetadata0);
      creatorProperty0.assignIndex(78);
      creatorProperty0.withName((PropertyName) null);
      assertEquals(78, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "fD8IWNr8a`>sfoq c|", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 91, (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      creatorProperty0.isIgnorable();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2556, "", propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, arrayType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1605, asExternalTypeDeserializer0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueDeserializer();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; act#al type: ", false, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2348, arrayType0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNotNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "S", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 23, (Object) null, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNotNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertNotNull(typeDeserializer0);
      assertNotSame(typeDeserializer0, asExternalTypeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<DoubleNode> class0 = DoubleNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 15);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty1.getValueDeserializer();
      assertNotNull(jsonDeserializer0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3421), annotationMap0, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType1, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType1, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType1, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3421), annotationMap0, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, typeResolutionContext_Basic0, annotationMap0, (-385));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3471), sequenceInputStream0, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(beanProperty_Bogus0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType1, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType1, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType1, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3421), annotationMap0, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 764, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, " actual y*pe: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 764, propertyMetadata0, propertyMetadata0);
      creatorProperty0.assignIndex(1903);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals(1903, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "e", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      creatorProperty0.getObjectIdInfo();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "Qt", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3101, referenceType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getObjectIdInfo();
      assertEquals("#temporary-name", objectIdReferenceProperty0.getName());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 34, mockIllegalArgumentException0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      NullValueProvider nullValueProvider0 = creatorProperty1.getNullValueProvider();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-3666), (Object) null, propertyMetadata0);
      String string0 = creatorProperty0.getName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("@JsonUnwrapped", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3421), annotationMap0, propertyMetadata0);
      creatorProperty0.getName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3410), referenceType0, propertyMetadata0);
      creatorProperty0.getMember();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      creatorProperty0.getManagedReferenceName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      Class<String> class1 = String.class;
      Class<DoubleNode> class2 = DoubleNode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "; actual type: ", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, arrayType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, arrayType0, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, typeResolutionContext_Basic0, annotationMap0, (-385));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3471), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getFullName();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; act#al type: ", false, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2348, arrayType0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getFullName();
      assertTrue(propertyName1.hasSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SettableBeanProperty.Delegating> class0 = SettableBeanProperty.Delegating.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Class<SequenceInputStream> class1 = SequenceInputStream.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, javaType0, (JavaType[]) null, (JavaType) arrayType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, classNameIdResolver0, "y", false, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, referenceType0, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, typeResolutionContext_Basic0, annotationMap0, (-385));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3471), (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getContextAnnotation(class0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, typeResolutionContext_Basic0, annotationMap0, (-3421));
      Class<Annotation> class0 = Annotation.class;
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3421), annotationMap0, propertyMetadata0);
      creatorProperty0.getAnnotation(class0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 35, propertyMetadata0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator>[] classArray0 = (Class<ObjectIdGenerators.IntSequenceGenerator>[]) Array.newInstance(Class.class, 1);
      creatorProperty0.setViews(classArray0);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      // Undeclared exception!
      try { 
        creatorProperty0.visibleInView(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ViewMatcher$Single", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, typeResolutionContext_Basic0, annotationMap0, (-385));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3471), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, arrayType0, typeResolutionContext_Basic0, annotationMap0, (-385));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3471), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 431, (Object) null, propertyMetadata0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        creatorProperty0.setAndReturn(annotationMap0, simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      Class<JsonParserDelegate> class2 = JsonParserDelegate.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, classNameIdResolver0, ")B/~2u9A+_i=_t", true, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2177), objectMapper_DefaultTypeResolverBuilder0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        creatorProperty1.set(annotationMap0, sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.set(classNameIdResolver0, "; actual type: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2556, "", propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<Module> class0 = Module.class;
      Class<UTF8StreamJsonParser> class1 = UTF8StreamJsonParser.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, 46, class1, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader(1412);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 35, propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserialize(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Object' as a subtype of [reference type, class java.lang.Object<[Ljava.lang.Object;><[array type, component type: [simple type, class java.lang.Object]]>]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 69, propertyName0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 42, 69);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 35, propertyMetadata0, propertyMetadata0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLDataException0);
      sQLDataException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLDataException0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(mockThrowable0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, mockIllegalArgumentException0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1._throwAsIOE(mockIllegalArgumentException0, creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1193), javaType0, propertyMetadata0);
      MockIOException mockIOException0 = new MockIOException("), trying to assign ");
      try { 
        creatorProperty0._throwAsIOE(mockIOException0, mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "fD8IWNr8a`>sfoq c|", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 69, propertyName0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(referenceType0, "fD8IWNr8a`>sfoq c|");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, referenceType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [reference type, class java.lang.Object<[Ljava.lang.Object;><[array type, component type: [simple type, class java.lang.Object]]>]: fD8IWNr8a`>sfoq c|
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1218), propertyName0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 51, (Object) null, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("{w<l4Cr5m9C)5");
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 65269, (Object) null, propertyMetadata0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("9o&t7", "9o&t7");
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 431, (Object) null, propertyMetadata0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.Object", "", 431);
      try { 
        creatorProperty0._throwAsIOE(sQLNonTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("; actual type: ");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParserSequence0, (Exception) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 764, classNameIdResolver0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = ShortNode.valueOf((short)1013);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIOException0, classNameIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 34, (Object) null, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "m6fw[h\"uc");
      SimpleModule simpleModule0 = new SimpleModule("JSON");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, simpleModule0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: m6fw[h\"uc
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FloatNode floatNode0 = FloatNode.valueOf(9.223372E18F);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@|;]\"QFE*p,v", "; actual type: ", (Throwable) null);
      try { 
        creatorProperty0._throwAsIOE(jsonParserDelegate0, sQLNonTransientException0, beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // @|;]\"QFE*p,v
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 764, annotationMap0, propertyMetadata0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParserDelegate0, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1322, propertyName0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("z5");
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(filteringParserDelegate0, mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 42, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      IntNode intNode0 = IntNode.valueOf((-788));
      Number number0 = intNode0.numberValue();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(number0, class0, "JSON");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.annotation.ObjectIdResolver` from number -788: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-145), (Object) null, propertyMetadata0);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, objectMapper_DefaultTypeResolverBuilder0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "", jsonLocation0, readableObjectId0);
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, unresolvedForwardReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual typ: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      SQLDataException sQLDataException0 = new SQLDataException();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(mockThrowable0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, mockIllegalArgumentException0, propertyMetadata0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: [simple type, class java.lang.Object]; actual type: [null]), problem: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, mockIllegalArgumentException0, propertyMetadata0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: [simple type, class java.lang.Object]; actual type: `com.fasterxml.jackson.databind.deser.CreatorProperty`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 724, javaType0, propertyMetadata0);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.ReaderBasedJsonParser.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 753, javaType0, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayList0, false);
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(readerBasedJsonParser0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.ReaderBasedJsonParser.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
      assertNotNull(object0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "!PQ_)L(=/hDyU6", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1312), javaType0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 59, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeWith(readerBasedJsonParser0, defaultDeserializationContext_Impl0, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot merge polymorphic property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 753, javaType0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 36, (Object) null, propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 753, javaType0, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayList0, false);
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(readerBasedJsonParser0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertTrue(creatorProperty1.hasValueDeserializer());
      
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object object0 = creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
      assertNotNull(object0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "PROPAGATE_TRANSIENT_MARKER", true, javaType0, jsonTypeInfo_As0);
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 50, vector0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 753, javaType0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.FailingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "S", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 23, (Object) null, propertyMetadata0);
      Class<SimpleObjectIdResolver>[] classArray0 = (Class<SimpleObjectIdResolver>[]) Array.newInstance(Class.class, 8);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 35, propertyMetadata0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator>[] classArray0 = (Class<ObjectIdGenerators.IntSequenceGenerator>[]) Array.newInstance(Class.class, 1);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      classArray0[0] = class0;
      creatorProperty0.setViews(classArray0);
      Class<DoubleNode> class1 = DoubleNode.class;
      boolean boolean0 = creatorProperty0.visibleInView(class1);
      assertTrue(creatorProperty0.hasViews());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      Version version0 = Version.unknownVersion();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, version0, propertyMetadata0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "fD8IWNr8a`>sfoq c|", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1756), (Object) null, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 69, typeFactory0, propertyMetadata0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      boolean boolean0 = creatorProperty1.hasValueDeserializer();
      assertTrue(boolean0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 764, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex((-4076));
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (-4076), trying to assign -1
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 35, typeFactory0, propertyMetadata0);
      Class<FilteringParserDelegate>[] classArray0 = (Class<FilteringParserDelegate>[]) Array.newInstance(Class.class, 5);
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(classArray0[0]);
      assertTrue(creatorProperty0.hasViews());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "", false, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, arrayType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1605, asExternalTypeDeserializer0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      assertSame(settableBeanProperty0, creatorProperty0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, referenceType0, typeResolutionContext_Basic0, annotationMap0, (-3421));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, referenceType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, annotatedParameter0, (-3421), annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withSimpleName(" (no error message provided)");
      assertEquals(" (no error message provided)", settableBeanProperty1.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNotSame(settableBeanProperty1, settableBeanProperty0);
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1336, propertyName0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.valueOf(false);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "b", jsonLocation0, (ReadableObjectId) null);
      try { 
        creatorProperty0._throwAsIOE(unresolvedForwardReference0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 34, mockIllegalArgumentException0, propertyMetadata0);
      FailingDeserializer failingDeserializer0 = (FailingDeserializer)creatorProperty0.getNullValueProvider();
      assertFalse(failingDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 454, (Object) null, propertyMetadata0);
      PropertyName propertyName0 = creatorProperty0.getFullName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertNotNull(propertyName0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 51, javaType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertFalse(creatorProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      PropertyName propertyName0 = creatorProperty0.getWrapperName();
      assertNull(propertyName0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, (TypeIdResolver) null, "; actual type: ", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3101, "Qt", propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      String string0 = objectIdReferenceProperty0.toString();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertEquals("[property '#temporary-name']", string0);
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "S", true, arrayType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 23, (Object) null, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("CcOW$bA}f");
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-180), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "W");
      try { 
        creatorProperty0._throwAsIOE(unresolvedForwardReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(referenceType0, classNameIdResolver0, "; actual type: ", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 457, (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "nX^", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3101, referenceType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.markAsIgnorable();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      IsoEra isoEra0 = IsoEra.BCE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-391), isoEra0, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertNull(typeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      SimpleModule simpleModule0 = new SimpleModule();
      objectMapper0.readerForUpdating(simpleModule0);
      //  // Unstable assertion: assertEquals("SimpleModule-172", simpleModule0.getModuleName());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(arrayType0, classNameIdResolver0, "nX^", true, referenceType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3101, referenceType0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getInjectableValueId();
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1528, propertyName0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        creatorProperty0.getContextAnnotation(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "fD8IWNr8a`>sfoq c|", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, (PropertyName) null, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1756), (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, objectIdInfo0);
      assertEquals((-1), objectIdReferenceProperty1.getPropertyIndex());
      assertTrue(objectIdReferenceProperty2.hasValueTypeDeserializer());
      assertTrue(objectIdReferenceProperty2.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 753, javaType0, propertyMetadata0);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 724, javaType0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(javaType0, "fqG B|V");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, jsonFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: fqG B|V
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }
}
