/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 03:55:35 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 2083, beanProperty_Bogus0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      JsonMappingException jsonMappingException0 = deserializationContext0.weirdNativeValueException((Object) null, class0);
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, objectMapper0);
      try { 
        creatorProperty1._throwAsIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.core.json.UTF8DataInputJsonParser` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName1 = propertyName0.withNamespace(", problem: ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1876), dataInputStream0, propertyMetadata0);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName(propertyName1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("n?e6/.J'cDI5MiJa<");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        creatorProperty1._throwAsIOE(readerBasedJsonParser0, mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "(1pP~U", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.construct("(1pP~U", "(1pP~U");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 30, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(1pP~U");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      creatorProperty0.setViews(classArray0);
      Class<ArrayType> class1 = ArrayType.class;
      creatorProperty0.visibleInView(class1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), propertyName1, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonDeserializer<Class<UTF8StreamJsonParser>> jsonDeserializer0 = (JsonDeserializer<Class<UTF8StreamJsonParser>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, (Object) null);
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      creatorProperty1.withNullProvider(dOMDeserializer_NodeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 28);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      propertyName0.toString();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 28, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      Class<IllegalArgumentException>[] classArray0 = (Class<IllegalArgumentException>[]) Array.newInstance(Class.class, 3);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      classArray0[0] = class0;
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      classArray0[1] = class1;
      Class<IllegalArgumentException> class2 = IllegalArgumentException.class;
      classArray0[2] = class2;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.hasViews();
      creatorProperty0.getManagedReferenceName();
      creatorProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "8{GnIP'7-@H8V8", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 242, propertyMetadata0, propertyMetadata1);
      creatorProperty0.assignIndex(2541);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.assignIndex(2063);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at leaDt one Creator exi;ts): %s", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2829);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2829, placeholderForType0, propertyMetadata0);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      creatorProperty2.withSimpleName("Property '");
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      JsonNode jsonNode0 = bigIntegerNode0.path(2829);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(jsonNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty2.deserialize(jsonParser0, deserializationContext0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      placeholderForType0.isReferenceType();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, annotationMap0, 28);
      Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 28, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge(annotationMap0, annotationMap0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MissingNode> jsonDeserializer1 = (JsonDeserializer<MissingNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty1.assignIndex(66);
      creatorProperty0.withSimpleName("v@&}vy'f'WzxnY8");
      creatorProperty1.getWrapperName();
      creatorProperty2.markAsIgnorable();
      creatorProperty0.getCreatorIndex();
      creatorProperty2.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "3YghkQQwm;z^s!X", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      Class<CreatorProperty> class0 = CreatorProperty.class;
      creatorProperty0.visibleInView(class0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1876);
      intArray0[1] = (-1876);
      intArray0[2] = (-1876);
      asWrapperTypeDeserializer0.toString();
      intArray0[3] = 1369;
      intArray0[4] = (-1876);
      intArray0[5] = (-1876);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      MockIOException mockIOException0 = new MockIOException("", batchUpdateException0);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      AnnotatedParameter annotatedParameter0 = null;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-10), (Object) null, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3671, pipedReader0, objectMapper1, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      Class<MissingNode> class0 = MissingNode.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.weirdNumberException(3, class0, "");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.node.MissingNode` from number 3: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName1 = beanProperty_Bogus0.getFullName();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), propertyName1, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      NamedType namedType0 = new NamedType(class0, "");
      JsonDeserializer<NamedType> jsonDeserializer0 = (JsonDeserializer<NamedType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(namedType0, (Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.NamedType.class));
      doReturn(namedType0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      namedType0.setName("L$P0");
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, objectReader0);
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-17), propertyName0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      creatorProperty0.getValueDeserializer();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      objectReader0.treeAsTokens(arrayNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<MissingNode> class1 = MissingNode.class;
      JsonMappingException jsonMappingException0 = deserializationContext0.weirdKeyException(class1, "", "com.fasterxml.jackson.databind.deser.SettableBeanProperty");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.node.MissingNode` from String \"\": com.fasterxml.jackson.databind.deser.SettableBeanProperty
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(typeFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType1);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(missingNode0);
      arrayType0.getErasedSignature();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType1, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(arrayType0, classNameIdResolver0, "xBSD^5@/0 %eDIb|9a", false, arrayType0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("[Lcom/fasterxml/jackson/core/json/ReaderBasedJsonParser;");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), jsonParser0, propertyMetadata1);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "8{GnIP'7-@H8V8", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 242, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getFullName();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("4NO[uCG>0", "4NO[uCG>0");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "4NO[uCG>0", false, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 4201, propertyName0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor((JavaType) null);
      propertyName0.internSimpleName();
      objectMapper0.treeAsTokens(missingNode0);
      creatorProperty0.withName(propertyName0);
      creatorProperty0.getValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(missingNode0);
      arrayType1.getErasedSignature();
      objectMapper0.getDeserializationContext();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), arrayType1, propertyMetadata0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "[Lcom/fasterxml/jackson/core/json/ReaderBasedJsonParser;");
      creatorProperty0._throwAsIOE(unresolvedForwardReference0, arrayType1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.UTF8StreamJsonParser.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn("Cannot construct instance of %s (although at least one Creator exists): %s").when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, booleanNode0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      creatorProperty0.withNullProvider(jsonDeserializer1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.UTF8StreamJsonParser.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn("Cannot construct instance of %s (although at least one Creator exists): %s").when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, booleanNode0);
      creatorProperty1.getValueDeserializer();
      creatorProperty0.withName((PropertyName) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("W", "W");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "W", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1853), (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.withSimpleName("W");
      creatorProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.UTF8StreamJsonParser.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, booleanNode0);
      creatorProperty1.hasValueDeserializer();
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer1 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 772, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot construct instance of %s (although at least one Creator exists): %s");
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientConnectionException0);
      creatorProperty0.getValueDeserializer();
      sQLNonTransientConnectionException0.initCause(mockIOException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLNonTransientConnectionException0, propertyMetadata0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, pushbackInputStream0, objectReader0, byteQuadsCanonicalizer0, byteArray0, (-662), 709, true);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(uTF8StreamJsonParser0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.UTF8StreamJsonParser.class));
      doReturn(uTF8StreamJsonParser0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, booleanNode0);
      creatorProperty1.hasValueDeserializer();
      DeserializationContext deserializationContext1 = objectMapper1.getDeserializationContext();
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("Cannot construct instance of %s (although at least one Creator exists): %s").when(jsonDeserializer1).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer1, jsonDeserializer1);
      creatorProperty2.deserialize(jsonParser0, deserializationContext1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      BooleanNode booleanNode1 = jsonNodeFactory0.booleanNode(false);
      objectReader0.treeAsTokens(booleanNode1);
      objectReader0.treeAsTokens(booleanNode0);
      objectMapper1.getDeserializationContext();
      creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PropertyName propertyName0 = new PropertyName("Cannot construct instance of %s (although at least one Creator exists): %s");
      IOContext iOContext0 = new IOContext(bufferRecycler0, propertyName0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectMapper0, byteQuadsCanonicalizer1, byteArray0, 1, (byte) (-1), false);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(uTF8StreamJsonParser0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.UTF8StreamJsonParser.class));
      doReturn(uTF8StreamJsonParser0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, booleanNode0);
      creatorProperty1.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.json.UTF8StreamJsonParser.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, booleanNode0);
      creatorProperty1.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      Class<ObjectMapper.DefaultTyping> class3 = ObjectMapper.DefaultTyping.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class3, class1, class2);
      ObjectIdInfo objectIdInfo1 = annotationIntrospector1.findObjectReferenceInfo(annotatedParameter0, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo1);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.getName();
      objectIdReferenceProperty0.getObjectIdInfo();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      LongNode longNode0 = LongNode.valueOf((-983L));
      JsonParser jsonParser0 = objectReader0.treeAsTokens(longNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        creatorProperty0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(missingNode0);
      arrayType1.getErasedSignature();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), arrayType1, propertyMetadata0);
      try { 
        creatorProperty0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      LongNode longNode0 = LongNode.valueOf((-983L));
      JsonParser jsonParser0 = objectReader0.treeAsTokens(longNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, deserializationContext0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "Cannot construct instance of %s (although at least one Creator exists): %s";
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findNameForDeserialization((Annotated) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, asWrapperTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, jsonParserSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 22, (Object) null, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      creatorProperty0.visibleInView(class0);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      creatorProperty0.getValueDeserializer();
      creatorProperty0.withNullProvider((NullValueProvider) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "@P7*hl0Q972a$", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 3, propertyMetadata0, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ViewMatcher viewMatcher0 = new ViewMatcher();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      creatorProperty0.visibleInView(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      jsonFactory0.setOutputDecorator((OutputDecorator) null);
      StringReader stringReader0 = new StringReader(",#V%mQyNygr(uf");
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
      JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = (-7);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@P7*hl0Q972a$", "JSON", intArray0);
      batchUpdateException0.getNextException();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, (Exception) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Problem deserializing property '", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(defaultSerializerProvider_Impl0);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base1 = new JsonObjectFormatVisitor.Base();
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base1, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 4677, asWrapperTypeDeserializer0, propertyMetadata0);
      creatorProperty0.withSimpleName("");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withContentValueHandler(beanProperty_Bogus0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      valueInstantiator_Base0.getIncompleteParameter();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withNulls(nulls0, nulls0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapType1, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata1);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.getValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      objectMapper1.readerFor((JavaType) null);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(asWrapperTypeDeserializer0).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      doReturn(", problem: ").when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator(", problem: ");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory5 = jsonFactory4.setOutputDecorator(outputDecorator0);
      StringReader stringReader0 = new StringReader("#'=&qm");
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(stringReader0).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      jsonFactory5.setInputDecorator(inputDecorator0);
      jsonFactory2.setRootValueSeparator(", problem: ");
      JsonParser jsonParser0 = jsonFactory5.createParser("JSON");
      creatorProperty2.deserialize(jsonParser0, (DeserializationContext) null);
      creatorProperty2.hasValueDeserializer();
      creatorProperty2.getValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", false, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 456, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.hasValueTypeDeserializer();
      Integer integer0 = new Integer(456);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2), (Object) null, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1);
      JsonParser jsonParser0 = arrayNode0.traverse();
      arrayNode0.add(0L);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Cannot construct instance of %s (although at least one Creator exists): %s", "Cannot construct instance of %s (although at least one Creator exists): %s");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, sQLNonTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of %s (although at least one Creator exists): %s
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      objectMapper1.readerFor((JavaType) null);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(serializerProvider0);
      creatorProperty2.depositSchemaProperty(jsonObjectFormatVisitor_Base0, serializerProvider0);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(missingNode0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", problem: ", "Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s", (-1876));
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, sQLWarning0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // , problem: 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("Z7?:7B", "Z7?:7B");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Z7?:7B", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 786, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Z7?:7B");
      creatorProperty0.withSimpleName("Z7?:7B");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Z7?:7B");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectMapper1, charsToNameCanonicalizer1, charArray0, 1, 1, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 28);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      propertyName0.toString();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 28, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<IllegalArgumentException>[] classArray0 = (Class<IllegalArgumentException>[]) Array.newInstance(Class.class, 3);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      classArray0[0] = class0;
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      classArray0[1] = class1;
      Class<IllegalArgumentException> class2 = IllegalArgumentException.class;
      classArray0[2] = class2;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.hasViews();
      creatorProperty0.getManagedReferenceName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      objectMapper1.readerFor((JavaType) null);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.getValueDeserializer();
      Class<List> class0 = List.class;
      creatorProperty0.visibleInView(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      creatorProperty2.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withTypeHandler(propertyName0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), arrayType1, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(missingNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), propertyName0, propertyMetadata0);
      creatorProperty0.assignIndex((-1876));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      // Undeclared exception!
      try { 
        settableBeanProperty0.assignIndex((-467));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (-1876), trying to assign -467
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 786, (Object) null, propertyMetadata0);
      Class<JsonParserDelegate>[] classArray0 = (Class<JsonParserDelegate>[]) Array.newInstance(Class.class, 5);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      classArray0[0] = class0;
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      classArray0[1] = class1;
      Class<JsonParserDelegate> class2 = JsonParserDelegate.class;
      classArray0[2] = class2;
      Class<JsonParserDelegate> class3 = JsonParserDelegate.class;
      classArray0[3] = class3;
      Class<JsonParserDelegate> class4 = JsonParserDelegate.class;
      classArray0[4] = class4;
      creatorProperty0.setViews(classArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      settableBeanProperty0.withName(propertyName0);
      try { 
        settableBeanProperty0.set(creatorProperty0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "hS\"W", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), missingNode0, propertyMetadata0);
      MockIOException mockIOException0 = new MockIOException("hS\"W");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0, jsonParserSequence0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1889), object0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '#temporary-name' (expected type: null; actual type: `java.lang.String`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode.getInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = Integer.valueOf(5901);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, ", problem: ", integer0, "ef#K{9.Dkz/'dxZh%");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-122), asWrapperTypeDeserializer0, propertyMetadata0);
      creatorProperty0.visibleInView(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      creatorProperty0.withSimpleName("'jHJm9dj&PI>>wJ");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ",probem:S ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      creatorProperty0.assignIndex(2);
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex((-1876));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '#temporary-name' already had index (2), trying to assign -1876
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Reader) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      JsonParser jsonParser0 = jsonFactory3.createParser(", problem: ");
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, objectMapper_DefaultTyping0, propertyMetadata0);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.deserialize(jsonParser0, (DeserializationContext) null);
      creatorProperty2.hasViews();
      creatorProperty1.setManagedReferenceName("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot constructinstance of %s (altNough at least oneCreator exists): %s", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(defaultSerializerProvider_Impl0);
      jsonObjectFormatVisitor_Base0.setProvider(defaultSerializerProvider_Impl0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
      creatorProperty1.getWrapperName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyName0.toString();
      AnnotationMap annotationMap0 = new AnnotationMap();
      int int0 = 2809;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2809, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Reader) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      JsonParser jsonParser0 = jsonFactory3.createParser("JSON");
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "Cannot constructinstance of %s (altNough at least oneCreator exists): %s";
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot constructinstance of %s (altNough at least oneCreator exists): %s", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      int int0 = 1;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      jsonFactory2.setRootValueSeparator("Cannot constructinstance of %s (altNough at least oneCreator exists): %s");
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature1);
      JsonParser jsonParser0 = jsonFactory3.createParser("Internal error: no creator index for property '%s' (of type %s)");
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 786, (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      settableBeanProperty0.getValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyName0.toString();
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2809, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "{}");
      creatorProperty0.hasViews();
      creatorProperty0.setManagedReferenceName("");
      System.setCurrentTimeMillis(2809);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getContextAnnotation(class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 2809, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex((-2162));
      creatorProperty0.hasViews();
      creatorProperty0.setManagedReferenceName("");
      System.setCurrentTimeMillis((-2162));
      creatorProperty0.getManagedReferenceName();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("5G`ksJz:UYJcpa", "nr7?,-&Cq+");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "[property '", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      annotationMap0.toString();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 51, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(defaultSerializerProvider_Impl0);
      propertyName0.withSimpleName("[property '");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      // Undeclared exception!
      try { 
        creatorProperty1._throwAsIOE((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 786, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper3 = objectMapper2.setDefaultVisibility(jsonAutoDetect_Value0);
      JsonParser jsonParser0 = objectMapper3.treeAsTokens(missingNode0);
      try { 
        settableBeanProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      Class<Annotation> class1 = Annotation.class;
      annotationMap0.get(class1);
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class2, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1267), ",probem:S ", propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.hasViews();
      creatorProperty0.setManagedReferenceName("");
      System.setCurrentTimeMillis((-1267));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ",probem:S ", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), propertyMetadata0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.assignIndex(2);
      creatorProperty0.hasViews();
      creatorProperty0.setManagedReferenceName("^A9mk.d+%[D@Fc%*[)g");
      creatorProperty0.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", false, (JavaType) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      creatorProperty0.assignIndex((-1876));
      creatorProperty0.hasViews();
      creatorProperty0.setManagedReferenceName("");
      creatorProperty0.getMember();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      creatorProperty0.visibleInView(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("Cannot construct instance of %s (although at least one Creator exists): %s");
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      jsonFormatVisitorWrapper_Base0.expectObjectFormat((JavaType) null);
      // Undeclared exception!
      try { 
        settableBeanProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1889), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(", problem: ");
      creatorProperty0.getValueDeserializer();
      Integer integer0 = new Integer((-1003));
      propertyMetadata0.withIndex(integer0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, mockIllegalArgumentException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: null; actual type: `org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException`), problem: , problem: 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 786, (Object) null, propertyMetadata0);
      creatorProperty0.hasValueDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '6';
      charArray0[2] = '>';
      charArray0[3] = 'E';
      charArray0[4] = 'o';
      charArray0[5] = 'j';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-315), 118);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "JSON");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, missingNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode.getInstance();
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), "", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      creatorProperty0.hasValueDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+SuJ~k_W`+2^si^[dLl");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (JavaType) null, jsonToken0, "J&*)[Yv,.oA#@2 v]");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(jsonMappingException0);
      try { 
        creatorProperty3._throwAsIOE(jsonParser0, sQLIntegrityConstraintViolationException0, jsonParser_Feature0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: J&*)[Yv,.oA#@2 v]
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.assignIndex((-1876));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.withSimpleName("");
      creatorProperty1.getNullValueProvider();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      creatorProperty1.visibleInView(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(defaultSerializerProvider_Impl1);
      creatorProperty1.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) null);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      JsonParser jsonParser0 = objectReader1.treeAsTokens(missingNode0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        creatorProperty1.deserializeWith(jsonParser0, deserializationContext0, asWrapperTypeDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot merge polymorphic property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem:S ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem:S ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1898), missingNode0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      JsonDeserializer<CreatorProperty> jsonDeserializer0 = (JsonDeserializer<CreatorProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdReferenceProperty objectIdReferenceProperty2 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, propertyName0);
      objectIdReferenceProperty2.getCreatorIndex();
      ObjectIdReferenceProperty objectIdReferenceProperty3 = new ObjectIdReferenceProperty(objectIdReferenceProperty1, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty4 = new ObjectIdReferenceProperty(objectIdReferenceProperty3, propertyName0);
      objectIdReferenceProperty4.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<JsonParserSequence> class2 = JsonParserSequence.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class0, class1);
      creatorProperty0._ignorable = true;
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      objectIdReferenceProperty0.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<JsonParserSequence> class2 = JsonParserSequence.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class0, class1);
      objectIdInfo0.toString();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      Class<Annotation> class3 = Annotation.class;
      // Undeclared exception!
      try { 
        creatorProperty0.getContextAnnotation(class3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 2, ", problem: ", propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      boolean boolean0 = new Boolean(true);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.getWrapperName();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 22, (Object) null, propertyMetadata0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      Class<JsonParserSequence> class1 = JsonParserSequence.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo((PropertyName) null, class1, class2, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty2.hasViews();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, (JsonDeserializer<?>) null, (NullValueProvider) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(", problem: ");
      try { 
        creatorProperty3._throwAsIOE(mockIllegalArgumentException0, mockIllegalArgumentException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: null; actual type: `org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException`), problem: , problem: 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<JsonParserSequence> class2 = JsonParserSequence.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class0, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      objectIdReferenceProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty0.markAsIgnorable();
      creatorProperty2._ignorable = false;
      creatorProperty2.hasViews();
      creatorProperty2.getNullValueProvider();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<PropertyName> class0 = PropertyName.class;
      AnnotationCollector.TwoAnnotations annotationCollector_TwoAnnotations0 = new AnnotationCollector.TwoAnnotations(class0, (Annotation) null, class0, (Annotation) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationCollector_TwoAnnotations0, (AnnotatedParameter) null, (-1876), objectMapper_DefaultTyping0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      missingNode0.isContainerNode();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.hasValueDeserializer();
      creatorProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName1 = propertyName0.withNamespace("' already had index (");
      PropertyName propertyName2 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, propertyName2, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      missingNode0.isContainerNode();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      JavaType javaType0 = null;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-3835), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      creatorProperty0.assignIndex((-3835));
      creatorProperty0.withSimpleName("");
      creatorProperty1.getType();
      BeanDescription beanDescription0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl1);
      boolean boolean0 = true;
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>(404);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, settableBeanProperty0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      placeholderForType0.isReferenceType();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 28);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 28, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<MissingNode> jsonDeserializer1 = (JsonDeserializer<MissingNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer1, jsonDeserializer1);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty1.assignIndex(66);
      creatorProperty0.withSimpleName("v@&}vy'f'WzxnY8");
      creatorProperty1.getWrapperName();
      creatorProperty2.markAsIgnorable();
      creatorProperty0.getCreatorIndex();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<JsonParserSequence> class2 = JsonParserSequence.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class2, class0, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.hasValueTypeDeserializer();
      creatorProperty0.getObjectIdInfo();
      creatorProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1698);
      placeholderForType0.isReferenceType();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "Internal error: no creator index for property '%s' (of type %s)", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1698);
      Boolean boolean0 = Boolean.valueOf(false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "), trying to assign ", (Integer) null, "");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1698, ", problem: ", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty0.assignIndex(1698);
      creatorProperty0.withSimpleName(">fwE9JK<C<Y`");
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      creatorProperty2.getWrapperName();
      creatorProperty0.markAsIgnorable();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      missingNode0.isContainerNode();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.getWrapperName();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 28);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 28, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.hasViews();
      settableBeanProperty0.setManagedReferenceName((String) null);
      settableBeanProperty0.withNullProvider((NullValueProvider) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("0dX", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "cz9oQ:gxuUC%n$W6O", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class2, class0);
      ObjectIdInfo objectIdInfo1 = annotationIntrospector0.findObjectReferenceInfo((Annotated) null, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo1);
      Integer integer0 = new Integer((-1876));
      objectIdReferenceProperty0.getName();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("p7q7L'sP=pdK@IFc-*", "&:OLLxtT#\"Q`&xsBDX]");
      PropertyName propertyName1 = PropertyName.construct("p7q7L'sP=pdK@IFc-*", "&:OLLxtT#\"Q`&xsBDX]");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "1O`k$", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.hasAsValue((Annotated) null);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(arrayList0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.construct((Boolean) null, "h", integer0, "");
      Integer integer1 = new Integer(1004);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withIndex(integer1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.isIgnorable();
      PropertyName propertyName2 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      creatorProperty0.getFullName();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.assignIndex(377);
      creatorProperty1.withSimpleName("");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", p|Arolem: ");
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", p|Arolem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      missingNode0.isContainerNode();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1, "v@&}vy'f'WzxnY8", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.hasValueDeserializer();
      try { 
        creatorProperty1.set((Object) null, "v@&}vy'f'WzxnY8");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      settableBeanProperty0.setManagedReferenceName("");
      Object object0 = new Object();
      try { 
        creatorProperty0.set((Object) null, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1, "v@&}vy'f'WzxnY8", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertTrue(creatorProperty2.hasValueDeserializer());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      
      creatorProperty2.withSimpleName("WO5@`7q");
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 28);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 28, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.hasViews();
      creatorProperty0.getManagedReferenceName();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", false, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty0.hasValueDeserializer();
      creatorProperty0.getManagedReferenceName();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PropertyName.construct(", problem: ");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.getName();
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty0);
      objectIdReferenceProperty0.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "A pPolem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "A pPolem: ", true, (JavaType) null);
      int int0 = (-1887);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1887), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.assignIndex((-80));
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.hasViews();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        objectMapper0.disable((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      missingNode0.isContainerNode();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.hasValueDeserializer();
      creatorProperty1.getValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PropertyName.construct("");
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.getName();
      objectIdReferenceProperty0.isIgnorable();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-12));
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", true, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, (-12));
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = new Integer(79);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, (-12), "v@&}vy'f'WzxnY8", propertyMetadata0);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getFullName();
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer1 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", prolem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", prolem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1887), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.setViews((Class<?>[]) null);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory2 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory2.findDeserializerFromAnnotation((DeserializationContext) null, (Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      PropertyName propertyName2 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName2, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, class0, propertyMetadata0);
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializationContext deserializationContext0 = null;
      ValueInstantiator.Base valueInstantiator_Base0 = null;
      try {
        valueInstantiator_Base0 = new ValueInstantiator.Base((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 28);
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 28, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.hasViews();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "com.fasterxml.jackson.core.TreeCodec", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-2488), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.findDeserializerFromAnnotation((DeserializationContext) null, (Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdInfo objectIdInfo1 = annotationIntrospector1.findObjectReferenceInfo((Annotated) null, objectIdInfo0);
      objectIdInfo0.toString();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo1);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.getName();
      objectIdReferenceProperty0.markAsIgnorable();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("0dX", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1889), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.withSimpleName("");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1889), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      settableBeanProperty0.withValueDeserializer((JsonDeserializer<?>) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1, "v@&}vy'f'WzxnY8", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.getMember();
      creatorProperty2.withSimpleName("WO5@`7q");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", true, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = new Integer(79);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1, "v@&}vy'f'WzxnY8", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.getFullName();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      missingNode0.isContainerNode();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.getFullName();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(28);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 28);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 28, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      settableBeanProperty0.hasViews();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      AnnotatedParameter annotatedParameter0 = null;
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1889), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        creatorProperty0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty2.hasViews();
      creatorProperty2.setManagedReferenceName(", problem: ");
      try { 
        settableBeanProperty0.setAndReturn((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      PropertyName.construct("com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating", "com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      missingNode0.isContainerNode();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.hasValueDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.writerWithDefaultPrettyPrinter();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory3.createParser((char[]) null, (-11), 0);
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_UpperCamelCaseStrategy0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      try { 
        creatorProperty1.deserializeSetAndReturn(jsonParser0, deserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@}v''WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(80);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1, "v@}v''WzxnY8", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty0.hasValueDeserializer();
      creatorProperty1.toString();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      try { 
        creatorProperty0.setAndReturn(objectIdGenerators_IntSequenceGenerator0, "v@}v''WzxnY8");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Cannot construct instance of %s (although at least one Creator exists): %s", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      creatorProperty0.visibleInView(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withSimpleName("Cannot construct instance of %s (although at least one Creator exists): %s");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot construct instance of %s (although at least one Creator exists): %s", "IGNORE_UNDEFINED", 0);
      try { 
        creatorProperty1._throwAsIOE(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of %s (although at least one Creator exists): %s
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.assignIndex(1400);
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withSimpleName("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      try { 
        creatorProperty1._throwAsIOE(sQLNonTransientConnectionException0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1, "v@&}vy'f'WzxnY8", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty0.hasValueDeserializer();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("IdCRC@", "z^|({");
      try { 
        creatorProperty0._throwAsIOE(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IdCRC@
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1889), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(", problem: ");
      creatorProperty0.getValueDeserializer();
      Integer integer0 = new Integer((-1003));
      propertyMetadata0.withIndex(integer0);
      missingNode0.canConvertToLong();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.assignIndex((-80));
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.findDeserializerFromAnnotation((DeserializationContext) null, (Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1, "v@&}vy'f'WzxnY8", propertyMetadata0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdInfo objectIdInfo1 = annotationIntrospector1.findObjectReferenceInfo((Annotated) null, objectIdInfo0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo1);
      objectIdReferenceProperty0.getCreatorIndex();
      objectIdReferenceProperty0.getName();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(66);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "zq");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 1, "v@&}vy'f'WzxnY8", propertyMetadata0);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      missingNode0.iterator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.getPropertyIndex();
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.findDeserializerFromAnnotation((DeserializationContext) null, (Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Integer integer0 = new Integer(0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), integer0, propertyMetadata0);
      Class<ObjectIdGenerators.IntSequenceGenerator>[] classArray0 = (Class<ObjectIdGenerators.IntSequenceGenerator>[]) Array.newInstance(Class.class, 3);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      classArray0[0] = class0;
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      classArray0[1] = class1;
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      classArray0[2] = class2;
      creatorProperty0.setViews(classArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.findDeserializerFromAnnotation((DeserializationContext) null, (Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      assertNotNull(propertyName0);
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      assertNotNull(placeholderForType0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "v@&}vy'f'WzxnY8", false, placeholderForType0);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("v@&}vy'f'WzxnY8", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      assertNull(annotationMap0);
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, placeholderForType0, (TypeResolutionContext) null, (AnnotationMap) null, 1);
      assertNotNull(annotatedParameter0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(1, annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(2691);
      assertNotNull(integer0);
      assertEquals(2691, (int)integer0);
      
      Integer integer1 = new Integer(66);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(66, (int)integer1);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "v@&}vy'f'WzxnY8", integer1, "zq");
      assertNotNull(propertyMetadata0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(propertyMetadata0.hasIndex());
      assertEquals("v@&}vy'f'WzxnY8", propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("zq", propertyMetadata0.getDefaultValue());
      assertEquals(66, (int)propertyMetadata0.getIndex());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.isRequired());
      
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotNull(propertyMetadata1);
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, (-1), integer1, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("v@&}vy'f'WzxnY8", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(1, annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("v@&}vy'f'WzxnY8", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(1, annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertEquals("", creatorProperty1.getName());
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      assertNotNull(creatorProperty2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("v@&}vy'f'WzxnY8", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(1, annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getCreatorIndex());
      assertEquals("", creatorProperty1.getName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals("", creatorProperty2.getName());
      assertFalse(creatorProperty2.isIgnorable());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isRequired());
      
      boolean boolean1 = creatorProperty0.hasValueDeserializer();
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("v@&}vy'f'WzxnY8", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(1, annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      assertNotNull(propertyName0);
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      assertNotNull(asWrapperTypeDeserializer0);
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("", creatorProperty0.getName());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1876), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals("", creatorProperty1.getName());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotNull(settableBeanProperty0);
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.toString());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1876), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals("", creatorProperty1.getName());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals((-1876), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      assertNotNull(propertyName0);
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(", problem: ", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      assertNotNull(asWrapperTypeDeserializer0);
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(", problem: ", asWrapperTypeDeserializer0.getPropertyName());
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.getRequired());
      
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(", problem: ", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(", problem: ", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      assertNotNull(creatorProperty1);
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(", problem: ", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(", problem: ", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1876), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertNotNull(creatorProperty2);
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(", problem: ", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(", problem: ", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1876), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals((-1876), creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertEquals("", creatorProperty2.getName());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty2.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty2);
      assertNotNull(settableBeanProperty0);
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty2));
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(", problem: ", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(", problem: ", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1876), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals((-1876), creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertEquals("", creatorProperty2.getName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals((-1876), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isRequired());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.hasViews());
      
      boolean boolean0 = creatorProperty2.hasViews();
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(", problem: ", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(", problem: ", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1876), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals((-1876), creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasViews());
      assertNull(creatorProperty2.getManagedReferenceName());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertFalse(creatorProperty2.isIgnorable());
      assertEquals("", creatorProperty2.getName());
      assertFalse(boolean0);
      
      creatorProperty2.setManagedReferenceName(", problem: ");
      assertNotSame(creatorProperty0, creatorProperty2);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, creatorProperty2);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(creatorProperty2, settableBeanProperty0);
      assertNotSame(creatorProperty2, creatorProperty0);
      assertNotSame(creatorProperty2, creatorProperty1);
      assertFalse(creatorProperty0.equals((Object)creatorProperty2));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty2));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty0));
      assertFalse(creatorProperty2.equals((Object)creatorProperty1));
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals(", problem: ", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(", problem: ", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.toString());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1876), creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.isIgnorable());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1876), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty2.hasValueDeserializer());
      assertFalse(creatorProperty2.isVirtual());
      assertFalse(creatorProperty2.isRequired());
      assertTrue(creatorProperty2.hasValueTypeDeserializer());
      assertEquals((-1876), creatorProperty2.getCreatorIndex());
      assertFalse(creatorProperty2.hasViews());
      assertEquals((-1), creatorProperty2.getPropertyIndex());
      assertEquals(", problem: ", creatorProperty2.getManagedReferenceName());
      assertFalse(creatorProperty2.isIgnorable());
      assertEquals("", creatorProperty2.getName());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", ", problem: ");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ", problem: ", true, (JavaType) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1876), missingNode0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.findDeserializerFromAnnotation((DeserializationContext) null, (Annotated) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }
}
