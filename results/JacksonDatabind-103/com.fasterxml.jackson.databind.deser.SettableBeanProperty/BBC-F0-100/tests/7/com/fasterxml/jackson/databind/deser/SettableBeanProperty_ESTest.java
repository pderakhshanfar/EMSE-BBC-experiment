/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 03:42:06 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 23);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 23, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex(65535);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (0), trying to assign 65535
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer(2185);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("");
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 797);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JavaType javaType0 = typeFactory0.constructReferenceType(class0, simpleType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 797, class0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("ACCEPT_FLOAT_AS_INT");
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withSimpleName("");
      assertTrue(settableBeanProperty1.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("ACCEPT_FLOAT_AS_INT", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1), mockIllegalArgumentException0, propertyMetadata0);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, objectIdInfo0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 14);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 14, propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName(") as a Bean");
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      assertEquals(") as a Bean", objectIdReferenceProperty0.getName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "}HH", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 18);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 18, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("#temporary-name", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, (-15));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-15), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      JsonDeserializer<ObjectIdGenerators.StringIdGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.StringIdGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1208, (Object) null, propertyMetadata0);
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 39);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 39, propertyMetadata0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("JSON");
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals("JSON", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "TZ", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 16, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      JsonDeserializer<ClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<ClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("value instantiator");
      assertEquals("value instantiator", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, ":zhj1HjeXFLGJei8", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withSimpleName("*K$hP.@>odF");
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "line.separator", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.assignIndex(994);
      creatorProperty0.withSimpleName("line.separator");
      assertEquals(994, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2412), (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2412), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", true, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, (-6));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-6), classNameIdResolver0, propertyMetadata0);
      JsonDeserializer<ClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<ClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      assertNotNull(jsonDeserializer1);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer1);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1531), propertyMetadata0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "TZ", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 16, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty0.hasViews());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 14);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 14, propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, (-6));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-6), "", propertyMetadata0);
      JsonDeserializer<JavaType> jsonDeserializer0 = (JsonDeserializer<JavaType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer(0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      creatorProperty0.withName(propertyName0);
      assertEquals(0, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.assignIndex(34);
      creatorProperty0.withName((PropertyName) null);
      assertEquals(34, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer(2185);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.toString();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 34, class0, propertyMetadata0);
      creatorProperty0._ignorable = true;
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.isIgnorable();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, simpleType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, (AnnotationMap) null, (-3281));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, (Annotations) null, annotatedParameter0, (-2927), asArrayTypeDeserializer0, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1593), filteringParserDelegate0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 14);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 14, (Object) null, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertNotNull(propertyName1);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "line.separator", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertNotNull(propertyName1);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertNotNull(typeDeserializer0);
      assertNotSame(typeDeserializer0, asArrayTypeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2412), (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      assertNull(jsonDeserializer0);
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1208, (Object) null, propertyMetadata0);
      JavaType javaType0 = creatorProperty0.getType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("", sQLFeatureNotSupportedException0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 60000, mockIllegalArgumentException0, propertyMetadata0);
      JavaType javaType0 = creatorProperty0.getType();
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer(2185);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), annotationMap0, propertyMetadata0);
      JavaType javaType0 = creatorProperty0.getType();
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "C^7#LPQ]X1Xq", true, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(0);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.assignIndex(34);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer(2185);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getObjectIdInfo();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1994), class0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getObjectIdInfo();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      NullValueProvider nullValueProvider0 = settableBeanProperty0.getNullValueProvider();
      assertNull(nullValueProvider0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer(2185);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getNullValueProvider();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 14);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 14, (Object) null, propertyMetadata0);
      String string0 = creatorProperty0.getName();
      assertEquals("@JsonUnwrapped", string0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", false, simpleType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 91, class0, propertyMetadata0);
      creatorProperty0.getMember();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getMember();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", true, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getManagedReferenceName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "u^75L39P](1D ", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, (-3295));
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-1209));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "ud?kYLD)Y>ao'S", integer0, "Internal error: no creator index for property '%s' (of type %s)");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-3295), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      PropertyName propertyName1 = creatorProperty1.getFullName();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = PropertyName.construct("Property '", "Property '");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), propertyName0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getFullName();
      assertTrue(propertyName1.hasSimpleName());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, (AnnotationMap) null, (-925));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getFullName();
      assertSame(propertyName1, propertyName0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, ":zhj1HjeXFLGJei8", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 1, (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", true, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, (-6));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-6), classNameIdResolver0, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getAnnotation(class1);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      Boolean boolean0 = Boolean.valueOf("");
      Integer integer0 = new Integer(2185);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.setAndReturn((Object) null, "ivAu7U-.oSd\"J3!f");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      Boolean boolean0 = Boolean.valueOf("");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      try { 
        creatorProperty0.set(boolean0, classNameIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "%", true, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        creatorProperty0.getContextAnnotation(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 327, (-1));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, beanDeserializerFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot merge polymorphic property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, propertyMetadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, ")", false, mapLikeType0, jsonTypeInfo_As0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, (byte)126);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), annotationMap0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1531), propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, (-1), annotatedParameter0, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, propertyMetadata0, propertyMetadata0);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", (String) null, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      sQLDataException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLDataException0, propertyName0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 343, propertyMetadata0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 14);
      Class<JsonSerializer> class1 = JsonSerializer.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) mapLikeType0, javaTypeArray0, (JavaType) simpleType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 34, annotationMap0, propertyMetadata0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        creatorProperty0._throwAsIOE(mockIOException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "line.separator", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType0, "line.separator", "line.separator");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'line.separator' as a subtype of [simple type, class com.fasterxml.jackson.databind.SerializationFeature]: line.separator
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 16, propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) simpleType0, jsonToken0, "JSON");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: JSON
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("via method ");
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 14);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 14, propertyMetadata0, propertyMetadata0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 46);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 46, propertyMetadata0, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Integer integer0 = new Integer(46);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(integer0, class0, "' (expected type: ");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.SerializationFeature` from number 46: ' (expected type: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "TZ", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 16, (Object) null, propertyMetadata0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("' (expected type: ", "' (expected type: ", (-3203));
      try { 
        creatorProperty0._throwAsIOE(sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ' (expected type: 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1531), propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      byte[] byteArray0 = new byte[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, (Exception) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 23);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 23, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(typeResolutionContext_Basic0, class0);
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.SerializationFeature` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "u^7#LP']X14q", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, sQLTransientException0, simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 55);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 128, object0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[4];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("", sQLFeatureNotSupportedException0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 60000, mockIllegalArgumentException0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 7, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(readerBasedJsonParser0, mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2413), (Object) null, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, classNameIdResolver0, true);
      StringReader stringReader0 = new StringReader("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 86, (-16711681), true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("D!<zy*^Qiwh^H", class0, "");
      try { 
        creatorProperty0._throwAsIOE(readerBasedJsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from String \"D!<zy*^Qiwh^H\": 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(unresolvedForwardReference0);
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.deser.UnresolvedForwardReference): 
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 0].
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 39);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 39, propertyMetadata0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, annotationMap0, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, classNameIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: [map-like type; class com.fasterxml.jackson.databind.SerializationFeature, [simple type, class com.fasterxml.jackson.databind.SerializationFeature] -> [simple type, class com.fasterxml.jackson.databind.SerializationFeature]]; actual type: `com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 31, typeResolutionContext_Basic0, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("");
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapLikeType0, simpleType0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, collectionLikeType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: [map-like type; class com.fasterxml.jackson.databind.SerializationFeature, [simple type, class com.fasterxml.jackson.databind.SerializationFeature] -> [simple type, class com.fasterxml.jackson.databind.SerializationFeature]]; actual type: `com.fasterxml.jackson.databind.type.CollectionLikeType`), problem: 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.FALSE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "-", (Integer) null, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.io.InputStream.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.FALSE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "-", (Integer) null, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(pushbackInputStream0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.io.InputStream.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      Object object0 = creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 16, propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      JsonDeserializer<SerializationFeature> jsonDeserializer0 = (JsonDeserializer<SerializationFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(serializationFeature0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertTrue(creatorProperty1.hasValueDeserializer());
      
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 23);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 23, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.SerializationFeature' as a subtype of [simple type, class com.fasterxml.jackson.databind.SerializationFeature]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.FailingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "TZ", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 16, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, propertyMetadata0, propertyMetadata0);
      Class<PropertyName>[] classArray0 = (Class<PropertyName>[]) Array.newInstance(Class.class, 2);
      Class<PropertyName> class1 = PropertyName.class;
      classArray0[0] = class1;
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(class1);
      assertTrue(creatorProperty0.hasViews());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "}HH", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 18);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 18, (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertFalse(boolean0);
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 0, propertyMetadata0, propertyMetadata0);
      Class<ClassKey> class1 = ClassKey.class;
      boolean boolean0 = creatorProperty0.visibleInView(class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, (AnnotationMap) null, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, 0, classNameIdResolver0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1208, (Object) null, propertyMetadata0);
      JsonDeserializer<JsonDeserializer<CollectionLikeType>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<CollectionLikeType>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      boolean boolean0 = creatorProperty1.hasValueDeserializer();
      assertTrue(boolean0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "s++p5bg]|tLB", true, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), annotatedParameter0, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, (-15));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-15), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex((-1009));
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex(3452);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (-1009), trying to assign 3452
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1593), filteringParserDelegate0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("");
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "", false, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, mapLikeType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 1, asArrayTypeDeserializer0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2443), propertyMetadata0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectMapper0.writeValueAsString(objectIdReferenceProperty0);
      assertEquals("@JsonUnwrapped", objectIdReferenceProperty0.getName());
      assertFalse(objectIdReferenceProperty0.isIgnorable());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 34, propertyMetadata0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 34, class0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "U\"(H$>8Kif+");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_ARRAY: U\"(H$>8Kif+
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, 16);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1531), propertyMetadata0, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertNull(typeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1592), annotationMap0, propertyMetadata0);
      assertFalse(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerForUpdating(creatorProperty0);
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "C^7#LPQ]X1Xq", true, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      Class<Annotation> class1 = Annotation.class;
      creatorProperty0.getContextAnnotation(class1);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "C^7#LPQ]X1Xq", true, mapLikeType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, (Object) null, propertyMetadata0);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals((-1), int0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1592), annotationMap0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      char[] charArray0 = new char[4];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockIOException mockIOException0 = new MockIOException("JSON", sQLInvalidAuthorizationSpecException0);
      try { 
        creatorProperty0._throwAsIOE(filteringParserDelegate0, mockIOException0, jsonpCharacterEscapes0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
