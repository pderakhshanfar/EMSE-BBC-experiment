/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:11:32 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 772, objectIdGenerators_UUIDGenerator0, propertyMetadata0);
      creatorProperty0.assignIndex(772);
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex((-166));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '$/gks1^|)DLS' already had index (772), trying to assign -166
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class1, class0);
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName(") when resolving reference '");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, ") when resolving reference '", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-899), propertyName0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName(") when resolving reference '");
      assertSame(settableBeanProperty0, creatorProperty0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      TextNode textNode0 = new TextNode((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, textNode0, propertyMetadata0);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, (ObjectIdInfo) null);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueDeserializer());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", objectIdReferenceProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)79, (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "2", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-760), asExternalTypeDeserializer0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(settableBeanProperty0.hasViews());
      assertEquals("#temporary-name", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionType0, (TypeResolutionContext) null, annotationMap0, 65486);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, collectionType0, (PropertyName) null, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 127, object0, propertyMetadata0);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class1, class1, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      SettableBeanProperty settableBeanProperty0 = objectIdReferenceProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNotSame(settableBeanProperty0, objectIdReferenceProperty0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1^)DL");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1^)DL", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(65486);
      JsonDeserializer<ObjectIdGenerators.UUIDGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.UUIDGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(65486, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 284, annotationMap0, propertyMetadata0);
      creatorProperty0._ignorable = true;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("$/gks1^|)DLS");
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS", "$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, propertyMetadata0, propertyMetadata0);
      Class<PlaceholderForType>[] classArray0 = (Class<PlaceholderForType>[]) Array.newInstance(Class.class, 9);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("$/gks1^|)DLS");
      assertSame(settableBeanProperty0, creatorProperty0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 116, (Object) null, propertyMetadata0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, dOMDeserializer_NodeDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName(" (no error message provided)");
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertEquals(" (no error message provided)", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(65535);
      creatorProperty0.withSimpleName("");
      assertEquals(65535, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)79, (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1)DL");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1)DL", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, asArrayTypeDeserializer0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(dOMDeserializer_NodeDeserializer0);
      assertEquals("/gks1)DL", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasViews());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, beanProperty_Std0, propertyMetadata0);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      assertNotNull(jsonDeserializer1);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(jsonDeserializer1);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1^)DL");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1^)DL", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 4547, propertyName0, propertyMetadata0);
      creatorProperty0.assignIndex(65486);
      creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals(65486, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1828), (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-759), asExternalTypeDeserializer0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)79, (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1^)DL");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1^)DL", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, (Object) null, propertyMetadata0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("/gks1^)DL", creatorProperty1.getName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(65535);
      creatorProperty0.withName(propertyName0);
      assertEquals(65535, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 284, annotationMap0, propertyMetadata0);
      creatorProperty0._ignorable = true;
      creatorProperty0.isIgnorable();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, propertyMetadata0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(boolean0);
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("Property '");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 65486, propertyName0, propertyMetadata0);
      creatorProperty0.hasValueTypeDeserializer();
      assertEquals("Property '", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 16355, propertyName0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3084, (Object) null, propertyMetadata0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class0, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      PropertyName propertyName1 = objectIdReferenceProperty0.getWrapperName();
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertNotNull(propertyName1);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3084, (Object) null, propertyMetadata0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class0, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      PropertyName propertyName1 = objectIdReferenceProperty0.getWrapperName();
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertNotNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      PropertyName propertyName1 = PropertyName.construct("fK]%q=x>50=}L(48Q", "fK]%q=x>50=}L(48Q");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName1, class1, class1, class0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      PropertyName propertyName2 = objectIdReferenceProperty0.getWrapperName();
      assertTrue(propertyName2.hasNamespace());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertNotNull(propertyName2);
      assertEquals("$/gks1^|)DLS", objectIdReferenceProperty0.getName());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertNotNull(typeDeserializer0);
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
      assertNotSame(typeDeserializer0, asArrayTypeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 116, (Object) null, propertyMetadata0);
      DOMDeserializer.NodeDeserializer dOMDeserializer_NodeDeserializer0 = new DOMDeserializer.NodeDeserializer();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, dOMDeserializer_NodeDeserializer0, dOMDeserializer_NodeDeserializer0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty1.getValueDeserializer();
      assertNotNull(jsonDeserializer0);
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("$/gks1^|)DLS", "$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, jsonObjectFormatVisitor_Base0, propertyMetadata0);
      creatorProperty0.getType();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "[null]", propertyMetadata0);
      creatorProperty0.assignIndex(0);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1^)DL");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1^)DL", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(65486);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals(65486, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3084, (Object) null, propertyMetadata0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class0, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getObjectIdInfo();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 240, propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, (ObjectIdInfo) null);
      NullValueProvider nullValueProvider0 = objectIdReferenceProperty0.getNullValueProvider();
      assertNull(nullValueProvider0);
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", objectIdReferenceProperty0.getName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      String string0 = creatorProperty0.getName();
      assertEquals("$/gks1^|)DLS", string0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      creatorProperty0.getName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      objectIdReferenceProperty0.getMember();
      assertEquals("$/gks1^|)DLS", objectIdReferenceProperty0.getName());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      creatorProperty0.getManagedReferenceName();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 256, (Object) null, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("");
      String string0 = creatorProperty0.getManagedReferenceName();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, propertyMetadata0, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      PropertyName propertyName1 = PropertyName.construct("fK]%q=x>50=}L(48Q", "fK]%q=x>50=}L(48Q");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "[null]", propertyMetadata0);
      PropertyName propertyName2 = creatorProperty0.getFullName();
      assertEquals("fK]%q=x>50=}L(48Q", propertyName2.getSimpleName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "[null]", propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getCreatorIndex();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", objectIdReferenceProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("gks1^)DL");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "gks1^)DL", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1897), propertyName0, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("gks1^)DL", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getContextAnnotation(class0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      Class<String> class0 = String.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<Annotation> class3 = Annotation.class;
      objectIdReferenceProperty0.getAnnotation(class3);
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", objectIdReferenceProperty0.getName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      TextNode textNode0 = new TextNode((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, textNode0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4036), annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn("V!+wY^\u00038l3dQl", "V!+wY^\u00038l3dQl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.setAndReturn(propertyName0, annotationMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '$/gks1^|)DLS'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, beanProperty_Std0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 65486, 65486);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      try { 
        creatorProperty0.set(jsonParserSequence0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 11, propertyMetadata0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      // Undeclared exception!
      try { 
        settableBeanProperty0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '$/gks1^|)DLS'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("$/gks1^|)DLS", "$/gks1^|)DLS");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "o!TW", true, (JavaType) null, jsonTypeInfo_As0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      creatorProperty0.setFallbackSetter(objectIdReferenceProperty0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, objectIdReferenceProperty0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("m8EqkuV~N/EhBpO!CT");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      JavaType javaType0 = TypeFactory.unknownType();
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "$/gks1^|)DLS", false, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, javaType0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, jsonParserDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      try { 
        objectIdReferenceProperty1.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '$/gks1^|)DLS'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("@ J8$b%4^");
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.FailingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$ggks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$ggks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer((-9999));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-9999), integer0, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 46, annotationMap0, propertyMetadata0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("&", "?8)mW%o?AF&-k", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLTransientConnectionException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLSyntaxErrorException0, sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4036), (Object) null, propertyMetadata0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$gks1|)DLaS");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$gks1|)DLaS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "", "$gks1|)DLaS");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '' as a subtype of null: $gks1|)DLaS
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, (Object) null, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, "JSON");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, charsToNameCanonicalizer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_ARRAY: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-3572), asExternalTypeDeserializer0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 65486, annotationMap0, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("");
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "No _valueDeserializer assigned", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 329, asExternalTypeDeserializer0, propertyMetadata0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("u}=+fogEj");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      MockIOException mockIOException0 = new MockIOException("No _valueDeserializer assigned", sQLNonTransientException0);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "%", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 60000, asExternalTypeDeserializer0, propertyMetadata0);
      Class<Object> class0 = Object.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "%", "']");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Object` from String \"%\": ']
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, "[null]", propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[null]", "");
      try { 
        creatorProperty0._throwAsIOE(sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [null]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-3572), asExternalTypeDeserializer0, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, (Exception) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-547), (Object) null, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, propertyName0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-547), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1), 7, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6GP", "KIFL\"{t@yRlh", 116, intArray0);
      MockIOException mockIOException0 = new MockIOException("KIFL\"{t@yRlh", batchUpdateException0);
      Locale locale0 = Locale.ROOT;
      try { 
        creatorProperty0._throwAsIOE(jsonParserSequence0, mockIOException0, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName(") when resolving reference '");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, ") when resolving reference '", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-899), propertyName0, propertyMetadata0);
      DataTruncation dataTruncation0 = new DataTruncation((-598), true, true, (-598), (-899));
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, dataTruncation0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 16384, annotationMap0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "qU+", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("4");
      SQLDataException sQLDataException0 = new SQLDataException("JSON");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), (Object) null, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, propertyName0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 300, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 300, (-1), false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      MockIOException mockIOException0 = new MockIOException(sQLTransientConnectionException0);
      try { 
        creatorProperty0._throwAsIOE(jsonParserSequence0, mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1)DL");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1)DL", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65451, asArrayTypeDeserializer0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "", "M,r/BM^OOAz(E02");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '' as a subtype of null: M,r/BM^OOAz(E02
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, (Object) null, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, "JSON");
      try { 
        creatorProperty0._throwAsIOE(readerBasedJsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_ARRAY: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1^)DL");
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1^)DL", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, (Object) null, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1);
      JsonParser jsonParser0 = arrayNode0.traverse();
      MockIOException mockIOException0 = new MockIOException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/gks1^)DL", mockIOException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLFeatureNotSupportedException0);
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, batchUpdateException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      byte[] byteArray0 = new byte[8];
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte) (-78), mockIllegalArgumentException0, propertyMetadata0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: null; actual type: `java.io.ByteArrayInputStream`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("$/gks1^|)DLS");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)111, (Object) null, propertyMetadata0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: null; actual type: `java.lang.String`), problem: $/gks1^|)DLS
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)79, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.filter.FilteringParserDelegate.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      StringReader stringReader0 = new StringReader("'.VYj?");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty1.deserializeWith(jsonParserSequence0, defaultDeserializationContext_Impl0, (Object) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)79, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(filteringParserDelegate0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.filter.FilteringParserDelegate.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      StringReader stringReader0 = new StringReader("");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = creatorProperty1.deserializeWith(jsonParserSequence0, defaultDeserializationContext_Impl0, (Object) null);
      assertNotNull(object0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "3C&22gb%aM{$", false, (JavaType) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = asWrapperTypeDeserializer0.getTypeInclusion();
      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, jsonTypeInfo_As0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot merge polymorphic property '$/gks1^|)DLS'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)79, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      StringReader stringReader0 = new StringReader("'.VYj?");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParserSequence0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1443, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("@JsonUnwrapped", creatorProperty1.getName());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)79, (Object) null, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, propertyName0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 620, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3857, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(filteringParserDelegate0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertTrue(creatorProperty1.hasValueDeserializer());
      
      Object object0 = creatorProperty1.deserialize(readerBasedJsonParser0, (DeserializationContext) null);
      assertNotNull(object0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, "<s>x%Z:YN3o", true, javaType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, "<s>x%Z:YN3o", propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("<s>x%Z:YN3o");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1443, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1)DL");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1)DL", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, asArrayTypeDeserializer0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "%", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 60000, asExternalTypeDeserializer0, propertyMetadata0);
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      Class<Object> class0 = Object.class;
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertFalse(boolean0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, object0, propertyMetadata0);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertTrue(boolean0);
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (byte)79, (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, "[null]", propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1443, (Object) null, propertyMetadata0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      boolean boolean0 = creatorProperty1.hasValueDeserializer();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("@JsonUnwrapped", creatorProperty1.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, jsonObjectFormatVisitor_Base0, propertyMetadata0);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-3602), asExternalTypeDeserializer0, propertyMetadata0);
      creatorProperty0.assignIndex((-3602));
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex((-3602));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (-3602), trying to assign -3602
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 65549, annotationMap0, propertyMetadata0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(classArray0[0]);
      assertTrue(creatorProperty0.hasViews());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4036), annotationMap0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("from-double");
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals("from-double", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1864), propertyMetadata0, propertyMetadata0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 240, propertyMetadata0, propertyMetadata0);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      NullValueProvider nullValueProvider0 = objectIdReferenceProperty0.getNullValueProvider();
      assertEquals("$/gks1^|)DLS", objectIdReferenceProperty0.getName());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertNotNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks^|)DLS", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65535, (Object) null, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getFullName();
      assertSame(propertyName1, propertyName0);
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1307, propertyMetadata0, propertyMetadata0);
      Class<String> class0 = String.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class2 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class2, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      boolean boolean0 = objectIdReferenceProperty0.isIgnorable();
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertFalse(boolean0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 59959, (Object) null, propertyMetadata0);
      PropertyName propertyName0 = creatorProperty0.getWrapperName();
      assertNull(propertyName0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 772, (Object) null, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("p");
      String string0 = creatorProperty0.getManagedReferenceName();
      assertNotNull(string0);
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-3621), propertyName0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      Class<Object> class1 = Object.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, pipedInputStream0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, ".=`<m=dX", jsonLocation0, readableObjectId0);
      try { 
        creatorProperty0._throwAsIOE(unresolvedForwardReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 116, (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1307, propertyMetadata0, propertyMetadata0);
      Class<String> class0 = String.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class2 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class2, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.markAsIgnorable();
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(propertyName0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<PropertyName> class0 = PropertyName.class;
      Class<Module> class1 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 12, annotationMap0, propertyMetadata0);
      JavaType javaType0 = creatorProperty0.getType();
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertNotNull(javaType0);
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-4036), annotationMap0, propertyMetadata0);
      creatorProperty0.getValueTypeDeserializer();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("$/gks1^|)DLS");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 0, "[null]", propertyMetadata0);
      creatorProperty0.getObjectIdInfo();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("$/gks1^|)DLS", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "$/gks1^|)DLS", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3084, (Object) null, propertyMetadata0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class0, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.getInjectableValueId();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 16355, propertyName0, propertyMetadata0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        creatorProperty0.getContextAnnotation(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("", "");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-1864), propertyMetadata0, propertyMetadata0);
      Class<String> class0 = String.class;
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Class<ObjectIdGenerators.UUIDGenerator> class2 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class2, class1);
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      String string0 = objectIdReferenceProperty0.toString();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueTypeDeserializer());
      assertEquals("[property '']", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/gks1^)DL");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, (TypeIdResolver) null, "/gks1^)DL", false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 65486, (Object) null, propertyMetadata0);
      int int0 = creatorProperty0.getPropertyIndex();
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("/gks1^)DL", creatorProperty0.getName());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1443, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "JSON", "JSON");
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, objectIdGenerators_UUIDGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'JSON' as a subtype of null: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }
}
