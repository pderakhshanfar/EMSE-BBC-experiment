/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:16:44 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.FailingDeserializer;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.visibleInView(class0);
      creatorProperty0.isIgnorable();
      creatorProperty0.markAsIgnorable();
      creatorProperty0.hasViews();
      creatorProperty0.isIgnorable();
      creatorProperty0.toString();
      creatorProperty0.getMember();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 58);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      Integer integer0 = new Integer(58);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 58, integer0, propertyMetadata0);
      JsonDeserializer<PushbackInputStream> jsonDeserializer0 = (JsonDeserializer<PushbackInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.io.PushbackInputStream.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty1.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "_qq,>JAbxTrD&", "_qq,>JAbxTrD&");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, annotatedParameter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '_qq,>JAbxTrD&' as a subtype of null: _qq,>JAbxTrD&
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 58);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      Integer.valueOf(58);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 58, typeResolutionContext_Basic0, propertyMetadata0);
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      creatorProperty0.setManagedReferenceName("F09} !_>");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      creatorProperty0.getObjectIdInfo();
      creatorProperty0.getManagedReferenceName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 50);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1000);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "com.fasterxml.jackson.core.JsonParser", true, placeholderForType0, jsonTypeInfo_As0);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 50, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (JsonDeserializer<?>) null, (NullValueProvider) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        creatorProperty2.deserialize(filteringParserDelegate0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-51));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Integer integer0 = new Integer((-51));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-51), integer0, propertyMetadata0);
      JsonDeserializer<PushbackInputStream> jsonDeserializer0 = (JsonDeserializer<PushbackInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.io.PushbackInputStream.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty1.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, arrayNode0);
      System.setCurrentTimeMillis((-1926L));
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "");
      try { 
        creatorProperty1._throwAsIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1038);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "']");
      placeholderForType0.getContentType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "']");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      propertyMetadata0.withRequired((Boolean) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1038, (Object) null, propertyMetadata0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "']");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      creatorProperty0._ignorable = true;
      creatorProperty0.getCreatorIndex();
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      placeholderForType0.isTypeOrSubTypeOf(class0);
      creatorProperty0.getName();
      placeholderForType0.isThrowable();
      placeholderForType0.isTypeOrSubTypeOf(class0);
      Random.setNextRandom(1038);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      settableBeanProperty0._objectIdInfo = objectIdInfo0;
      CreatorProperty creatorProperty1 = (CreatorProperty)creatorProperty0.withName((PropertyName) null);
      creatorProperty0.getObjectIdInfo();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      LinkedHashSet<SimpleModule> linkedHashSet0 = new LinkedHashSet<SimpleModule>(1038, 1038);
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<? extends Module>) linkedHashSet0);
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectMapper1);
      PipedReader pipedReader0 = new PipedReader();
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory4.createParser((Reader) pipedReader0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLDataException sQLDataException0 = new SQLDataException("}Iw6OS\"o)Y", mockThrowable0);
      try { 
        creatorProperty1._throwAsIOE(readerBasedJsonParser0, sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //  at [Source: (PipedReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      asArrayTypeDeserializer0.forProperty(beanProperty_Bogus0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.assignIndex(0);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, (SerializerProvider) null);
      JsonDeserializer<JsonSerializer<JsonParserSequence>> jsonDeserializer0 = (JsonDeserializer<JsonSerializer<JsonParserSequence>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty0.withSimpleName((String) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zY837kG-=?");
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<Annotation> class0 = Annotation.class;
      objectIdReferenceProperty0.getAnnotation(class0);
      objectIdReferenceProperty0.markAsIgnorable();
      objectIdReferenceProperty0.toString();
      creatorProperty0.isIgnorable();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      try { 
        creatorProperty0.set(arrayNode0, annotatedParameter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-787));
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-787), propertyMetadata0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotationIntrospector.nopInstance();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, simpleType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1600), simpleType0, propertyMetadata0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      JsonDeserializer<MapperFeature> jsonDeserializer0 = (JsonDeserializer<MapperFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty0, propertyName0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      MockIOException mockIOException0 = new MockIOException("G", (Throwable) null);
      try { 
        creatorProperty1._throwAsIOE(jsonParser0, mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Integer integer0 = new Integer(1000);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, integer0, propertyMetadata0);
      JsonDeserializer<PushbackInputStream> jsonDeserializer0 = (JsonDeserializer<PushbackInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.io.PushbackInputStream.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      creatorProperty1.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, jsonNodeFactory0);
      creatorProperty1.withName(propertyName0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NpR%3vyDZXbwfNG*{k|", "by9|)YS$xe}EtAdF:,");
      SQLException sQLException0 = new SQLException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(jsonParser0, batchUpdateException0, arrayNode0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      ObjectMapper objectMapper1 = objectMapper0.copy();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultMergeable(boolean0);
      objectMapper3.readerFor(class0);
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultMergeable(boolean0);
      objectMapper3.readerFor(class0);
      CreatorProperty creatorProperty0 = null;
      try {
        creatorProperty0 = new CreatorProperty((CreatorProperty) null, propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      creatorProperty0.assignIndex(807);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("");
      creatorProperty0.getType();
      creatorProperty1.getCreatorIndex();
      settableBeanProperty0.getPropertyIndex();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty1.hasValueDeserializer();
      creatorProperty1.getCreatorIndex();
      creatorProperty1.setViews((Class<?>[]) null);
      creatorProperty0.assignIndex(0);
      creatorProperty0.getWrapperName();
      creatorProperty0.getPropertyIndex();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      Integer integer0 = new Integer(1000);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, integer0, propertyMetadata0);
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) unresolvedForwardReference0);
      Throwable throwable0 = unresolvedForwardReference0.initCause(jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base", throwable0);
      // Undeclared exception!
      creatorProperty1._throwAsIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 64);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 64, classNameIdResolver0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory1.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.util.List' as a subtype of [collection type; class java.util.List, contains [simple type, class java.lang.Object]]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.traverse();
      Integer integer0 = new Integer(1000);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, integer0, propertyMetadata0);
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty1.withNullProvider((NullValueProvider) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      String string0 = "; actual type: ";
      propertyName0.withNamespace("; actual type: ");
      AnnotationMap annotationMap0 = new AnnotationMap();
      annotationMap0.annotations();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1600), "", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)35;
      byteArray0[0] = (byte)35;
      byte byte1 = (byte)92;
      byteArray0[1] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      creatorProperty1.assignIndex((-1600));
      // Undeclared exception!
      try { 
        creatorProperty1.assignIndex((-1600));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '#temporary-name' already had index (-1600), trying to assign -1600
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 70);
      SQLWarning sQLWarning0 = new SQLWarning();
      Boolean boolean0 = Boolean.valueOf((String) null);
      Integer integer0 = new Integer(70);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, (String) null);
      Integer integer1 = Integer.valueOf(1000);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer1);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDefaultValue("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1850), typeBindings0, propertyMetadata2);
      Class<InputStream> class0 = InputStream.class;
      FromStringDeserializer.findDeserializer(class0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      settableBeanProperty0.getNullValueProvider();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 990);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      jsonNodeFactory0.arrayNode();
      Integer integer0 = new Integer(990);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 990, integer0, propertyMetadata0);
      JsonDeserializer<PropertyName> jsonDeserializer0 = (JsonDeserializer<PropertyName>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty1.assignIndex(1038);
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.toString();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 21);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 21, propertyName0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 21);
      arrayNode0.traverse();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 21);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 21, (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      propertyName0.withNamespace("w58}`<V2/>L");
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      creatorProperty1.getInjectableValueId();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
      settableBeanProperty0.visibleInView(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.visibleInView(class0);
      JsonDeserializer<IllegalArgumentException> jsonDeserializer0 = (JsonDeserializer<IllegalArgumentException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      settableBeanProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean(false);
      propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, beanProperty_Bogus0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      creatorProperty0.visibleInView(class1);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasValueDeserializer();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.setViews((Class<?>[]) null);
      creatorProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      JavaType javaType0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-748));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1038, typeFactory0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      MockIOException mockIOException0 = new MockIOException();
      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1000);
      JsonParser jsonParser0 = arrayNode0.traverse();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      JsonDeserializer<ObjectIdGenerators.UUIDGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.UUIDGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerators_UUIDGenerator0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.annotation.ObjectIdGenerators.UUIDGenerator.class));
      doReturn(objectIdGenerators_UUIDGenerator0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLTimeoutException0);
      creatorProperty2.deserializeWith(jsonParser0, defaultDeserializationContext_Impl1, mockIllegalArgumentException0);
      // Undeclared exception!
      try { 
        creatorProperty2._throwAsIOE(jsonParser0, mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Integer integer0 = new Integer((-1355));
      PropertyMetadata.construct((Boolean) null, (String) null, integer0, "UTF-32LE");
      creatorProperty0.getWrapperName();
      creatorProperty1.isIgnorable();
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      creatorProperty0.getMember();
      DOMDeserializer.DocumentDeserializer dOMDeserializer_DocumentDeserializer0 = new DOMDeserializer.DocumentDeserializer();
      creatorProperty0.withNullProvider(dOMDeserializer_DocumentDeserializer0);
      creatorProperty0.assignIndex(1038);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2556), arrayNode0, propertyMetadata0);
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName2 = propertyName1.internSimpleName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonParserSequence0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.deserialize(jsonParserSequence0, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      ViewMatcher viewMatcher0 = new ViewMatcher();
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.visibleInView(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings.emptyBindings();
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      ViewMatcher.construct(classArray0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1), simpleObjectIdResolver0, propertyMetadata0);
      creatorProperty0.getMember();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyName propertyName1 = PropertyName.construct("|4W[oscTmGH", "|4W[oscTmGH");
      TypeResolutionContext.Basic typeResolutionContext_Basic1 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic1, annotationMap0, 1038);
      Object object0 = new Object();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1038, object0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName1);
      settableBeanProperty0.getFullName();
      JsonDeserializer<PushbackInputStream> jsonDeserializer1 = (JsonDeserializer<PushbackInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      SimpleModule simpleModule0 = new SimpleModule();
      Class<String> class1 = String.class;
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addDeserializer(class1, (JsonDeserializer<? extends String>) jsonDeserializer1);
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, simpleModule1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected NOT_AVAILABLE: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1173);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-757), tokenFilter0, propertyMetadata1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter1, true, false);
      Object object0 = new Object();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("; actual type: ", "fUVx,|UJ@wb#zU");
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(filteringParserDelegate0, sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      // Undeclared exception!
      try { 
        creatorProperty0.visibleInView(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ViewMatcher$Multi", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      ViewMatcher.construct(classArray0);
      POJONode pOJONode0 = new POJONode(typeResolutionContext_Basic0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(pOJONode0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl1.weirdNativeValueException(filteringParserDelegate1, class1);
      try { 
        creatorProperty0._throwAsIOE(filteringParserDelegate0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.core.filter.FilteringParserDelegate`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2556), arrayNode0, propertyMetadata0);
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName2 = propertyName1.internSimpleName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn(jsonParserSequence0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.deserialize(jsonParserSequence0, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.visibleInView(class0);
      creatorProperty0.withSimpleName("");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-21));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-21), propertyName0, propertyMetadata0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "#:1l/o1n", (-2681), sQLWarning0);
      sQLWarning0.initCause(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLWarning0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      creatorProperty1.getMember();
      creatorProperty1.getFullName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-4377));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-4377), typeFactory1, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotationIntrospector.nopInstance();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      creatorProperty0.visibleInView(class0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, deserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      CreatorProperty creatorProperty1 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, annotationMap0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotationIntrospector.nopInstance();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0);
      try { 
        creatorProperty2.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      AnnotationIntrospector.nopInstance();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, (Object) null, propertyMetadata0);
      JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.deserialize(jsonParser0, defaultDeserializationContext_Impl1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2556), arrayNode0, propertyMetadata0);
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName2 = propertyName1.internSimpleName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonParserSequence jsonParserSequence0 = mock(JsonParserSequence.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonParserSequence0).toString();
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonParserSequence0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.util.JsonParserSequence.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findWrapperName(annotatedParameter0);
      creatorProperty2.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2556), arrayNode0, propertyMetadata0);
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName2 = propertyName1.internSimpleName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonParserSequence0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.util.JsonParserSequence.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty1, propertyName2);
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty3, (JsonDeserializer<?>) null, (NullValueProvider) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1._fallbackSetter;
      creatorProperty2.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyName propertyName1 = new PropertyName("", "");
      AnnotatedParameter annotatedParameter1 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationMap0, annotatedParameter1, 0, tokenFilter0, propertyMetadata0);
      JsonDeserializer<ClassNameIdResolver> jsonDeserializer0 = (JsonDeserializer<ClassNameIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName1);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty2, objectIdInfo0);
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null, "*QRmWF{6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      String string0 = null;
      boolean boolean0 = false;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      int int0 = (-4377);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-4377));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      int int1 = (-1);
      ObjectCodec objectCodec0 = null;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), filteringParserDelegate0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2556), arrayNode0, propertyMetadata0);
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName2 = propertyName1.internSimpleName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonParserSequence0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.util.JsonParserSequence.class));
      doReturn(jsonParserSequence0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      creatorProperty0.setManagedReferenceName("{=P^yM");
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, objectMapper0);
      creatorProperty0.withSimpleName("9PPu\"L,Wa2FFuh2G");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 991);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 991, propertyMetadata0, propertyMetadata0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      creatorProperty0.getManagedReferenceName();
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2556), arrayNode0, propertyMetadata0);
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName2 = propertyName1.internSimpleName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonParserSequence0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.util.JsonParserSequence.class));
      doReturn(jsonParserSequence0).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 2986, typeResolutionContext_Basic0, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_UUIDGenerator0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2505);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(1000, 0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext0, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2556), arrayNode0, propertyMetadata0);
      PropertyName propertyName1 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyName propertyName2 = propertyName1.internSimpleName();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName2);
      JsonDeserializer<JsonParserSequence> jsonDeserializer0 = (JsonDeserializer<JsonParserSequence>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.util.JsonParserSequence.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 19);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 19, propertyName0, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      creatorProperty0.visibleInView(class0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 1000);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1000, propertyMetadata0, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.withName(propertyName0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(0);
      propertyMetadata0.withIndex(integer0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasViews();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getObjectIdInfo();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      Class<Annotation> class1 = Annotation.class;
      objectIdReferenceProperty0.getAnnotation(class1);
      objectIdReferenceProperty0.markAsIgnorable();
      try { 
        creatorProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer(0);
      propertyMetadata0.withIndex(integer0);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasViews();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getObjectIdInfo();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, (ObjectIdInfo) null);
      Class<Annotation> class1 = Annotation.class;
      objectIdReferenceProperty0.getAnnotation(class1);
      try { 
        creatorProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<Annotation> class0 = Annotation.class;
      objectIdReferenceProperty0.getAnnotation(class0);
      objectIdReferenceProperty0.markAsIgnorable();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      try { 
        creatorProperty0.set(arrayNode0, annotatedParameter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean(true);
      propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 825, beanProperty_Bogus0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      creatorProperty0.visibleInView(class1);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasValueDeserializer();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.setViews((Class<?>[]) null);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      objectIdInfo0.withAlwaysAsId(true);
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      creatorProperty2.withSimpleName("5C)lI$[");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 7);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 7, propertyName0, propertyMetadata0);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.withSimpleName("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      PropertyName.construct((String) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<FilteringParserDelegate> class1 = FilteringParserDelegate.class;
      Class<Annotation> class2 = Annotation.class;
      annotatedParameter0.getAnnotation(class2);
      AnnotationMap annotationMap1 = AnnotationMap.of(class1, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap1, annotatedParameter0, (-1355), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      creatorProperty0.withName((PropertyName) null);
      creatorProperty0.getMember();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1355), propertyMetadata0, propertyMetadata0);
      creatorProperty0.getName();
      creatorProperty0.toString();
      creatorProperty0.getFullName();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      creatorProperty1.visibleInView(class0);
      creatorProperty0.assignIndex((-2194));
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
      creatorProperty1.depositSchemaProperty(jsonObjectFormatVisitor_Base0, (SerializerProvider) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "W'k", (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, asArrayTypeDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'W'k' as a subtype of null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, typeResolutionContext_Basic0, annotationMap0, (-1034));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyMetadata0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.hasViews();
      Boolean boolean0 = new Boolean("n;c");
      // Undeclared exception!
      try { 
        creatorProperty1.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "?m;hM7", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, (Annotations) null, annotatedParameter0, (-1), annotatedParameter0, propertyMetadata0);
      SQLWarning sQLWarning0 = new SQLWarning("zz_r}tK)@bJ*EvP/r-n", "zz_r}tK)@bJ*EvP/r-n");
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      creatorProperty0.assignIndex(1000);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex((-17));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (1000), trying to assign -17
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 1, propertyMetadata0, propertyMetadata0);
      creatorProperty0.getName();
      creatorProperty0.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      creatorProperty1.visibleInView(class0);
      creatorProperty0.hasValueDeserializer();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        creatorProperty1.deserializeWith(jsonParser0, defaultDeserializationContext0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot merge polymorphic property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      AnnotatedParameter annotatedParameter1 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap1, annotatedParameter1, (-1), asArrayTypeDeserializer0, propertyMetadata0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "");
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      SimpleObjectIdResolver simpleObjectIdResolver1 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null, simpleObjectIdResolver1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 1476, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.assignIndex((-1355));
      creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 1476, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.assignIndex((-1355));
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator((InputDecorator) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory4.createParser((char[]) null, (-1355), (-1355));
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, (DeserializationContext) null);
      JsonGenerator jsonGenerator0 = tokenBuffer0.useDefaultPrettyPrinter();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      try { 
        creatorProperty1._throwAsIOE(jsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      PropertyName propertyName1 = PropertyName.USE_DEFAULT;
      creatorProperty0.toString();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 8);
      CreatorProperty creatorProperty2 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 0, annotatedParameter0, propertyMetadata0);
      creatorProperty2.getCreatorIndex();
      Class<Annotation> class0 = Annotation.class;
      creatorProperty1.getAnnotation(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      propertyName0.withNamespace((String) null);
      creatorProperty0.getValueDeserializer();
      creatorProperty1.hasValueDeserializer();
      creatorProperty1.getName();
      creatorProperty0.hasValueTypeDeserializer();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      creatorProperty1.visibleInView(class0);
      creatorProperty0.hasViews();
      Object object0 = creatorProperty0.getInjectableValueId();
      creatorProperty1.toString();
      try { 
        creatorProperty0.setAndReturn((Object) null, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      propertyName0.withNamespace("Array");
      creatorProperty0.getValueDeserializer();
      creatorProperty0.hasValueDeserializer();
      creatorProperty1.getName();
      creatorProperty1.withNullProvider((NullValueProvider) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonFactory_Feature0);
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = '\\';
      JsonParser jsonParser0 = jsonFactory5.createParser(charArray0, 69, 69);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty1.withValueDeserializer(jsonDeserializer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      propertyName0.withNamespace("Array");
      Class<Annotation> class0 = Annotation.class;
      creatorProperty0.getAnnotation(class0);
      // Undeclared exception!
      try { 
        annotationMap0.add((Annotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      PropertyName propertyName1 = propertyName0.withNamespace("Array");
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty0.getValueDeserializer();
      creatorProperty0.hasValueDeserializer();
      creatorProperty1.getName();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 1476, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.assignIndex((-1355));
      creatorProperty0.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      String string0 = null;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      int int0 = (-1355);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 817, arrayNode0, propertyMetadata1);
      JsonParser jsonParser0 = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, (Exception) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      SQLDataException sQLDataException0 = new SQLDataException("WZ:1*Qt40Zk\"ySW4'", "WZ:1*Qt40Zk\"ySW4'", (-1355));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      POJONode pOJONode0 = new POJONode("");
      JsonParser jsonParser0 = objectReader0.treeAsTokens(pOJONode0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1078), filteringParserDelegate0, propertyMetadata0);
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      creatorProperty0.markAsIgnorable();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl2.with(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(160);
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)86;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectReader1, (ByteQuadsCanonicalizer) null, byteArray0, 1, 1, false);
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext0, uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      Class<Annotation> class1 = Annotation.class;
      annotationMap0.get(class1);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, resolvedRecursiveType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1355), simpleObjectIdResolver0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<ClientInfoStatus> jsonDeserializer0 = (JsonDeserializer<ClientInfoStatus>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty2, propertyName0);
      PropertyName propertyName1 = propertyName0.withNamespace((String) null);
      CreatorProperty creatorProperty4 = new CreatorProperty(creatorProperty2, propertyName1);
      creatorProperty0.getValueDeserializer();
      creatorProperty2.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "Ir8~0Nc", (-1));
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null, sQLDataException0);
      PropertyName propertyName1 = PropertyName.construct((String) null, " at char #");
      AnnotatedParameter annotatedParameter1 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-2086));
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName1, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter1, (-1), simpleObjectIdResolver0, propertyMetadata0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, "0,}e~a+$^E>Z)FAe");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: null; actual type: `java.lang.String`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.assignIndex((-1355));
      String string0 = "(oh,S]";
      int[] intArray0 = new int[5];
      intArray0[0] = (-1355);
      intArray0[1] = 807;
      intArray0[2] = 807;
      intArray0[3] = 807;
      intArray0[4] = (-1355);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "(oh,S]", intArray0);
      MockException mockException0 = new MockException(batchUpdateException0);
      try { 
        creatorProperty0._throwAsIOE(mockException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Integer> class0 = Integer.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-85), linkedList0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, jsonDeserializer0, jsonDeserializer0);
      Class<Object> class1 = Object.class;
      creatorProperty2.visibleInView(class1);
      PropertyName propertyName1 = creatorProperty1.getWrapperName();
      CreatorProperty creatorProperty3 = new CreatorProperty(creatorProperty0, propertyName1);
      propertyName1.toString();
      creatorProperty1.getWrapperName();
      creatorProperty2.getValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      SQLDataException sQLDataException0 = new SQLDataException("WZ:1*Qt40Zk\"ySW4'", "WZ:1*Qt40Zk\"ySW4'", (-1355));
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("No _valueDeserializer assigned", sQLDataException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      POJONode pOJONode0 = new POJONode("");
      JsonParser jsonParser0 = objectReader0.treeAsTokens(pOJONode0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1078), filteringParserDelegate0, propertyMetadata0);
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, mapperFeature0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: [simple type, class java.lang.IllegalArgumentException]; actual type: `com.fasterxml.jackson.databind.MapperFeature`), problem: No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 62);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = Boolean.FALSE;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, typeResolutionContext_Basic0, propertyMetadata1);
      creatorProperty0.withSimpleName("R|L\"('");
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LinkedHashMap<String, JsonNode> linkedHashMap0 = new LinkedHashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, linkedHashMap0);
      objectNode0.putArray((String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayNode0, false);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, (PropertyName) null);
      creatorProperty1.getValueDeserializer();
      creatorProperty2.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.assignIndex(55);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, (SerializerProvider) null);
      creatorProperty0.getFullName();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      creatorProperty1.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasViews();
      creatorProperty0.getInjectableValueId();
      creatorProperty1.toString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Integer> class0 = Integer.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-2455), vector0, propertyMetadata0);
      JsonDeserializer<ArrayNode> jsonDeserializer0 = (JsonDeserializer<ArrayNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName0);
      creatorProperty2.getWrapperName();
      creatorProperty2.hasViews();
      creatorProperty1.getInjectableValueId();
      creatorProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Integer integer0 = new Integer((-1561));
      PropertyMetadata.construct((Boolean) null, "from-int", integer0, (String) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasViews();
      creatorProperty0.getInjectableValueId();
      creatorProperty0.toString();
      creatorProperty0.getObjectIdInfo();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasViews();
      creatorProperty0.getInjectableValueId();
      asArrayTypeDeserializer0.toString();
      creatorProperty0.toString();
      creatorProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AsArrayTypeDeserializer asArrayTypeDeserializer1 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "Es]m9Yn0p]x6WO", false, (JavaType) null);
      AnnotationMap annotationMap1 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean((String) null);
      propertyMetadata0.withRequired(boolean0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap1, annotatedParameter0, (-3389), simpleObjectIdResolver0, (PropertyMetadata) null);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasViews();
      creatorProperty0.getInjectableValueId();
      creatorProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      creatorProperty1.visibleInView(class0);
      creatorProperty0.assignIndex((-2194));
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
      creatorProperty1.depositSchemaProperty(jsonObjectFormatVisitor_Base0, (SerializerProvider) null);
      creatorProperty0.getFullName();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      creatorProperty0.assignIndex((-2194));
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
      creatorProperty1.depositSchemaProperty(jsonObjectFormatVisitor_Base0, (SerializerProvider) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.assignIndex(0);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, (SerializerProvider) null);
      JsonDeserializer<JsonSerializer<JsonParserSequence>> jsonDeserializer0 = (JsonDeserializer<JsonSerializer<JsonParserSequence>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Integer> class0 = Integer.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      MockException mockException0 = new MockException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("i*1c}mNtx", mockException0);
      MockIOException mockIOException0 = new MockIOException(mockException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, 68, mockIOException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "r", (-1));
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("Dg5)tH|j]##7`", sQLDataException0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1078), (Object) null, propertyMetadata0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: null; actual type: [null]), problem: Dg5)tH|j]##7`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName0);
      Class<SettableBeanProperty>[] classArray0 = (Class<SettableBeanProperty>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      SQLException sQLException0 = new SQLException("", (String) null, (-1355));
      try { 
        creatorProperty1._throwAsIOE((JsonParser) null, sQLException0, annotatedParameter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Integer> class0 = Integer.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.getWrapperName();
      creatorProperty1.getValueDeserializer();
      Integer integer0 = new Integer((-1355));
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(asArrayTypeDeserializer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 1476, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.assignIndex((-1355));
      try { 
        creatorProperty0.set(creatorProperty1, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.assignIndex(0);
      creatorProperty1.withSimpleName((String) null);
      creatorProperty1.getType();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3528));
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "qe.-Ab}0nTC3q", true, placeholderForType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-3528), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      PropertyName propertyName0 = new PropertyName((String) null, (String) null);
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 55296);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(placeholderForType0, propertyName0, objectIdGenerators_IntSequenceGenerator0, (JsonDeserializer<?>) null, creatorProperty0, simpleObjectIdResolver0);
      PropertyName propertyName1 = objectIdReader0.propertyName;
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty1, propertyName1);
      creatorProperty2.getInjectableValueId();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-4377));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1), filteringParserDelegate0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findObjectIdInfo((Annotated) null);
      creatorProperty0.setObjectIdInfo((ObjectIdInfo) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Class<SettableBeanProperty>[] classArray0 = (Class<SettableBeanProperty>[]) Array.newInstance(Class.class, 3);
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      creatorProperty1.visibleInView(class1);
      creatorProperty0.getWrapperName();
      creatorProperty1.hasValueDeserializer();
      creatorProperty1.setViews(classArray0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      jsonFormatVisitorWrapper_Base0.expectObjectFormat((JavaType) null);
      // Undeclared exception!
      try { 
        creatorProperty1.depositSchemaProperty((JsonObjectFormatVisitor) null, (SerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = new Boolean(false);
      propertyMetadata0.withRequired(boolean0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, javaType0, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, beanProperty_Bogus0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      creatorProperty0.visibleInView(class1);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasValueDeserializer();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty2 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty2.setViews((Class<?>[]) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap1 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap1, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1355), propertyMetadata0, propertyMetadata1);
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      creatorProperty0.visibleInView(class1);
      creatorProperty0.getWrapperName();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '+';
      charArray0[2] = 'S';
      charArray0[3] = '\\';
      charArray0[4] = '=';
      charArray0[5] = ' ';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, (-1), (-1));
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, creatorProperty1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName((String) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LinkedHashMap<String, JsonNode> linkedHashMap0 = new LinkedHashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, linkedHashMap0);
      ArrayNode arrayNode1 = objectNode0.putArray(")~LO530");
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayNode1, false);
      PipedReader pipedReader0 = new PipedReader(807);
      creatorProperty1.getWrapperName();
      settableBeanProperty0.getValueDeserializer();
      creatorProperty0.hasValueDeserializer();
      Class<ReaderBasedJsonParser> class1 = ReaderBasedJsonParser.class;
      settableBeanProperty0.visibleInView(class1);
      settableBeanProperty0.getValueTypeDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("\"XQ&ffNR");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z", "");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Z", (String) null, (-1355), sQLTransactionRollbackException0);
      MockIOException mockIOException0 = new MockIOException(sQLTransactionRollbackException1);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null, mockIOException0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, mockIllegalArgumentException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 1306, (Object) null, propertyMetadata0);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getWrapperName();
      MockException mockException0 = new MockException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("r", mockException0);
      MockIOException mockIOException0 = new MockIOException(mockException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "r", 1306, sQLTimeoutException0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("#}x;}3/jX4^;b#UW", sQLTimeoutException0);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0, sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLDataException0);
      classNameIdResolver0.idFromValueAndType(mockIllegalArgumentException0, class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty1.hasValueDeserializer();
      creatorProperty1.getCreatorIndex();
      creatorProperty1.setViews((Class<?>[]) null);
      creatorProperty0.getWrapperName();
      creatorProperty0.hasViews();
      creatorProperty0.getManagedReferenceName();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      String string0 = null;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      int int0 = (-1355);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      creatorProperty0.withSimpleName((String) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      LinkedHashMap<String, JsonNode> linkedHashMap0 = new LinkedHashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory1, linkedHashMap0);
      ArrayNode arrayNode1 = objectNode0.putArray(")~LO530");
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayNode1, false);
      PipedReader pipedReader0 = new PipedReader(807);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      try { 
        creatorProperty1._throwAsIOE(jsonParser0, sQLNonTransientException0, bufferRecycler0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      creatorProperty0.visibleInView(class0);
      creatorProperty0.getWrapperName();
      MockException mockException0 = new MockException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("r", mockException0);
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("#}x;}3/jX4^;b#UW", "r", 1015, mockIOException0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("#}x;}3/jX4^;b#UW", sQLTimeoutException0);
      try { 
        creatorProperty0._throwAsIOE(sQLInvalidAuthorizationSpecException0, mockIllegalArgumentException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty1.hasValueDeserializer();
      creatorProperty1.getCreatorIndex();
      creatorProperty1.setViews((Class<?>[]) null);
      creatorProperty0.assignIndex(0);
      creatorProperty0.getWrapperName();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      Class<SettableBeanProperty>[] classArray0 = (Class<SettableBeanProperty>[]) Array.newInstance(Class.class, 0);
      creatorProperty1.setViews(classArray0);
      SQLException sQLException0 = new SQLException("", (String) null, (-1355));
      try { 
        creatorProperty1._throwAsIOE((JsonParser) null, sQLException0, annotatedParameter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, 0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      Boolean boolean0 = Boolean.FALSE;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired(boolean0);
      propertyMetadata1.withDefaultValue((String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1355), asArrayTypeDeserializer0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getValueTypeDeserializer();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, (SerializerProvider) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.getWrapperName();
      creatorProperty0.getPropertyIndex();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      PropertyMetadata.construct((Boolean) null, (String) null, (Integer) null, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty0.toString();
      Class<ArrayType> class1 = ArrayType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      // Undeclared exception!
      try { 
        creatorProperty1.set(annotationMap0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.visibleInView(class0);
      creatorProperty0.getWrapperName();
      creatorProperty1.hasValueDeserializer();
      creatorProperty1.getCreatorIndex();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertNull(propertyName1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      
      creatorProperty0.setManagedReferenceName("No _valueDeserializer assigned");
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(creatorProperty0.hasViews());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("No _valueDeserializer assigned", creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals("", creatorProperty0.getName());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      TypeDeserializer typeDeserializer0 = creatorProperty1.getValueTypeDeserializer();
      assertNotNull(typeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, typeDeserializer0.getTypeInclusion());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(typeDeserializer0.equals((Object)asArrayTypeDeserializer0));
      assertNotSame(asArrayTypeDeserializer0, typeDeserializer0);
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(typeDeserializer0, asArrayTypeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      String string0 = null;
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isRequired());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      try { 
        creatorProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl1, typeFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDescription((String) null);
      assertNotNull(propertyMetadata2);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata2.getIndex());
      assertFalse(propertyMetadata2.hasIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertNull(propertyMetadata2.getDefaultValue());
      assertFalse(propertyMetadata2.isRequired());
      assertFalse(propertyMetadata2.hasDefaultValue());
      assertNull(propertyMetadata2.getContentNulls());
      assertNull(propertyMetadata2.getDescription());
      assertNull(propertyMetadata2.getRequired());
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      
      JsonDeserializer<UTF8DataInputJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8DataInputJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotNull(settableBeanProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals(807, settableBeanProperty0.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      
      String string0 = settableBeanProperty0.getName();
      assertNotNull(string0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals(807, settableBeanProperty0.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertEquals("", string0);
      assertSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(boolean0);
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertNull(propertyName1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      FailingDeserializer failingDeserializer0 = (FailingDeserializer)creatorProperty0.getNullValueProvider();
      assertNotNull(failingDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(AccessPattern.CONSTANT, failingDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.DYNAMIC, failingDeserializer0.getEmptyAccessPattern());
      assertFalse(failingDeserializer0.isCachable());
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      Class<ArrayType>[] classArray0 = (Class<ArrayType>[]) Array.newInstance(Class.class, 9);
      Class<ArrayType> class1 = ArrayType.class;
      classArray0[0] = class1;
      Class<ArrayType> class2 = ArrayType.class;
      classArray0[1] = class2;
      Class<ArrayType> class3 = ArrayType.class;
      classArray0[2] = class3;
      Class<ArrayType> class4 = ArrayType.class;
      classArray0[3] = class4;
      Class<ArrayType> class5 = ArrayType.class;
      classArray0[4] = class5;
      Class<ArrayType> class6 = ArrayType.class;
      classArray0[5] = class6;
      Class<ArrayType> class7 = ArrayType.class;
      classArray0[6] = class7;
      Class<ArrayType> class8 = ArrayType.class;
      classArray0[7] = class8;
      Class<ArrayType> class9 = ArrayType.class;
      classArray0[8] = class9;
      creatorProperty0.setViews(classArray0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.isVirtual());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertTrue(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals(9, classArray0.length);
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotNull(settableBeanProperty0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals(807, settableBeanProperty0.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      
      boolean boolean0 = creatorProperty1.visibleInView(class0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertTrue(boolean0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      
      PropertyName propertyName1 = settableBeanProperty0.getWrapperName();
      assertNull(propertyName1);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals(807, settableBeanProperty0.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      
      PropertyName propertyName2 = creatorProperty1.getWrapperName();
      assertNull(propertyName2);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      
      JavaType javaType0 = creatorProperty1.getType();
      assertNull(javaType0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = creatorProperty1.getContextAnnotation(class1);
      assertNull(annotation0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getContentNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.isRequired());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1360), objectIdGenerators_UUIDGenerator0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertNotNull(creatorProperty1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotNull(settableBeanProperty0);
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertEquals((-1360), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      Class<Integer> class2 = Integer.class;
      String string0 = classNameIdResolver0.idFromValueAndType(propertyMetadata0, class2);
      assertNotNull(string0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertEquals("java.lang.Integer", string0);
      
      boolean boolean0 = creatorProperty1.visibleInView(class1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertTrue(boolean0);
      assertSame(class0, class1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertSame(class1, class0);
      
      PropertyName propertyName1 = creatorProperty1.getWrapperName();
      assertNull(propertyName1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertSame(class0, class1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      
      boolean boolean1 = settableBeanProperty0.hasValueDeserializer();
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertEquals((-1360), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(class0, class1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      
      int int0 = settableBeanProperty0.getCreatorIndex();
      assertFalse(settableBeanProperty0.hasViews());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.isRequired());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertEquals((-1360), settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertEquals((-1360), int0);
      assertSame(class0, class1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(creatorProperty0.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      // Undeclared exception!
      try { 
        creatorProperty0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      AnnotatedParameter annotatedParameter1 = (AnnotatedParameter)creatorProperty0.getMember();
      assertNotNull(annotatedParameter1);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertEquals((-1355), annotatedParameter1.getIndex());
      assertEquals("", annotatedParameter1.getName());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertSame(annotatedParameter0, annotatedParameter1);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertSame(annotatedParameter1, annotatedParameter0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertNotNull(creatorProperty1);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertFalse(creatorProperty1.isVirtual());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertEquals(807, creatorProperty1.getCreatorIndex());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertNotNull(settableBeanProperty0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertTrue(propertyMetadata0.getRequired());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isIgnorable());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertEquals("", creatorProperty0.getName());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty0.isRequired());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals(807, settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1318));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1318), annotatedParameter0.getIndex());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      assertNotNull(propertyMetadata1);
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      assertNotNull(creatorProperty0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1318), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1318), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertTrue(boolean0);
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertNull(propertyName1);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1318), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertNotNull(settableBeanProperty0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals(0, annotationMap0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals("", annotatedParameter0.getName());
      assertEquals((-1318), annotatedParameter0.getIndex());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getValueNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getRequired());
      assertNull(propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertFalse(propertyMetadata1.isRequired());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals("", creatorProperty0.getName());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertEquals(807, creatorProperty0.getCreatorIndex());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertEquals("", settableBeanProperty0.getName());
      assertFalse(settableBeanProperty0.isVirtual());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals(807, settableBeanProperty0.getCreatorIndex());
      assertFalse(settableBeanProperty0.isIgnorable());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertSame(propertyMetadata0, propertyMetadata1);
      assertSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      assertNotNull(asArrayTypeDeserializer0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      assertNotNull(annotatedParameter0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, (-1360), objectIdGenerators_UUIDGenerator0, propertyMetadata0);
      assertNotNull(creatorProperty0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      assertNotNull(creatorProperty1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotNull(settableBeanProperty0);
      assertFalse(settableBeanProperty0.isIgnorable());
      assertFalse(settableBeanProperty0.isVirtual());
      assertEquals("", settableBeanProperty0.getName());
      assertEquals((-1360), settableBeanProperty0.getCreatorIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertNull(settableBeanProperty0.getManagedReferenceName());
      assertFalse(settableBeanProperty0.hasValueDeserializer());
      assertFalse(settableBeanProperty0.hasViews());
      assertFalse(settableBeanProperty0.isRequired());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty0));
      assertFalse(settableBeanProperty0.equals((Object)creatorProperty1));
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertNotSame(settableBeanProperty0, creatorProperty1);
      
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      boolean boolean0 = creatorProperty1.visibleInView(class1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertTrue(boolean0);
      assertSame(class0, class1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
      assertSame(class1, class0);
      
      PropertyName propertyName1 = creatorProperty1.getWrapperName();
      assertNull(propertyName1);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, asArrayTypeDeserializer0.getTypeInclusion());
      assertEquals("", asArrayTypeDeserializer0.getPropertyName());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals((-1355), annotatedParameter0.getIndex());
      assertEquals("", annotatedParameter0.getName());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(creatorProperty0.hasValueDeserializer());
      assertEquals((-1360), creatorProperty0.getCreatorIndex());
      assertEquals("", creatorProperty0.getName());
      assertEquals((-1), creatorProperty0.getPropertyIndex());
      assertFalse(creatorProperty0.isVirtual());
      assertNull(creatorProperty0.getManagedReferenceName());
      assertFalse(creatorProperty0.isRequired());
      assertFalse(creatorProperty0.isIgnorable());
      assertTrue(creatorProperty0.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.hasViews());
      assertFalse(creatorProperty1.hasValueDeserializer());
      assertEquals("", creatorProperty1.getName());
      assertFalse(creatorProperty1.isVirtual());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals((-1360), creatorProperty1.getCreatorIndex());
      assertFalse(creatorProperty1.isIgnorable());
      assertFalse(creatorProperty1.isRequired());
      assertFalse(creatorProperty1.hasViews());
      assertNull(creatorProperty1.getManagedReferenceName());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertFalse(creatorProperty0.equals((Object)creatorProperty1));
      assertFalse(creatorProperty0.equals((Object)settableBeanProperty0));
      assertFalse(creatorProperty1.equals((Object)creatorProperty0));
      assertFalse(creatorProperty1.equals((Object)settableBeanProperty0));
      assertSame(class0, class1);
      assertNotSame(creatorProperty0, creatorProperty1);
      assertNotSame(creatorProperty0, settableBeanProperty0);
      assertNotSame(creatorProperty1, creatorProperty0);
      assertNotSame(creatorProperty1, settableBeanProperty0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      propertyMetadata0.withDescription(",: o\"E8?~B6mas%");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName((PropertyName) null);
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, typeResolutionContext_Basic0, annotationMap0, (-1355));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withRequired((Boolean) null);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asArrayTypeDeserializer0, annotationMap0, annotatedParameter0, 807, arrayNode0, propertyMetadata1);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertNotSame(settableBeanProperty0, creatorProperty0);
  }
}
