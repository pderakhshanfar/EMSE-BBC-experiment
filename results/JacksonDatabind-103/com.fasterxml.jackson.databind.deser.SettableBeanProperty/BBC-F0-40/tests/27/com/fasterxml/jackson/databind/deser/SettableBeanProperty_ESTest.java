/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 08:38:49 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.FailingDeserializer;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTransactionRollbackException;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-4023), object0, propertyMetadata0);
      DoubleNode doubleNode0 = DoubleNode.valueOf((-4023));
      DoubleNode doubleNode1 = new DoubleNode(Double.POSITIVE_INFINITY);
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(doubleNode1).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.node.DoubleNode.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      DoubleNode doubleNode2 = (DoubleNode)creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, doubleNode0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNotNull(doubleNode2);
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertTrue(doubleNode2.isNaN());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 53, (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      JsonDeserializer<List<PropertyName>> jsonDeserializer0 = (JsonDeserializer<List<PropertyName>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      creatorProperty1.deserialize(jsonParser0, deserializationContext0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2919));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "AnnotationIntrospector returned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1910), propertyName0, propertyMetadata0);
      creatorProperty0.assignIndex((-1910));
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex(570);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property 'AnnotationIntrospector returned key deserializer definition of type ' already had index (-1910), trying to assign 570
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2933));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "AnnotationIntrospector returned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2209, propertyName0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2986), "@JsonUnwrapped", propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("@JsonUnwrapped");
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals("@JsonUnwrapped", settableBeanProperty0.getName());
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnotStionIntrospetorkreturned key deserializer definition oftype ");
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2927));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnotStionIntrospetorkreturned key deserializer definition oftype ", integer0, "AnotStionIntrospetorkreturned key deserializer definition oftype ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2927), boolean0, propertyMetadata0);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, objectIdInfo0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertEquals("AnotStionIntrospetorkreturned key deserializer definition oftype ", objectIdReferenceProperty0.getName());
      assertTrue(objectIdReferenceProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("");
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(95);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2927), propertyName0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("AnotationIntrospetor returned key deserializer definition of type ");
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(settableBeanProperty0, objectIdInfo0);
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", objectIdReferenceProperty0.getName());
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      Class<UTF8StreamJsonParser>[] classArray0 = (Class<UTF8StreamJsonParser>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(974);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals(974, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "]oiY`Qvwx");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3154), class0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("AnnotationIntrospector returned key deserializer definition of type ");
      assertSame(settableBeanProperty0, creatorProperty0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      Class<UTF8StreamJsonParser>[] classArray0 = (Class<UTF8StreamJsonParser>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      creatorProperty0.withSimpleName("AnnotationIntrospector returned key deserializer definition of type ");
      assertTrue(creatorProperty0.hasViews());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "AnotationIntrospetor returned key deserializer definition of type ", false, (JavaType) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1910), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("message");
      assertEquals("message", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("AnnotationIntrospector returned key deserializer definition of type ");
      assertSame(settableBeanProperty0, creatorProperty1);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(974);
      creatorProperty0.withSimpleName("");
      assertEquals(974, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-908), (Object) null, propertyMetadata0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      NullValueProvider nullValueProvider0 = creatorProperty0.getNullValueProvider();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, nullValueProvider0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider(nullValueProvider0);
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", settableBeanProperty0.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-908), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(974);
      NullValueProvider nullValueProvider0 = creatorProperty0.getNullValueProvider();
      creatorProperty0.withNullProvider(nullValueProvider0);
      assertEquals(974, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnotStion#ntrospetorkretrned key deserializer definition of type ");
      Integer integer0 = new Integer((-2933));
      Boolean boolean0 = new Boolean("AnotStion#ntrospetorkretrned key deserializer definition of type ");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "AnotStion#ntrospetorkretrned key deserializer definition of type ");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "AnotStion#ntrospetorkretrned key deserializer definition of type ", false, (JavaType) null);
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1025), annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals("AnotStion#ntrospetorkretrned key deserializer definition of type ", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2953), (Object) null, propertyMetadata0);
      ViewMatcher viewMatcher0 = ViewMatcher.construct((Class<?>[]) null);
      creatorProperty0._viewMatcher = viewMatcher0;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertTrue(settableBeanProperty0.hasViews());
      assertEquals("#temporary-name", creatorProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "com.fasterxml.jackson.annotation.JsonAutoDetect$Value", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2219), annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      JsonDeserializer<UTF8StreamJsonParser> jsonDeserializer0 = (JsonDeserializer<UTF8StreamJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      SettableBeanProperty settableBeanProperty1 = settableBeanProperty0.withName(propertyName0);
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty1.hasValueDeserializer());
      assertEquals((-1), settableBeanProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(974);
      creatorProperty0.withName(propertyName0);
      assertEquals(974, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-911), propertyMetadata0, propertyMetadata0);
      creatorProperty0.markAsIgnorable();
      creatorProperty0.isIgnorable();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      creatorProperty0.isIgnorable();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      boolean boolean1 = creatorProperty0.hasViews();
      assertFalse(boolean1);
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 34, (Object) null, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-911), propertyMetadata0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueDeserializer();
      assertFalse(boolean0);
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertNotNull(propertyName1);
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
      assertSame(propertyName1, propertyName0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-850), propertyName0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertFalse(propertyName1.hasNamespace());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.getValueTypeDeserializer();
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3346));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-11), propertyName0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty1.getValueDeserializer();
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
      assertNotNull(jsonDeserializer0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.getType();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1081), (Object) null, propertyMetadata0);
      creatorProperty0.getType();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "; actual type: ", (Integer) null, ":6ITaB\u0007Ma(k9(YO");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 1, (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex(1);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3154), class0, propertyMetadata0);
      creatorProperty0.getObjectIdInfo();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "AnnotationIntrospector returned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), class0, propertyMetadata0);
      FailingDeserializer failingDeserializer0 = (FailingDeserializer)creatorProperty0.getNullValueProvider();
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, failingDeserializer0, (NullValueProvider) null);
      FailingDeserializer failingDeserializer1 = (FailingDeserializer)creatorProperty1.getNullValueProvider();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty1.getName());
      assertNull(failingDeserializer1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "]oiY`Qvwx");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3154), class0, propertyMetadata0);
      String string0 = creatorProperty0.getName();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<String> class0 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyName propertyName1 = PropertyName.NO_NAME;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName1, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1), objectMapper_DefaultTyping0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, propertyName1);
      creatorProperty1.getName();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2986), (Object) null, propertyMetadata0);
      creatorProperty0.getMember();
      assertEquals("@JsonUnwrapped", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.getManagedReferenceName();
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = new Boolean("AnnotationIntrospector returned key deserializer definition of type ");
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "");
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-1), simpleObjectIdResolver0, propertyMetadata0);
      creatorProperty0._managedReferenceName = "AnnotationIntrospector returned key deserializer definition of type ";
      creatorProperty0.getManagedReferenceName();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2933));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "AnnotationIntrospector returned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 2209, propertyName0, propertyMetadata0);
      creatorProperty0.getInjectableValueId();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Boolean boolean0 = Boolean.TRUE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2933), boolean0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getFullName();
      assertSame(propertyName1, propertyName0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "]oiY`Qvwx");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3154), class0, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getFullName();
      assertNotSame(propertyName1, propertyName0);
      assertFalse(propertyName1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertEquals("#temporary-name", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 195, (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.getCreatorIndex();
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      creatorProperty0.getContextAnnotation(class1);
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<Annotation> class1 = Annotation.class;
      Class<String> class2 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class2, (Annotation) null);
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "]oiY`Qvwx");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), class0, propertyMetadata0);
      creatorProperty0.getAnnotation(class1);
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      Class<ReaderBasedJsonParser>[] classArray0 = (Class<ReaderBasedJsonParser>[]) Array.newInstance(Class.class, 8);
      Class<ReaderBasedJsonParser> class1 = ReaderBasedJsonParser.class;
      creatorProperty0.setViews(classArray0);
      // Undeclared exception!
      try { 
        creatorProperty0.visibleInView(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ViewMatcher$Multi", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.setAndReturn(propertyName0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'AnotationIntrospetor returned key deserializer definition of type '
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = new Boolean("AnnotationIntrospector returned key deserializer definition of type ");
      Integer integer0 = new Integer(1000);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      try { 
        creatorProperty0.set((Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'AnnotationIntrospector returned key deserializer definition of type '
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "' already had index (", integer0, "-~>dS=n{");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3154), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property 'AnnotationIntrospector returned key deserializer definition of type '
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2933), propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "oracle.jdbc.connector.OracleManagedConnectionFactory", true, resolvedRecursiveType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2219), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnotStionIntrospetorkreturned key deserializer definition of type ");
      Boolean boolean0 = new Boolean("AnotStionIntrospetorkreturned key deserializer definition of type ");
      Integer integer0 = new Integer((-2933));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnotStionIntrospetorkreturned key deserializer definition of type ", integer0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2933), boolean0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader(42);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Boolean boolean0 = new Boolean("AnotStionIntrospetorkreturned key deserializer definition of type ");
      Integer integer0 = new Integer((-2933));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnotStionIntrospetorkreturned key deserializer definition of type ", integer0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2933), boolean0, propertyMetadata0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("AnotStionIntrospetorkreturned key deserializer definition of type ", "AnotStionIntrospetorkreturned key deserializer definition of type ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "target type", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      creatorProperty0._throwAsIOE(sQLTransactionRollbackException0, integer0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      DoubleNode doubleNode0 = DoubleNode.valueOf((-2224.0375999099642));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 180, doubleNode0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null, "AnotationIntrospetor returned key deserializer definition of type ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      MockIOException mockIOException0 = new MockIOException((String) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("com.fasterxml.jackson.databind.ser.std.StdSerializer");
      try { 
        creatorProperty0._throwAsIOE(mockIOException0, mockIllegalArgumentException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1, propertyMetadata0, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, propertyName0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 56, 2, false);
      Class<DoubleNode> class0 = DoubleNode.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, "m^J");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: m^J
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnotStion#ntrospetorkretrned key deserializer definition of type ");
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 999, (Object) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "]oiY`Qvwx");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3154), class0, propertyMetadata0);
      MockIOException mockIOException0 = new MockIOException((String) null);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<Annotation> class1 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class1, "");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.annotation.Annotation` from String \"\": 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotStionIntrospetorkreturned key deserializer definition of type ", "AnotStionIntrospetorkreturned key deserializer definition of type ");
      Boolean boolean0 = new Boolean("AnotStionIntrospetorkreturned key deserializer definition of type ");
      Integer integer0 = new Integer((-2950));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnotStionIntrospetorkreturned key deserializer definition of type ", integer0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2950), boolean0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, (-2950), (-2933));
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      try { 
        creatorProperty0._throwAsIOE(unresolvedForwardReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "]oiY`Qvwx");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), class0, propertyMetadata0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" (no error message provided)", "Dmx<}Ys", (-911));
      try { 
        creatorProperty0._throwAsIOE(sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 1636, (Object) null, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      FloatNode floatNode0 = FloatNode.valueOf(1636);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, (Exception) null, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-343), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("JSON", "JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        creatorProperty0._throwAsIOE(jsonParserSequence0, mockIOException0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1183), jsonParser0, propertyMetadata0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Annotation> class0 = Annotation.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(propertyMetadata0, class0);
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.annotation.Annotation` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.PropertyMetadata`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "Oz_");
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, unresolvedForwardReference0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, jsonMappingException0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2933), propertyMetadata0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "]oiY`Qvwx");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), class0, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "com.fasterxml.jackson.annotation.JsonFormat$Value");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("]oiY`Qvwx", unresolvedForwardReference0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1183), jsonParser0, propertyMetadata0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnotStionIntrospetorkreturned key deserializer definition of type ");
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2927));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnotStionIntrospetorkreturned key deserializer definition of type ", integer0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2927), boolean0, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
      IOContext iOContext0 = new IOContext(bufferRecycler0, linkedList0, true);
      PipedReader pipedReader0 = new PipedReader(2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 23, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(readerBasedJsonParser0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      try { 
        creatorProperty0._throwAsIOE(filteringParserDelegate0, unresolvedForwardReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(974);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Oz_", integer0, "']");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("AnnotationIntrospector returned key deserializer definition of type ", "Cannot construct instance of %s (no Creators, like default construct, exist): %s", hashMap0);
      try { 
        creatorProperty0._throwAsIOE((JsonParser) null, sQLClientInfoException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AnnotationIntrospector returned key deserializer definition of type 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", linkedHashMap0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLClientInfoException0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 44, mockIllegalArgumentException0, propertyMetadata0);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, mockIllegalArgumentException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '#temporary-name' (expected type: null; actual type: `org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException`), problem: java.sql.SQLClientInfoException: 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((Throwable) null);
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '#temporary-name' (expected type: null; actual type: `com.fasterxml.jackson.databind.deser.CreatorProperty`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-4023), object0, propertyMetadata0);
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.node.DoubleNode.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserializeWith(jsonParser0, (DeserializationContext) null, (Object) null);
      assertEquals("#temporary-name", creatorProperty1.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-4023), object0, propertyMetadata0);
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1469.5415333985));
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, (DeserializationContext) null, doubleNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Integer integer0 = new Integer((-2933));
      Boolean boolean0 = new Boolean("AnotStion#ntrospetorkretrned key deserializer definition of type ");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", integer0, "AnotStion#ntrospetorkretrned key deserializer definition of type ");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "AnotStion#ntrospetorkretrned key deserializer definition of type ", false, (JavaType) null);
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2933), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot merge polymorphic property '#temporary-name'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1183), jsonParser0, propertyMetadata0);
      JsonDeserializer<ChronoLocalDate> jsonDeserializer0 = (JsonDeserializer<ChronoLocalDate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, (DeserializationContext) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("#temporary-name", creatorProperty1.getName());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
      Object object0 = new Object();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-4023), object0, propertyMetadata0);
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1469.5415333985));
      JsonDeserializer<DoubleNode> jsonDeserializer0 = (JsonDeserializer<DoubleNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(doubleNode0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertTrue(creatorProperty1.hasValueDeserializer());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object1 = creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNotNull(object1);
      assertEquals("#temporary-name", creatorProperty1.getName());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1183), jsonParser0, propertyMetadata0);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.FailingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      Class<UTF8StreamJsonParser>[] classArray0 = (Class<UTF8StreamJsonParser>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      Class<ReaderBasedJsonParser>[] classArray0 = (Class<ReaderBasedJsonParser>[]) Array.newInstance(Class.class, 8);
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(classArray0[0]);
      assertTrue(creatorProperty0.hasViews());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-850), propertyName0, propertyMetadata0);
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      boolean boolean0 = creatorProperty0.visibleInView(class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-343), (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<Annotation> class0 = Annotation.class;
      Class<String> class1 = String.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class1, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-911));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "']", integer0, "AnnotationIntrospector returned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), class0, propertyMetadata0);
      JsonDeserializer<JsonParserDelegate> jsonDeserializer0 = (JsonDeserializer<JsonParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      boolean boolean1 = creatorProperty1.hasValueDeserializer();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty1.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base(serializerProvider0);
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, serializerProvider0);
      assertEquals("AnotationIntrospetor returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnotationIntrospetor returned key deserializer definition of type ", "AnotationIntrospetor returned key deserializer definition of type ");
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), (Object) null, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      SimpleModule simpleModule0 = new SimpleModule();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-2428), simpleModule0, propertyMetadata0);
      creatorProperty0.assignIndex(56);
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex(56);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '#temporary-name' already had index (56), trying to assign 56
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      Class<UTF8StreamJsonParser>[] classArray0 = (Class<UTF8StreamJsonParser>[]) Array.newInstance(Class.class, 0);
      creatorProperty0.setViews(classArray0);
      Class<JsonParserDelegate> class1 = JsonParserDelegate.class;
      boolean boolean0 = creatorProperty0.visibleInView(class1);
      assertTrue(creatorProperty0.hasViews());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 21, annotationMap0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-911));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(placeholderForType0, classNameIdResolver0, "l,<1!Xr?_h$aY'2", true, collectionLikeType0);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asWrapperTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-911), objectIdGenerators_UUIDGenerator0, propertyMetadata0);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Integer integer0 = new Integer((-1161));
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1161), integer0, propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, (String) null, "Tvpe<x");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' as a subtype of null: Tvpe<x
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
      assertNull(propertyName1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnotStionIntrospetorkreturned key deserializer definition of type ");
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2933));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnotStionIntrospetorkreturned key deserializer definition of type ", integer0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2933), boolean0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      String string0 = objectIdReferenceProperty0.toString();
      assertEquals("[property 'AnotStionIntrospetorkreturned key deserializer definition of type ']", string0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnnotationIntrospector returned key deserializer definition of type ", integer0, "]oiY`Qvwx");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, (-3154), class0, propertyMetadata0);
      creatorProperty0.setManagedReferenceName("AnnotationIntrospector returned key deserializer definition of type ");
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2, (Object) null, propertyMetadata0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("_wKbx");
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      // Undeclared exception!
      try { 
        creatorProperty0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "com.fasterxml.jackson.annotation.JsonAutoDetect$Value", true, (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2219), annotationMap0, propertyMetadata0);
      TypeDeserializer typeDeserializer0 = creatorProperty0.getValueTypeDeserializer();
      assertNotNull(typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnotStionIntrospetorkreturned key deserializer definition of type ");
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2927));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnotStionIntrospetorkreturned key deserializer definition of type ", integer0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2927), boolean0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        objectIdReferenceProperty0.getContextAnnotation(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("AnotStionIntrospetorkreturned key deserializer definition of type ");
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2933));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "AnotStionIntrospetorkreturned key deserializer definition of type ", integer0, "AnotStionIntrospetorkreturned key deserializer definition of type ");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-2933), boolean0, propertyMetadata0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty0, objectIdInfo0);
      objectIdReferenceProperty0.markAsIgnorable();
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertEquals("AnotStionIntrospetorkreturned key deserializer definition of type ", objectIdReferenceProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("AnnotationIntrospector returned key deserializer definition of type ", "AnnotationIntrospector returned key deserializer definition of type ");
      Class<DoubleNode> class0 = DoubleNode.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-263), (Object) null, (PropertyMetadata) null);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals("AnnotationIntrospector returned key deserializer definition of type ", creatorProperty0.getName());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = TypeFactory.unknownType();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-622), javaType0, propertyMetadata0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleObjectIdResolver0, false);
      PipedReader pipedReader0 = new PipedReader(59);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-622), pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockIOException mockIOException0 = new MockIOException("Property '", (Throwable) null);
      try { 
        creatorProperty0._throwAsIOE(readerBasedJsonParser0, mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
