/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:18:15 GMT 2020
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.FailingDeserializer;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.ViewMatcher;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLWarning;
import java.time.format.FormatStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableBeanProperty_ESTest extends SettableBeanProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      PropertyName propertyName0 = new PropertyName("JSON");
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "", true, placeholderForType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<ReaderBasedJsonParser> jsonDeserializer0 = (JsonDeserializer<ReaderBasedJsonParser>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserializeWithType(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.jsontype.TypeDeserializer.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertTrue(creatorProperty1.hasValueTypeDeserializer());
      assertEquals("JSON", creatorProperty1.getName());
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), class0, (PropertyMetadata) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1._propertyIndex = 2710;
      // Undeclared exception!
      try { 
        creatorProperty1.assignIndex((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (2710), trying to assign -1
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-23));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
      ObjectIdReferenceProperty objectIdReferenceProperty0 = new ObjectIdReferenceProperty(creatorProperty1, objectIdInfo0);
      assertEquals((-1), objectIdReferenceProperty0.getPropertyIndex());
      assertTrue(objectIdReferenceProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      creatorProperty0.markAsIgnorable();
      assertFalse(creatorProperty0.isVirtual());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer((JsonDeserializer<?>) null);
      assertNotSame(settableBeanProperty0, creatorProperty0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.IntSequenceGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withValueDeserializer(jsonDeserializer0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      creatorProperty0._ignorable = true;
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("C&d4+{:].{Jn");
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("C&d4+{:].{Jn", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, ")CV2du_x:mQ", false, placeholderForType0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, placeholderForType0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName(")CV2du_x:mQ");
      assertEquals(")CV2du_x:mQ", settableBeanProperty0.getName());
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueTypeDeserializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("[creator property, name ''; inject id 'null']");
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("[creator property, name ''; inject id 'null']", settableBeanProperty0.getName());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      creatorProperty0.assignIndex(3508);
      creatorProperty0.withSimpleName("");
      assertEquals(3508, creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), placeholderForType0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider((NullValueProvider) null);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<FormatStyle> class0 = FormatStyle.class;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), class0, (PropertyMetadata) null);
      JsonDeserializer<InputStream> jsonDeserializer0 = (JsonDeserializer<InputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      creatorProperty1.withNullProvider((NullValueProvider) null);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      JsonDeserializer<IllegalArgumentException> jsonDeserializer0 = (JsonDeserializer<IllegalArgumentException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertTrue(settableBeanProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("v");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withName(propertyName0);
      assertEquals((-1), settableBeanProperty0.getPropertyIndex());
      assertEquals("v", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, formatStyle0, (PropertyMetadata) null);
      String string0 = creatorProperty0.toString();
      assertEquals("[creator property, name ''; inject id 'MEDIUM']", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      PropertyName propertyName0 = new PropertyName("9f#");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), "9f#", (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.isIgnorable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, formatStyle0, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasViews();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-4));
      Class<Integer> class0 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-4), valueInstantiator_Base0, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      PropertyName propertyName0 = creatorProperty0.getWrapperName();
      assertNull(propertyName0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = new PropertyName(":n__QD[", "%ZpT\"McaptC)g{McgE");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, (Object) null, propertyMetadata0);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertSame(propertyName1, propertyName0);
      assertNotNull(propertyName1);
      assertEquals(":n__QD[", creatorProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), formatStyle0, (PropertyMetadata) null);
      Class<Module> class0 = Module.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, coreXMLDeserializers_Std0, coreXMLDeserializers_Std0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty1.getValueDeserializer();
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
      assertNotNull(jsonDeserializer0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JavaType javaType0 = creatorProperty0.getType();
      assertFalse(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("v");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      String string0 = creatorProperty0.getName();
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      String string0 = creatorProperty0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      AnnotatedMember annotatedMember0 = creatorProperty0.getMember();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      String string0 = creatorProperty0.getManagedReferenceName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      Object object0 = creatorProperty0.getInjectableValueId();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), formatStyle0, (PropertyMetadata) null);
      Object object0 = creatorProperty0.getInjectableValueId();
      assertSame(object0, formatStyle0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Integer integer0 = new Integer(37);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 37, integer0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.getFullName();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Integer integer0 = new Integer(37);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 37, integer0, (PropertyMetadata) null);
      PropertyName propertyName0 = creatorProperty0.getFullName();
      assertEquals("", propertyName0.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), formatStyle0, (PropertyMetadata) null);
      int int0 = creatorProperty0.getCreatorIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Integer integer0 = new Integer(37);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 37, integer0, (PropertyMetadata) null);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = creatorProperty0.getAnnotation(class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      // Undeclared exception!
      try { 
        creatorProperty1.setAndReturn(referenceType0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      try { 
        creatorProperty0.setAndReturn(jsonFormatVisitorWrapper_Base0, beanDeserializerFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<NullNode> class0 = NullNode.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), formatStyle0, (PropertyMetadata) null);
      try { 
        creatorProperty0.set(formatStyle0, valueInstantiator_Base0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      // Undeclared exception!
      try { 
        creatorProperty1.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-43));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-43), (Object) null, propertyMetadata0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[7];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeSetAndReturn(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        creatorProperty1.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        creatorProperty0.deserializeAndSet(filteringParserDelegate0, defaultDeserializationContext_Impl0, tokenFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No fallback setter/field defined for creator property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, creatorProperty0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 0, 3, false);
      // Undeclared exception!
      try { 
        creatorProperty0.deserialize(uTF8StreamJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.FailingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-40));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyName propertyName0 = PropertyName.construct("K?,\"lbA\"|Ett}zcCyvf");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "K?,\"lbA\"|Ett}zcCyvf", true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (-40), 0, true);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 5579, uTF8StreamJsonParser0, propertyMetadata0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null, sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Problem deserializing property '", "Problem deserializing property '", 457, intArray0);
      MockIOException mockIOException0 = new MockIOException("Problem deserializing property '", batchUpdateException0);
      try { 
        creatorProperty0._throwAsIOE(mockIOException0, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("v");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      SQLWarning sQLWarning0 = new SQLWarning();
      try { 
        creatorProperty0._throwAsIOE(sQLWarning0, sQLWarning0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (-1));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) sQLInvalidAuthorizationSpecException0);
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", "JSON", 15);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("JSON", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIllegalArgumentException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), formatStyle0, (PropertyMetadata) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockIOException mockIOException0 = new MockIOException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(mockIOException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockIllegalArgumentException0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 2, (DataInput) null, (ObjectCodec) null, byteQuadsCanonicalizer0, 1);
      try { 
        creatorProperty0._throwAsIOE(uTF8DataInputJsonParser0, mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-27));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-27), (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(placeholderForType0, "LwpKTEN", "com.fasterxml.jackson.core.io.CharacterEscapes");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'LwpKTEN' as a subtype of $-26: com.fasterxml.jackson.core.io.CharacterEscapes
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(".'", "p|,^roc~6(T`");
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // .'
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      PropertyName propertyName0 = new PropertyName("9f#");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), "9f#", (PropertyMetadata) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("9f#");
      long[] longArray0 = new long[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1152), longArray0, sQLInvalidAuthorizationSpecException0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("", batchUpdateException0);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE(filteringParserDelegate0, mockIllegalArgumentException0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      long[] longArray0 = new long[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g!1g{FY[:J|k");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("g!1g{FY[:J|k", "", 0, longArray0, sQLInvalidAuthorizationSpecException0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null, batchUpdateException0);
      try { 
        creatorProperty0._throwAsIOE(jsonParser0, mockIllegalArgumentException0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing property '' (expected type: $0; actual type: `com.fasterxml.jackson.databind.ObjectMapper`) (no error message provided)
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.filter.FilteringParserDelegate.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object object0 = creatorProperty1.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, beanSerializerFactory0);
      assertNull(object0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(creatorProperty0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.deser.SettableBeanProperty.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object object0 = creatorProperty1.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
      assertNotNull(object0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, beanSerializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      doReturn((Object) null).when(jsonDeserializer0).getNullValue(any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-27));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-27), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(creatorProperty0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      assertTrue(creatorProperty1.hasValueDeserializer());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object object0 = creatorProperty1.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, (String) null, false, placeholderForType0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, asExternalTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Object' as a subtype of $13: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      try { 
        creatorProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), formatStyle0, (PropertyMetadata) null);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      ViewMatcher viewMatcher0 = ViewMatcher.construct(classArray0);
      creatorProperty0._viewMatcher = viewMatcher0;
      boolean boolean0 = creatorProperty0.hasViews();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      Class<UTF8StreamJsonParser>[] classArray0 = (Class<UTF8StreamJsonParser>[]) Array.newInstance(Class.class, 6);
      Class<UTF8StreamJsonParser> class1 = UTF8StreamJsonParser.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = classArray0[0];
      classArray0[3] = class1;
      classArray0[4] = class1;
      classArray0[5] = classArray0[1];
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertTrue(creatorProperty0.hasViews());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.visibleInView(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      PropertyName propertyName0 = new PropertyName("9f#");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), "9f#", (PropertyMetadata) null);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      PropertyName propertyName0 = new PropertyName("v");
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, classNameIdResolver0, "]Q-jEK)~` [EI\"!", true, simpleType0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asArrayTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      boolean boolean0 = creatorProperty0.hasValueTypeDeserializer();
      assertEquals("v", creatorProperty0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      JsonDeserializer<FilteringParserDelegate> jsonDeserializer0 = (JsonDeserializer<FilteringParserDelegate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      boolean boolean0 = creatorProperty1.hasValueDeserializer();
      assertTrue(boolean0);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), " bytes (max buffer size: ", propertyMetadata0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        creatorProperty0.depositSchemaProperty((JsonObjectFormatVisitor) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      creatorProperty0.depositSchemaProperty(jsonObjectFormatVisitor_Base0, defaultSerializerProvider_Impl0);
      assertFalse(creatorProperty0.isIgnorable());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-43));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-691), (Object) null, propertyMetadata0);
      creatorProperty0.assignIndex((-43));
      // Undeclared exception!
      try { 
        creatorProperty0.assignIndex((-691));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Property '' already had index (-43), trying to assign -691
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 6);
      creatorProperty0.setViews(classArray0);
      boolean boolean0 = creatorProperty0.visibleInView(classArray0[3]);
      assertTrue(creatorProperty0.hasViews());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(21);
      FormatStyle formatStyle0 = FormatStyle.MEDIUM;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, formatStyle0, (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("+8raw!Mn,mnYy3b|7.");
      assertNotSame(settableBeanProperty0, creatorProperty1);
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertEquals("+8raw!Mn,mnYy3b|7.", settableBeanProperty0.getName());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      PropertyName propertyName0 = new PropertyName("9f#");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), "9f#", (PropertyMetadata) null);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (JsonDeserializer<?>) null, (NullValueProvider) null);
      NullValueProvider nullValueProvider0 = creatorProperty1.getNullValueProvider();
      assertEquals((-1), creatorProperty1.getPropertyIndex());
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      PropertyName propertyName0 = new PropertyName("9f#");
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), "9f#", (PropertyMetadata) null);
      FailingDeserializer failingDeserializer0 = (FailingDeserializer)creatorProperty0.getNullValueProvider();
      assertFalse(failingDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("v");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      PropertyName propertyName1 = creatorProperty0.getFullName();
      assertTrue(propertyName1.hasSimpleName());
      assertNotSame(propertyName1, propertyName0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1666), (Object) null, (PropertyMetadata) null);
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
      ObjectIdInfo objectIdInfo0 = new ObjectIdInfo((PropertyName) null, class0, class1, class2);
      creatorProperty0.setObjectIdInfo(objectIdInfo0);
      assertFalse(creatorProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-4));
      Class<Integer> class0 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-4), valueInstantiator_Base0, (PropertyMetadata) null);
      PropertyName propertyName1 = creatorProperty0.getWrapperName();
      assertSame(propertyName0, propertyName1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-43));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-691), (Object) null, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      creatorProperty1.assignIndex((-43));
      // Undeclared exception!
      try { 
        creatorProperty1.assignIndex((-691));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-4));
      Class<Integer> class0 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-4), valueInstantiator_Base0, (PropertyMetadata) null);
      creatorProperty0.setManagedReferenceName("");
      assertFalse(creatorProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      // Undeclared exception!
      try { 
        creatorProperty0._throwAsIOE((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = new PropertyName("");
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), valueInstantiator_Base0, (PropertyMetadata) null);
      // Undeclared exception!
      try { 
        creatorProperty0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      PropertyName propertyName0 = new PropertyName((String) null);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "", false, placeholderForType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 12, "", propertyMetadata0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      try { 
        creatorProperty0.deserializeWith(jsonParser0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot merge polymorphic property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      creatorProperty0.getValueTypeDeserializer();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 12, valueInstantiator_Base0, (PropertyMetadata) null);
      creatorProperty0.getObjectIdInfo();
      assertEquals((-1), creatorProperty0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, 0, (Object) null, (PropertyMetadata) null);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        creatorProperty0.getContextAnnotation(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableBeanProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-4));
      Class<Integer> class0 = Integer.TYPE;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, placeholderForType0, propertyName0, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-4), valueInstantiator_Base0, (PropertyMetadata) null);
      int int0 = creatorProperty0.getPropertyIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, placeholderForType0, (PropertyName) null, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-1), (Object) null, (PropertyMetadata) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla", class0, "Cannot use source of type ");
      try { 
        creatorProperty0._throwAsIOE(jsonMappingException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.core.filter.FilteringParserDelegate` from String \"com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla\": Cannot use source of type 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }
}
