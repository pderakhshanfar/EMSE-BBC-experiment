/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 21:03:18 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.net.URL;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTransactionRollbackException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSerializerProvider_ESTest extends DefaultSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      defaultSerializerProvider_Impl1.findObjectId((Object) null, objectIdGenerators_IntSequenceGenerator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeBindings.emptyBindings();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      objectIdGenerators_IntSequenceGenerator0.forScope(class0);
      defaultSerializerProvider_Impl0.getGenerator();
      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) objectIdGenerators_IntSequenceGenerator0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl3 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl2.findObjectId((Object) null, objectIdGenerators_IntSequenceGenerator0);
      defaultSerializerProvider_Impl2.findObjectId((Object) null, writableObjectId0.generator);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl1.hasSerializerFor(class0, atomicReference0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y}6dFGPjX7Jhc");
      System.setCurrentTimeMillis(2476L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "y}6dFGPjX7Jhc", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl1.cachedSerializersCount();
      defaultSerializerProvider_Impl1.getGenerator();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(resolvedRecursiveType0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanSerializerBuilder beanSerializerBuilder1 = new BeanSerializerBuilder(beanSerializerBuilder0);
      List<BeanPropertyWriter> list0 = beanSerializerBuilder1._properties;
      beanSerializerFactory0.constructObjectIdHandler(defaultSerializerProvider_Impl0, basicBeanDescription0, list0);
      BeanSerializer beanSerializer1 = new BeanSerializer(beanSerializer0, (ObjectIdWriter) null, serializerFactoryConfig0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, resolvedRecursiveType0, resolvedRecursiveType0, beanSerializer1, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.serializePolymorphic((JsonGenerator) null, simpleObjectIdResolver0, placeholderForType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, "", (JavaType) null, (JsonSerializer<Object>) null, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaType0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      JsonSerializer<Object> jsonSerializer0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) jsonGeneratorDelegate0, (Object) byteArrayBuilder0, javaType0, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSuperClass();
      TypeSerializer typeSerializer0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.serializePolymorphic((JsonGenerator) null, sQLNonTransientConnectionException0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl3 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl2.findObjectId((Object) null, objectIdGenerators_IntSequenceGenerator0);
      defaultSerializerProvider_Impl2.findObjectId(stdSubtypeResolver0, writableObjectId0.generator);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      Class<NioPathSerializer> class1 = NioPathSerializer.class;
      ReferenceType referenceType0 = ReferenceType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, javaType0, javaTypeArray0, (JavaType) referenceType0, (JavaType) referenceType0);
      MapLikeType mapLikeType0 = mapType0.withKeyType(javaType0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      MapLikeType mapLikeType1 = mapLikeType0.withKeyTypeHandler(coreXMLSerializers_XMLGregorianCalendarSerializer0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapLikeType1);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      ObjectIdGenerator<String> objectIdGenerator0 = objectIdGenerators_StringIdGenerator0.forScope(class1);
      defaultSerializerProvider_Impl2.findObjectId(beanSerializer0, objectIdGenerator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver1, (RootNameLookup) null, configOverrides0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      serializationConfig0.without(formatFeature0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1, serializationConfig0, serializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl3 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      defaultSerializerProvider_Impl2.findObjectId(coreXMLSerializers_XMLGregorianCalendarSerializer0, objectIdGenerators_IntSequenceGenerator0);
      defaultSerializerProvider_Impl2.findObjectId(simpleMixInResolver1, objectIdGenerators_IntSequenceGenerator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y}6dFGPjX7Jhc");
      System.setCurrentTimeMillis(2476L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "y}6dFGPjX7Jhc", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      IOContext iOContext0 = new IOContext(bufferRecycler0, nioPathSerializer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) uTF8JsonGenerator0, (JavaType) null, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Class<ObjectNode> class1 = ObjectNode.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider0);
      objectMapper1.acceptJsonFormatVisitor((Class<?>) class1, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      defaultSerializerProvider0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null, (JavaType) mapType0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      defaultSerializerProvider_Impl0.copy();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<MapType> class1 = MapType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, resolvedRecursiveType0);
      JavaType javaType1 = referenceType0.getContentType();
      javaTypeArray0[0] = javaType1;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      resolvedRecursiveType0.getSuperClass();
      javaTypeArray0[4] = null;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, javaType0, javaTypeArray0, (JavaType) referenceType0);
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, (Object) null, collectionType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      Class<TypeNameIdResolver> class1 = TypeNameIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, ">`yuS@)ng{$3<v}", javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations(annotationMap1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Double double0 = new Double(0.0);
      ObjectNode objectNode1 = objectNode0.put("problem handler tried to resolve into non-subtype: ", double0);
      ObjectNode objectNode2 = objectNode1.objectNode();
      Integer integer0 = new Integer((-1249));
      ObjectNode objectNode3 = objectNode2.put((String) null, integer0);
      ObjectNode objectNode4 = objectNode3.putPOJO("WRITE_EMPTY_JSON_ARRAYS", objectNode0);
      try { 
        defaultSerializerProvider_Impl0.serializerInstance(annotated0, objectNode4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AnnotationIntrospector returned serializer definition of type com.fasterxml.jackson.databind.node.ObjectNode; expected type JsonSerializer or Class<JsonSerializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BvS\fb;<^7kn.v/XF*l");
      System.setCurrentTimeMillis(669L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider0.getGenerator();
      System.setCurrentTimeMillis(0L);
      JavaType javaType0 = null;
      try { 
        defaultSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl3 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl4 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 3);
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl2.findObjectId((Object) null, objectIdGenerators_IntSequenceGenerator0);
      defaultSerializerProvider_Impl2.findObjectId(stdSubtypeResolver0, writableObjectId0.generator);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<WritableObjectId> class0 = WritableObjectId.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.serializerInstance((Annotated) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext0 = new IOContext(bufferRecycler0, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<ObjectIdGenerators.StringIdGenerator> class2 = ObjectIdGenerators.StringIdGenerator.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class2, class2);
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null, (JavaType) mapType0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      defaultSerializerProvider_Impl1._serializeNull(uTF8JsonGenerator1);
      Integer integer0 = new Integer(56320);
      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) uTF8JsonGenerator1, (Object) uTF8JsonGenerator1, (JavaType) collectionLikeType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([collection-like type; class com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator, contains [simple type, class com.fasterxml.jackson.annotation.ObjectIdGenerators$StringIdGenerator]]) vs `com.fasterxml.jackson.core.json.UTF8JsonGenerator`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext0 = new IOContext(bufferRecycler0, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null, (JavaType) mapType0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      defaultSerializerProvider_Impl1._serializeNull(uTF8JsonGenerator1);
      Integer integer0 = new Integer(110);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(uTF8JsonGenerator0, dOMSerializer0, mapType0, defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.databind.ext.DOMSerializer`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      defaultSerializerProvider_Impl1.serializerInstance((Annotated) null, dOMSerializer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnyGetter();
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, coreXMLSerializers_XMLGregorianCalendarSerializer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl1.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl1, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.serializeValue(jsonGenerator0, (Object) "yD?A>(Uf3Ue", (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider0.createInstance(serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider1, serializationConfig0, beanSerializerFactory0);
      defaultSerializerProvider_Impl2.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 1240);
      defaultSerializerProvider_Impl2.findObjectId((Object) null, objectIdGenerators_IntSequenceGenerator0);
      defaultSerializerProvider_Impl2._createObjectIdMap();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Integer integer0 = new Integer(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null, (JavaType) mapType0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      defaultSerializerProvider_Impl1._serializeNull(uTF8JsonGenerator1);
      Integer integer1 = new Integer((-1826));
      try { 
        defaultSerializerProvider_Impl1.serializePolymorphic(uTF8JsonGenerator1, integer1, mapType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]) vs `java.lang.Integer`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      Integer integer0 = new Integer(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) null, (JavaType) mapType0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      defaultSerializerProvider_Impl1._serializeNull(uTF8JsonGenerator1);
      defaultSerializerProvider_Impl1.getGenerator();
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.includeFilterSuppressNulls(defaultSerializerProvider_Impl0);
      Class<DOMSerializer> class0 = DOMSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      Integer integer0 = new Integer(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapLikeType0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, beanSerializer0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper1, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      typeFactory0.constructRawMapType(class1);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) objectIdGenerators_StringIdGenerator0, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(dOMSerializer0);
      defaultSerializerProvider_Impl0.getGenerator();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRAP_EXCEPTIONS;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      ObjectMapper objectMapper4 = objectMapper3.copy();
      ObjectMapper objectMapper5 = objectMapper4.clearProblemHandlers();
      ObjectMapper objectMapper6 = objectMapper5.setInjectableValues(injectableValues_Std0);
      objectMapper6.disableDefaultTyping();
      Class<BeanSerializer> class1 = BeanSerializer.class;
      ObjectReader objectReader0 = objectMapper5.readerFor(class1);
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader0;
      objectReader0.withFormatDetection(objectReaderArray0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) null, (JavaType) mapType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(dOMSerializer0);
      defaultSerializerProvider_Impl0.getGenerator();
      ObjectIdGenerator<ObjectIdGenerators.StringIdGenerator> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdGenerators.StringIdGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerator0);
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(dOMSerializer0);
      defaultSerializerProvider_Impl0.getGenerator();
      ObjectIdGenerator<CoreXMLSerializers.XMLGregorianCalendarSerializer> objectIdGenerator0 = null;
      WritableObjectId writableObjectId0 = new WritableObjectId((ObjectIdGenerator<?>) null);
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.cachedSerializersCount();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      propertyName0.internSimpleName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null, (AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnySetterField();
      doReturn((AnnotatedMethod) null, (AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnySetterAccessor();
      defaultSerializerProvider0.serializerInstance((Annotated) null, (Object) null);
      basicBeanDescription0.findAnySetterAccessor();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(coreXMLSerializers_XMLGregorianCalendarSerializer0, class0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.serializerInstance((Annotated) null, jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, defaultSerializerProvider_Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      PropertyName propertyName0 = PropertyName.construct("q7BG<pa(");
      basicBeanDescription0.findProperty(propertyName0);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      Class<MatchStrength> class0 = MatchStrength.class;
      defaultSerializerProvider0.getUnknownTypeSerializer(class0);
      Class<ObjectNode> class1 = ObjectNode.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.cachedSerializersCount();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnySetterField();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnySetterAccessor();
      defaultSerializerProvider0.serializerInstance((Annotated) null, (Object) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "invalid argument(s) (offset=%d, length=%d) for input array of %d element";
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[2] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[3] = (Object) defaultSerializerProvider0;
      objectArray0[4] = (Object) basicBeanDescription0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) pOJOPropertiesCollector0;
      objectArray0[7] = (Object) "invalid argument(s) (offset=%d, length=%d) for input array of %d element";
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "invalid argument(s) (offset=%d, length=%d) for input array of %d element", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getWithArgsCreator();
      defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(placeholderForType0, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      typeFactory0.constructRawMapType(class0);
      typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<HashMap> class1 = HashMap.class;
      typeFactory0.constructRawMapType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonAutoDetect.Value.noOverrides();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1._createObjectIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      ObjectReader objectReader0 = objectMapper3.readerFor(class0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) typeFactory0, (JavaType) mapType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.databind.type.TypeFactory`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class1 = Object.class;
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      Class<IOException> class2 = IOException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class2);
      ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      AtomicReference<Throwable> atomicReference1 = new AtomicReference<Throwable>();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class1, atomicReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1986), objectMapper1, byteArrayOutputStream0, byteArray0, (byte) (-46), false);
      try { 
        defaultSerializerProvider_Impl0._serializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.ArrayIndexOutOfBoundsException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JavaType javaType0 = null;
      try { 
        defaultSerializerProvider_Impl1._serializeNull((JsonGenerator) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider0.createInstance(serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider1, serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider defaultSerializerProvider2 = defaultSerializerProvider_Impl2.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 1240);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5719), objectMapper2, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(51);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      defaultSerializerProvider2.serializeValue(jsonGenerator0, (Object) null, (JavaType) mapType0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl2.acceptJsonFormatVisitor(mapType0, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      objectIdGenerators_IntSequenceGenerator0.newForSerialization(integer0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.getContentType();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A class must be provided
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      Integer integer0 = new Integer(0);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) integer0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider0.createInstance(serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider1, serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider defaultSerializerProvider2 = defaultSerializerProvider_Impl2.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 1240);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5719), objectMapper2, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(51);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      defaultSerializerProvider2.serializeValue(jsonGenerator0, (Object) null, (JavaType) mapType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1._createObjectIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      defaultSerializerProvider_Impl0.createInstance(serializationConfig0, beanSerializerFactory0);
      serializerFactoryConfig0.serializers();
      long long0 = (-763L);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forDeserializationWithBuilder(deserializationConfig1, (JavaType) null, serializationConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider0.createInstance(serializationConfig0, beanSerializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider1, serializationConfig0, beanSerializerFactory0);
      defaultSerializerProvider_Impl2.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, 1240);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5719), objectMapper2, byteArrayBuilder0);
      uTF8JsonGenerator0.setHighestNonEscapedChar(51);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<HashMap> class1 = HashMap.class;
      typeFactory0.constructRawMapType(class1);
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      defaultSerializerProvider1.findObjectId((Object) null, objectIdGenerators_IntSequenceGenerator0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Integer integer0 = new Integer(0);
      objectIdGenerators_IntSequenceGenerator0.newForSerialization(integer0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findObjectId(defaultSerializerProvider0, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&AXkg");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("y", "y", " 8L%e_uL^S]UD{oU**", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("&AXkg", "y", " 8L%e_uL^S]UD{oU**", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("y", "&AXkg", "<WUUYz$M", (-1230));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("@c", " 8L%e_uL^S]UD{oU**", ".1MZYF(`6)a]", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("}w-c*fj", "", "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("AnnotationIntrospector returned Class ", "", "3vR", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("ZaX`", "ZaX`", "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("", "ZaX`", "K}E^DBZF8qU*w'", 0);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("83'?<mz*<{b", "&AXkg", "y", (-1230));
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&AXkg", "Problem determining whether filter of type '%s' should filter out `null` values: (%s) %s", 0);
      atomicReference0.weakCompareAndSet(sQLInvalidAuthorizationSpecException0, sQLTransactionRollbackException0);
      defaultSerializerProvider_Impl1.hasSerializerFor(class0, atomicReference0);
      ObjectIdGenerator<DOMSerializer> objectIdGenerator0 = (ObjectIdGenerator<DOMSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findObjectId(sQLIntegrityConstraintViolationException0, objectIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(dOMSerializer0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider_Impl0.getGenerator();
      defaultSerializerProvider0.copy();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) referenceType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(dOMSerializer0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider_Impl0.getGenerator();
      ObjectIdGenerator<ObjectIdGenerators.StringIdGenerator> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdGenerators.StringIdGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerator0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.serializeValue((JsonGenerator) null, (Object) writableObjectId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      defaultSerializerProvider_Impl0.getGenerator();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class1 = Object.class;
      Class<IOException> class2 = IOException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("set");
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) collectionLikeType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) referenceType1;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[3] = (JavaType) referenceType1;
      referenceType1.refine(class1, typeBindings0, collectionLikeType0, javaTypeArray0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.acceptJsonFormatVisitor(referenceType1, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      SerializationConfig serializationConfig0 = null;
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory((SerializerFactoryConfig) null);
      Serializers.Base serializers_Base0 = new Serializers.Base();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(serializers_Base0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = null;
      try {
        defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider0, (SerializationConfig) null, serializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.flushCachedSerializers();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory0.createGenerator((OutputStream) filterOutputStream0, jsonEncoding0);
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      jsonFactory1._getBufferRecycler();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      defaultSerializerProvider_Impl0._serializeNull(jsonGenerator0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) jsonFactory1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer(beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      defaultSerializerProvider_Impl0.getGenerator();
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      SerializerFactoryConfig serializerFactoryConfig1 = serializerFactoryConfig0.withAdditionalSerializers(simpleSerializers0);
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig1);
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.createInstance((SerializationConfig) null, serializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
