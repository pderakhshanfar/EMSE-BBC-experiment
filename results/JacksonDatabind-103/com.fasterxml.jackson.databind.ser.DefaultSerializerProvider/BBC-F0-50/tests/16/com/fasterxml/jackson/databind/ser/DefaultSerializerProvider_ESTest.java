/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:39:43 GMT 2021
 */

package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Writer;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSerializerProvider_ESTest extends DefaultSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();
      SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.copy();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver2, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyName propertyName0 = PropertyName.construct(",|9A");
      PropertyName propertyName1 = propertyName0.withSimpleName("");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory0.setOutputDecorator(outputDecorator0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      NamedType namedType0 = new NamedType(class0, "JSON");
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) dOMSerializer0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyName propertyName0 = PropertyName.construct(",|9A");
      PropertyName propertyName1 = propertyName0.withSimpleName(",|9A");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setOutputDecorator(outputDecorator0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(",|9A", true);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockFileOutputStream1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      Class<ObjectNode> class0 = ObjectNode.class;
      NamedType namedType0 = new NamedType(class0, "JSON");
      try { 
        defaultSerializerProvider_Impl1.serializeValue(jsonGenerator0, (Object) class0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Vz`");
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(mockFileOutputStream0).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      Class<ObjectNode> class0 = ObjectNode.class;
      NamedType namedType0 = new NamedType(class0, "#MXdN");
      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) jsonGeneratorDelegate0, (Object) rootNameLookup0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      NamedType namedType0 = new NamedType(class0, "");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-70), (byte)101);
      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) byteArrayInputStream0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      Class<ObjectNode> class0 = ObjectNode.class;
      NamedType namedType0 = new NamedType(class0, "#MXdN");
      try { 
        defaultSerializerProvider_Impl1.serializePolymorphic(jsonGeneratorDelegate0, namedType0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      jsonFactory1.setOutputDecorator((OutputDecorator) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonFactory jsonFactory2 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      Class<ObjectNode> class0 = ObjectNode.class;
      NamedType namedType0 = new NamedType(class0, "");
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        defaultSerializerProvider_Impl1.serializePolymorphic(jsonGenerator0, simpleObjectIdResolver0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[2], javaTypeArray0[3]);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[3]);
      PropertySerializerMap propertySerializerMap0 = PropertySerializerMap.emptyForRootValues();
      propertySerializerMap0.serializerFor(class0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, deserializationFeature0, mapType1, (JsonSerializer<Object>) null, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactory2.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory3 = new JsonFactory();
      jsonFactory3._getBufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      objectMapper0.configure(mapperFeature0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      objectMapper0.canSerialize(class0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Class<Throwable> class0 = Throwable.class;
      objectMapper1.canSerialize(class0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 898, objectMapper0, byteArrayOutputStream0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField(" -- suspect a DoS attack based on hash collisions", simpleObjectIdResolver0, uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "CAN_OVERRIDE_ACCESS_MODIFIERS");
      Random.setNextRandom(2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "";
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      objectMapper1.canSerialize(class0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("", vector0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      configOverrides0.copy();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      Class<Object> class0 = Object.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      ObjectIdGenerator<ObjectIdGenerators.StringIdGenerator> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdGenerators.StringIdGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerator0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectNode> class1 = ObjectNode.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler(serializationConfig0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.serializeValue((JsonGenerator) null, (Object) writableObjectId0, (JavaType) mapLikeType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      Class<Object> class0 = Object.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Dn8[Te3.", "Dn8[Te3.");
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl1.hasSerializerFor(class0, atomicReference0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = javaType0;
      CollectionType collectionType0 = CollectionType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[3]);
      CollectionType collectionType1 = collectionType0.withTypeHandler(javaTypeArray0[3]);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.acceptJsonFormatVisitor(collectionType1, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      ObjectIdGenerator<IOException> objectIdGenerator0 = (ObjectIdGenerator<IOException>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(fileSystemHandling0, objectIdGenerators_StringIdGenerator0);
      hashMap0.put(objectIdGenerators_StringIdGenerator0, writableObjectId0);
      ObjectIdGenerator<JavaType> objectIdGenerator1 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<JavaType> objectIdGenerator2 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator1).when(objectIdGenerator2).newForSerialization(any());
      defaultSerializerProvider_Impl0.findObjectId(jsonFactory0, objectIdGenerator2);
      ObjectIdGenerator<FilterInputStream> objectIdGenerator3 = (ObjectIdGenerator<FilterInputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      defaultSerializerProvider_Impl0.findObjectId(fileSystemHandling0, objectIdGenerator3);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0._createObjectIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader();
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      objectReader0.withAttributes(hashMap0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        objectMapper0.valueToTree((Object) simpleObjectIdResolver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No serializer found for class com.fasterxml.jackson.annotation.SimpleObjectIdResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      objectReader0.withAttributes(hashMap0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      Version version0 = jsonFactory0.version();
      SimpleModule simpleModule0 = new SimpleModule("eIIwrf>w", version0);
      NamedType[] namedTypeArray0 = new NamedType[0];
      SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
      objectMapper0.valueToTree((Object) simpleModule1);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) deserializationFeature0, (JavaType) referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      defaultSerializerProvider_Impl0.getGenerator();
      ObjectIdGenerator<IOException> objectIdGenerator0 = (ObjectIdGenerator<IOException>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<ObjectIdResolver> objectIdGenerator1 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectIdGenerator1).canUseFor(any(com.fasterxml.jackson.annotation.ObjectIdGenerator.class));
      ObjectIdGenerator<ObjectIdResolver> objectIdGenerator2 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator1).when(objectIdGenerator2).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(jsonFactory0, objectIdGenerator2);
      hashMap0.put((Object) null, writableObjectId0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectIdGenerator<IOException> objectIdGenerator3 = (ObjectIdGenerator<IOException>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      WritableObjectId writableObjectId1 = defaultSerializerProvider_Impl0.findObjectId(inputDecorator0, objectIdGenerator3);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) writableObjectId1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      defaultSerializerProvider_Impl0.getGenerator();
      ObjectIdGenerator<IOException> objectIdGenerator0 = (ObjectIdGenerator<IOException>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<ObjectIdResolver> objectIdGenerator1 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectIdGenerator1).canUseFor(any(com.fasterxml.jackson.annotation.ObjectIdGenerator.class));
      ObjectIdGenerator<ObjectIdResolver> objectIdGenerator2 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn(objectIdGenerator1).when(objectIdGenerator2).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(jsonFactory0, objectIdGenerator2);
      hashMap0.put((Object) null, writableObjectId0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectIdGenerator<IOException> objectIdGenerator3 = (ObjectIdGenerator<IOException>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator3).newForSerialization(any());
      WritableObjectId writableObjectId1 = defaultSerializerProvider_Impl0.findObjectId(inputDecorator0, objectIdGenerator3);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) writableObjectId1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3141, objectMapper0, (Writer) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) null, (JavaType) placeholderForType0);
      defaultSerializerProvider0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) null, (JavaType) placeholderForType0);
      defaultSerializerProvider0.getGenerator();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, (Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      defaultSerializerProvider_Impl0.getGenerator();
      ObjectIdGenerator<IOException> objectIdGenerator0 = (ObjectIdGenerator<IOException>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdGenerator<ObjectIdResolver> objectIdGenerator1 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator1).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(jsonFactory0, objectIdGenerator1);
      hashMap0.put((Object) null, writableObjectId0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectIdGenerator<IOException> objectIdGenerator2 = (ObjectIdGenerator<IOException>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findObjectId(inputDecorator0, objectIdGenerator2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      AtomicReference<Throwable> atomicReference1 = new AtomicReference<Throwable>();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, atomicReference0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kuAm2],");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, mockFileOutputStream0, byteArray0, 8232, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper1);
      try { 
        defaultSerializerProvider_Impl0._serializeNull(jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      objectReader0.withAttributes(hashMap0);
      try { 
        objectMapper0.valueToTree((Object) objectReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectReader[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(4096, 4096).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      objectReader1.withAttributes(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap1);
      InjectableValues.Std injectableValues_Std1 = new InjectableValues.Std(hashMap1);
      objectReader0.with((InjectableValues) injectableValues_Std1);
      try { 
        objectMapper0.valueToTree((Object) objectReader1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectReader[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) objectOutputStream0);
      defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) null, javaType0, (JsonSerializer<Object>) null);
      defaultSerializerProvider_Impl0.getGenerator();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      SerializedString serializedString0 = new SerializedString("");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      SerializationConfig serializationConfig1 = serializationConfig0.withDefaultPrettyPrinter(defaultPrettyPrinter0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      defaultSerializerProvider_Impl1._createObjectIdMap();
      defaultSerializerProvider_Impl1.copy();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      formatFeatureArray0[5] = formatFeature0;
      SerializationConfig serializationConfig2 = serializationConfig1.withFeatures(formatFeatureArray0);
      SerializedString serializedString0 = new SerializedString("%9z4");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      SerializationConfig serializationConfig3 = serializationConfig2.withDefaultPrettyPrinter(defaultPrettyPrinter0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      SerializerFactoryConfig serializerFactoryConfig1 = serializerFactoryConfig0.withAdditionalKeySerializers(simpleSerializers0);
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1, serializationConfig3, serializerFactory0);
      defaultSerializerProvider_Impl2._createObjectIdMap();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig1, beanSerializerFactory0);
      defaultSerializerProvider_Impl1._createObjectIdMap();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.constructType((Type) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockPrintWriter0);
      InputDecorator inputDecorator1 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator1);
      defaultSerializerProvider_Impl0._serializeNull(jsonGenerator0);
      HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
      defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
      defaultSerializerProvider_Impl0.getGenerator();
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      ObjectIdGenerator<IOException> objectIdGenerator0 = (ObjectIdGenerator<IOException>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(jsonFactory3, objectIdGenerator0);
      hashMap0.put(defaultSerializerProvider_Impl0._seenObjectIds, writableObjectId0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) nioPathSerializer0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      RootNameLookup rootNameLookup1 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup1, configOverrides0);
      configOverrides0.copy();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      Class<Object> class0 = Object.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl1.hasSerializerFor(class0, atomicReference0);
      Object object0 = new Object();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      objectIdGenerators_IntSequenceGenerator0.newForSerialization((Object) null);
      defaultSerializerProvider_Impl1.findObjectId(objectIdGenerators_IntSequenceGenerator0, objectIdGenerators_IntSequenceGenerator0);
      defaultSerializerProvider_Impl0.copy();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[3] = mapperFeature3;
      serializationConfig0.with(mapperFeatureArray0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      Class<SimpleModule> class0 = SimpleModule.class;
      ObjectIdGenerator<String> objectIdGenerator0 = objectIdGenerators_StringIdGenerator0.forScope(class0);
      WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl1.findObjectId(stdSubtypeResolver0, objectIdGenerator0);
      defaultSerializerProvider_Impl1.findObjectId(writableObjectId0, objectIdGenerators_StringIdGenerator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(1992, 1992).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      objectReader1.withAttributes(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap1);
      InjectableValues.Std injectableValues_Std1 = new InjectableValues.Std(hashMap1);
      objectReader0.with((InjectableValues) injectableValues_Std1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
      typeFactory0.moreSpecificType(referenceType0, javaType1);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer((BeanProperty) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(injectableValues_Std1);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) integer0, (JavaType) referenceType0, jsonSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, (TypeBindings) null);
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "]", javaType0);
      Annotated annotated0 = virtualAnnotatedMember0.withAnnotations((AnnotationMap) null);
      try { 
        defaultSerializerProvider_Impl0.serializerInstance(annotated0, annotated0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AnnotationIntrospector returned serializer definition of type com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember; expected type JsonSerializer or Class<JsonSerializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonFactory1.disable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2048);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) filterOutputStream0);
      defaultSerializerProvider_Impl0.serializePolymorphic(jsonGenerator0, (Object) null, javaType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory.unknownType();
      Integer integer0 = new Integer(256);
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, nioPathSerializer0, (JavaType) null, (JsonSerializer<Object>) null, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      Integer integer0 = new Integer(256);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, integer0, javaType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, (Object) null, javaType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<PropertyName> class0 = PropertyName.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("#n0B8J>.", (String) null, 1);
      SQLWarning sQLWarning0 = new SQLWarning("`h8q%jg@|Y?FKlD`$", "S<");
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLWarning0);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      jsonFactory0.setRootValueSeparator("`h8q%jg@|Y?FKlD`$");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 8);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class2 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      JavaType javaType0 = typeFactory0.moreSpecificType(collectionType0, collectionType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0);
      SerializedString serializedString0 = new SerializedString("65J, )TUZk>");
      BeanPropertyWriter beanPropertyWriter2 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
      ClassNameIdResolver classNameIdResolver1 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver1, beanPropertyWriter1);
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(jsonGenerator0, "65J, )TUZk>", collectionType0, jsonSerializer0, asWrapperTypeSerializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([collection type; class java.util.List, contains [simple type, class com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer]]) vs `java.lang.String`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<PropertyName> class0 = PropertyName.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("#n0B8J>.", "#n0B8J>.", 1);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLTransientConnectionException0);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("^<q");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 8);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) bufferedOutputStream0);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
      BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0);
      SerializedString serializedString0 = new SerializedString("JSON");
      BeanPropertyWriter beanPropertyWriter2 = new BeanPropertyWriter(beanPropertyWriter1, serializedString0);
      AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer(classNameIdResolver0, beanPropertyWriter2);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializePolymorphic(jsonGenerator0, jsonFactory0, javaType0, jsonSerializer0, asWrapperTypeSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      IOContext iOContext0 = new IOContext(bufferRecycler0, vector0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      objectMapper0.configure(mapperFeature0, false);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2880), objectMapper1, (OutputStream) null, byteArray0, 1023, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1, 1023);
      try { 
        defaultSerializerProvider_Impl0._serializeNull(jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType.upgradeFrom(javaType0, javaType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      javaType0.getErasedSignature();
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) coreXMLSerializers_XMLGregorianCalendarSerializer0, javaType0, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      Object object0 = new Object();
      Class<DOMSerializer> class0 = DOMSerializer.class;
      int int0 = (-1478);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1478));
      coreXMLDeserializers_Std0.getValueType();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, object0, (JavaType) null, defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      File file0 = MockFile.createTempFile("7e_", "Ld[mt\"3p#6X`'H");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("\"<]qkw.pt\"'x{H");
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) jsonEncoding0, (JavaType) null, defaultSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      Class<LinkedHashSet> class2 = LinkedHashSet.class;
      typeFactory0.constructRawCollectionType(class2);
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) objectIdGenerators_IntSequenceGenerator0, (JavaType) mapType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([map type; class java.util.Map, [map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType.upgradeFrom(javaType0, javaType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      byteArrayBuilder0.appendTwoBytes(480);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.serializeValue(jsonGenerator0, (Object) jsonParser_Feature0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      objectReader1.withAttributes(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap1);
      InjectableValues.Std injectableValues_Std1 = new InjectableValues.Std(hashMap1);
      objectReader0.with((InjectableValues) injectableValues_Std1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
      typeFactory0.moreSpecificType(referenceType0, javaType1);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer((BeanProperty) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(injectableValues_Std1);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) integer0, (JavaType) referenceType0, jsonSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
      MapType mapType1 = mapType0.withTypeHandler(beanSerializer0);
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(mapType0, (PropertyName) null, objectIdGenerators_StringIdGenerator0, false);
      BeanSerializer beanSerializer1 = new BeanSerializer(beanSerializer0, objectIdWriter0);
      MapType mapType2 = mapType1.withValueHandler(beanSerializer1);
      MapType mapType3 = mapType2.withStaticTyping();
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) mapType3, (JsonSerializer<Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature1;
      deserializationFeatureArray0[5] = deserializationFeature1;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      HashMap<IOException, NioPathSerializer> hashMap0 = new HashMap<IOException, NioPathSerializer>();
      ObjectReader objectReader2 = objectReader1.withAttributes(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap1);
      ObjectReader objectReader3 = objectReader2.with((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader3.getTypeFactory();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JavaType javaType1 = typeFactory0.moreSpecificType(referenceType0, javaType0);
      Class<SimpleModule> class0 = SimpleModule.class;
      JavaType javaType2 = typeFactory0.constructSpecializedType(javaType1, class0);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer((BeanProperty) null);
      try { 
        defaultSerializerProvider_Impl0.serializeValue(jsonGenerator0, (Object) deserializationFeature0, javaType2, jsonSerializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([simple type, class com.fasterxml.jackson.databind.module.SimpleModule]) vs `com.fasterxml.jackson.databind.DeserializationFeature`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<ObjectNode> class1 = ObjectNode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
      MapType mapType1 = mapType0.withTypeHandler(typeFactory0);
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(mapType0, (PropertyName) null, objectIdGenerators_StringIdGenerator0, true);
      BeanSerializer beanSerializer1 = new BeanSerializer(beanSerializer0, objectIdWriter0);
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      mapType0.withValueHandler(dOMSerializer0);
      MapType mapType2 = mapType1.withStaticTyping();
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) typeFactory0, (JavaType) mapType2, (JsonSerializer<Object>) beanSerializer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([map type; class java.util.Map, [simple type, class com.fasterxml.jackson.databind.node.ObjectNode] -> [simple type, class com.fasterxml.jackson.databind.node.ObjectNode]]) vs `com.fasterxml.jackson.databind.type.TypeFactory`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      objectIdGenerators_UUIDGenerator0.generateId(objectIdGenerators_StringIdGenerator0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.getGenerator();
      int int0 = 63;
      DataTruncation dataTruncation0 = new DataTruncation((-2892), true, false, 0, 2650);
      dataTruncation0.getNextWarning();
      String string0 = "((UTZ>";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) dataTruncation0;
      Class<IOException> class0 = IOException.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      Class<Object> class0 = Object.class;
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      try { 
        defaultSerializerProvider_Impl0._serializeNull((JsonGenerator) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider0.getGenerator();
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      Class<WritableObjectId> class0 = WritableObjectId.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getDefaultCreator();
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertNull(annotatedWithParams0);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertNotNull(coreXMLSerializers_XMLGregorianCalendarSerializer0);
      
      UUID uUID0 = objectIdGenerators_UUIDGenerator0.generateId(coreXMLSerializers_XMLGregorianCalendarSerializer0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer1 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer1.equals((Object)coreXMLSerializers_XMLGregorianCalendarSerializer0));
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer1.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer1.usesObjectId());
      assertNotNull(coreXMLSerializers_XMLGregorianCalendarSerializer1);
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl1.serializerInstance((Annotated) null, coreXMLSerializers_XMLGregorianCalendarSerializer1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer1.equals((Object)coreXMLSerializers_XMLGregorianCalendarSerializer0));
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer1.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer1.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      assertNotNull(jsonSerializer0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(coreXMLSerializers_XMLGregorianCalendarSerializer1, jsonSerializer0);
      assertNotSame(coreXMLSerializers_XMLGregorianCalendarSerializer1, coreXMLSerializers_XMLGregorianCalendarSerializer0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(defaultSerializerProvider_Impl2);
      
      SQLDataException sQLDataException0 = new SQLDataException("DefaultSerializerProvider sub-class not overriding copy()", "DefaultSerializerProvider sub-class not overriding copy()", 999);
      assertEquals("DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.getSQLState());
      assertEquals("DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.getMessage());
      assertEquals(999, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      AtomicReference<Throwable> atomicReference1 = new AtomicReference<Throwable>(sQLDataException0);
      assertFalse(atomicReference1.equals((Object)atomicReference0));
      assertEquals("DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.getSQLState());
      assertEquals("DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.getMessage());
      assertEquals(999, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.toString());
      assertEquals("java.sql.SQLDataException: DefaultSerializerProvider sub-class not overriding copy()", atomicReference1.toString());
      assertNotNull(atomicReference1);
      
      boolean boolean0 = defaultSerializerProvider_Impl1.hasSerializerFor(class0, atomicReference1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(atomicReference1.equals((Object)atomicReference0));
      assertEquals("DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.getSQLState());
      assertEquals("DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.getMessage());
      assertEquals(999, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: DefaultSerializerProvider sub-class not overriding copy()", sQLDataException0.toString());
      assertEquals("java.lang.NullPointerException", atomicReference1.toString());
      assertFalse(boolean0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl2);
      assertNotSame(atomicReference1, atomicReference0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<SimpleModule> class0 = SimpleModule.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getDefaultCreator();
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertNull(annotatedWithParams0);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider0));
      assertNotNull(defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider0);
      
      Class<Object> class1 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertNotNull(resolvedRecursiveType0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<NioPathSerializer> class0 = NioPathSerializer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getDefaultCreator();
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertNull(annotatedWithParams0);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider0.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider1));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider1);
      
      TypeBindings typeBindings0 = null;
      Class<Throwable> class1 = Throwable.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertNotNull(resolvedRecursiveType0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getDefaultCreator();
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertNull(annotatedWithParams0);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, objectIdGenerators_UUIDGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getDefaultCreator();
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertNull(annotatedWithParams0);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, objectIdGenerators_UUIDGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(serializerProvider0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getRootName());
      assertNotNull(serializationConfig0);
      
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig1.useRootWrapping());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNotNull(serializationConfig1);
      assertSame(serializationConfig0, serializationConfig1);
      assertSame(serializationConfig1, serializationConfig0);
      
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertNotNull(serializerFactoryConfig0);
      
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertNotNull(beanSerializerFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl(serializerProvider0, serializationConfig1, beanSerializerFactory0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)serializerProvider0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig1.useRootWrapping());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)serializerProvider0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig1.useRootWrapping());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(serializerProvider0, defaultSerializerProvider0);
      assertSame(serializationConfig0, serializationConfig1);
      assertSame(serializationConfig1, serializationConfig0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, serializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, serializerProvider0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig1.useRootWrapping());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider_Impl1.createInstance(serializationConfig0, beanSerializerFactory0);
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(serializerProvider0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)serializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider1.equals((Object)serializerProvider0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig1.useRootWrapping());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      assertTrue(defaultSerializerProvider1.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider1);
      assertNotSame(serializerProvider0, defaultSerializerProvider1);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(serializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(serializerProvider0, defaultSerializerProvider0);
      assertSame(serializationConfig0, serializationConfig1);
      assertSame(serializationConfig1, serializationConfig0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, serializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider0, serializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, serializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider1, serializerProvider0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Object> class0 = Object.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getDefaultCreator();
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertNull(annotatedWithParams0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_StringIdGenerator0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertNotNull(serializationConfig0);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider_Impl2);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl2.createInstance(serializationConfig0, beanSerializerFactory0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      assertTrue(defaultSerializerProvider0.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      
      PropertyName propertyName0 = PropertyName.construct((String) null, " 7a");
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals(" 7a", propertyName0.getNamespace());
      assertNotNull(propertyName0);
      
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, false, propertyName0);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals(" 7a", propertyName0.getNamespace());
      assertEquals("", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertEquals("", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertNotNull(pOJOPropertyBuilder0);
      
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withName(propertyName0);
      assertFalse(pOJOPropertyBuilder1.equals((Object)pOJOPropertyBuilder0));
      assertFalse(pOJOPropertyBuilder1.couldDeserialize());
      assertFalse(pOJOPropertyBuilder1.hasField());
      assertFalse(pOJOPropertyBuilder1.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder1.anyIgnorals());
      assertFalse(pOJOPropertyBuilder1.hasGetter());
      assertFalse(pOJOPropertyBuilder1.hasSetter());
      assertFalse(pOJOPropertyBuilder1.anyVisible());
      assertFalse(pOJOPropertyBuilder1.isExplicitlyIncluded());
      assertEquals("", pOJOPropertyBuilder1.getInternalName());
      assertEquals("", pOJOPropertyBuilder1.getName());
      assertFalse(pOJOPropertyBuilder1.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder1.couldSerialize());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals(" 7a", propertyName0.getNamespace());
      assertEquals("", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertEquals("", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertNotNull(pOJOPropertyBuilder1);
      assertNotSame(pOJOPropertyBuilder1, pOJOPropertyBuilder0);
      assertNotSame(pOJOPropertyBuilder0, pOJOPropertyBuilder1);
      
      Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.includeFilterInstance(pOJOPropertyBuilder1, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider0.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider0));
      assertNotNull(defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider0.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNull(javaType0);
      
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertNotNull(serializerFactoryConfig0);
      
      BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertNotNull(beanSerializerFactory0);
      
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertNotNull(serializerFactory0);
      assertSame(beanSerializerFactory0, serializerFactory0);
      assertSame(serializerFactory0, beanSerializerFactory0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.createInstance((SerializationConfig) null, serializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider0.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider0.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(63);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNull(javaType0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider1.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      int int0 = defaultSerializerProvider_Impl0.cachedSerializersCount();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, int0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_StringIdGenerator0);
      
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ObjectIdGenerator<String> objectIdGenerator0 = objectIdGenerators_StringIdGenerator0.forScope(class0);
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertFalse(objectIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerator0);
      assertSame(objectIdGenerators_StringIdGenerator0, objectIdGenerator0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.hasSerializerFor(class1, atomicReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider1 = defaultSerializerProvider0.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider1, defaultSerializerProvider_Impl0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_UUIDGenerator0, true);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DOMSerializer> class0 = DOMSerializer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectReader0, byteArrayBuilder0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider1.serializeValue((JsonGenerator) uTF8JsonGenerator1, (Object) defaultSerializerProvider0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertNotNull(javaType0);
      
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(javaType0, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider0.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((DataOutput) null, jsonEncoding0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(23, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      defaultSerializerProvider_Impl1._serializeNull(writerBasedJsonGenerator0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(23, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl0);
      
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A class must be provided
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      int int0 = 48;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(48);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.actualType();
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertNull(javaType0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A class must be provided
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider0.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(63);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertNull(javaType0);
      
      try { 
        defaultSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      int int0 = defaultSerializerProvider_Impl0.cachedSerializersCount();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, int0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_StringIdGenerator0);
      
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ObjectIdGenerator<String> objectIdGenerator0 = objectIdGenerators_StringIdGenerator0.forScope(class0);
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertFalse(objectIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerator0);
      assertSame(objectIdGenerators_StringIdGenerator0, objectIdGenerator0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findObjectId(defaultSerializerProvider_Impl1, objectIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
      assertTrue(boolean0);
      
      Class<DOMSerializer> class0 = DOMSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      boolean boolean1 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertFalse(boolean1 == boolean0);
      assertEquals("java.lang.NullPointerException", atomicReference0.toString());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((Writer) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) writerBasedJsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<DOMSerializer> class0 = DOMSerializer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `com.fasterxml.jackson.databind.ext.DOMSerializer` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.updateAndGet(unaryOperator0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `com.fasterxml.jackson.databind.ext.DOMSerializer` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types", atomicReference0.toString());
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      
      atomicReference0.lazySet(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `com.fasterxml.jackson.databind.ext.DOMSerializer` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types", atomicReference0.toString());
      assertSame(jsonMappingException0, throwable0);
      
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("java.lang.NullPointerException", atomicReference0.toString());
      assertFalse(boolean0);
      assertSame(jsonMappingException0, throwable0);
      
      defaultSerializerProvider_Impl0.flushCachedSerializers();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      int int0 = defaultSerializerProvider_Impl1.cachedSerializersCount();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, int0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      Class<Integer> class0 = Integer.class;
      defaultSerializerProvider_Impl1.setNullKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2225;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("key serializer", "key serializer");
      assertEquals("key serializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: key serializer", sQLTransientConnectionException0.toString());
      assertEquals("key serializer", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("key serializer", "key serializer", sQLTransientConnectionException0);
      assertEquals("key serializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: key serializer", sQLTransientConnectionException0.toString());
      assertEquals("key serializer", sQLTransientConnectionException0.getMessage());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      sQLTransientConnectionException0.printStackTrace();
      assertEquals("key serializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: key serializer", sQLTransientConnectionException0.toString());
      assertEquals("key serializer", sQLTransientConnectionException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      assertEquals(9, intArray0.length);
      assertEquals("key serializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: key serializer", sQLTransientConnectionException0.toString());
      assertEquals("key serializer", sQLTransientConnectionException0.getMessage());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", sQLFeatureNotSupportedException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0, 2225, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("key serializer");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      PrintStream printStream0 = mockPrintStream0.printf("key serializer", objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      batchUpdateException0.printStackTrace(printStream0);
      assertEquals(1, objectArray0.length);
      assertEquals(9, intArray0.length);
      assertEquals("key serializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: key serializer", sQLTransientConnectionException0.toString());
      assertEquals("key serializer", sQLTransientConnectionException0.getMessage());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", sQLFeatureNotSupportedException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0, 2225, 0, 0, 0, 0, 0}, intArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      long[] longArray0 = batchUpdateException0.getLargeUpdateCounts();
      assertEquals(9, intArray0.length);
      assertEquals(9, longArray0.length);
      assertEquals("key serializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: key serializer", sQLTransientConnectionException0.toString());
      assertEquals("key serializer", sQLTransientConnectionException0.getMessage());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", sQLFeatureNotSupportedException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0, 2225, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2225L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray0);
      
      int[] intArray1 = batchUpdateException0.getUpdateCounts();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals("key serializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: key serializer", sQLTransientConnectionException0.toString());
      assertEquals("key serializer", sQLTransientConnectionException0.getMessage());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", sQLFeatureNotSupportedException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0, 2225, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 2225, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = atomicReference0.weakCompareAndSet(batchUpdateException0, batchUpdateException0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(9, intArray0.length);
      assertEquals("key serializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: key serializer", sQLTransientConnectionException0.toString());
      assertEquals("key serializer", sQLTransientConnectionException0.getMessage());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("key serializer", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", sQLFeatureNotSupportedException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: key serializer", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("null", atomicReference0.toString());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 2225, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.updateAndGet(unaryOperator0);
      assertEquals("null", atomicReference0.toString());
      assertNull(throwable0);
      
      boolean boolean1 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(boolean1 == boolean0);
      assertEquals("java.lang.NullPointerException", atomicReference0.toString());
      assertFalse(boolean1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      int int0 = defaultSerializerProvider_Impl0.cachedSerializersCount();
      assertEquals(0, int0);
      
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      String string0 = "";
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      int int0 = defaultSerializerProvider0.cachedSerializersCount();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, int0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      defaultSerializerProvider_Impl0.flushCachedSerializers();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_StringIdGenerator0);
      
      ObjectIdGenerator<String> objectIdGenerator0 = objectIdGenerators_StringIdGenerator0.newForSerialization(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertFalse(objectIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertSame(objectIdGenerators_StringIdGenerator0, objectIdGenerator0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.findObjectId("f", objectIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      ObjectIdGenerator<ObjectIdGenerators.UUIDGenerator> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdGenerators.UUIDGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findObjectId((Object) null, objectIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_StringIdGenerator0);
      
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = objectIdGenerators_StringIdGenerator0.key(defaultSerializerProvider_Impl0);
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerator_IdKey0);
      
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(objectIdGenerators_StringIdGenerator0);
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      
      String string0 = "5\\RupEJx1dLDv1R<";
      String string1 = "}P(%:^@<Pj";
      SQLException sQLException0 = new SQLException("}P(%:^@<Pj");
      assertEquals("java.sql.SQLException: }P(%:^@<Pj", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("}P(%:^@<Pj", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectIdGenerators_StringIdGenerator0;
      objectArray0[1] = (Object) "}P(%:^@<Pj";
      objectArray0[2] = (Object) sQLException0;
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.reportBadDefinition((Class<?>) class0, "}P(%:^@<Pj", (Throwable) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_StringIdGenerator0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isFinal());
      assertNotNull(javaType0);
      
      String string0 = objectIdGenerators_StringIdGenerator0.generateId(javaType0);
      assertFalse(objectIdGenerators_StringIdGenerator0.maySerializeAsObject());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isFinal());
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
      assertNotNull(string0);
      
      String string1 = "[typeId=";
      Throwable throwable0 = null;
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition(javaType0, "[typeId=", (Throwable) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [typeId=
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(boolean0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1._createObjectIdMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      Class<ObjectNode> class0 = ObjectNode.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNotNull(serializationConfig0);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      assertNotNull(defaultSerializerProvider_Impl1);
      
      Class<Object> class0 = Object.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Dn8[T3.", "Dn8[T3.");
      assertEquals("java.sql.SQLSyntaxErrorException: Dn8[T3.", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Dn8[T3.", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Dn8[T3.", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[r=)L", "[r=)L", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: Dn8[T3.", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Dn8[T3.", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Dn8[T3.", sQLSyntaxErrorException0.getMessage());
      assertEquals("[r=)L", sQLNonTransientException0.getSQLState());
      assertEquals("[r=)L", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: [r=)L", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLNonTransientException0);
      assertEquals("java.sql.SQLSyntaxErrorException: Dn8[T3.", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Dn8[T3.", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Dn8[T3.", sQLSyntaxErrorException0.getMessage());
      assertEquals("[r=)L", sQLNonTransientException0.getSQLState());
      assertEquals("[r=)L", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: [r=)L", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: [r=)L", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      boolean boolean0 = defaultSerializerProvider_Impl1.hasSerializerFor(class0, atomicReference0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      assertEquals("java.sql.SQLSyntaxErrorException: Dn8[T3.", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Dn8[T3.", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Dn8[T3.", sQLSyntaxErrorException0.getMessage());
      assertEquals("[r=)L", sQLNonTransientException0.getSQLState());
      assertEquals("[r=)L", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: [r=)L", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.lang.NullPointerException", atomicReference0.toString());
      assertFalse(boolean0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<ObjectNode> class0 = ObjectNode.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertEquals("null", atomicReference0.toString());
      assertNotNull(atomicReference0);
      
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertEquals("java.lang.NullPointerException", atomicReference0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      SerializationConfig serializationConfig0 = null;
      SerializerFactory serializerFactory0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = null;
      try {
        defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1, (SerializationConfig) null, (SerializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }
}
