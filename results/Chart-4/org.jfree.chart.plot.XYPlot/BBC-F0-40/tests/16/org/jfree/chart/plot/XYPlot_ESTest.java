/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:50:09 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.ScrollPane;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.MouseEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.math.BigInteger;
import java.text.AttributedCharacterIterator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JPasswordField;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.plaf.synth.SynthSeparatorUI;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTick;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTick;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.StandardTickUnitSource;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYCrosshairState;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, 10, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.getDomainGridlinePaint();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle2D0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ocz WR(<[f[dr");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      xYDifferenceRenderer0.lookupSeriesStroke(10);
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(213, 500);
      xYPlot0.canSelectByRegion();
      xYPlot0.setDataset(15, (XYDataset) null);
      XYPlot xYPlot1 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getFrame();
      xYPlot1.calculateAxisSpace(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimeZone timeZone0 = TimeZone.getTimeZone("6z=.!5~w)U=4Zu");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      combinedDomainXYPlot0.indexOf(timeTableXYDataset0);
      combinedDomainXYPlot0.isDomainPannable();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      Font font0 = subCategoryAxis0.getTickLabelFont();
      JFreeChart jFreeChart0 = new JFreeChart("", font0, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.zoomDomainAxes(0.8300000000000001, plotRenderingInfo0, (Point2D) point2D_Float0, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LinkedList<CandlestickRenderer> linkedList0 = new LinkedList<CandlestickRenderer>();
      TreeSet<NumberTick> treeSet0 = new TreeSet<NumberTick>();
      combinedRangeXYPlot0.getDomainAxisLocation(542);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.rendererChanged((RendererChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      combinedDomainXYPlot0.indexOf(defaultXYZDataset0);
      combinedDomainXYPlot0.isDomainPannable();
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.zoomDomainAxes((double) 500, plotRenderingInfo0, (Point2D) point2D_Float0, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.removeChangeListener(combinedDomainXYPlot0);
      combinedDomainXYPlot0.setParent(combinedRangeXYPlot0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0);
      combinedRangeXYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getRangeBounds(false);
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'offset' argument.", (Range) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 1.0F, moduloAxis0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, moduloAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxis((-1297), (-5261));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0F, 1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) point2D_Double0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      statisticalLineAndShapeRenderer0.findRangeBounds(defaultCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("FHt/1yC", (Range) null);
      valueAxisArray0[0] = (ValueAxis) moduloAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 500);
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.ROOT;
      PeriodAxis periodAxis0 = new PeriodAxis("FHt/1yC", fixedMillisecond0, fixedMillisecond0, zoneInfo0, locale0);
      valueAxisArray0[2] = (ValueAxis) periodAxis0;
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0F, 1.0F);
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis1;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRenderer(1, (XYItemRenderer) candlestickRenderer0, false);
      JFreeChart jFreeChart0 = new JFreeChart("|V", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 42, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<DefaultXYItemRenderer> vector0 = new Vector<DefaultXYItemRenderer>();
      JTree jTree0 = new JTree(vector0);
      jTree0.getRowBounds(15);
      combinedDomainXYPlot0.drawZeroDomainBaseline(graphics2D0, (Rectangle2D) null);
      combinedDomainXYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.77, 2.5E7, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedRangeXYPlot0.addRangeMarker(212, (Marker) intervalMarker0, (Layer) null, true);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker(10, (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.getRangeMarkers(500, (Layer) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      Second second0 = new Second();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      combinedDomainXYPlot0.addDomainMarker(59, (Marker) categoryMarker0, layer0, true);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'marker' not permitted.", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.setEntityCollection(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, (double) 1.0F, 1817.7857, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(729.7F, 0.0F, 2.0F, 0.0F);
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Float0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      combinedDomainXYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainAxisIndex(cyclicNumberAxis0);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(589.24501455);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)21845;
      shortArray0[2] = (short)1667;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1167;
      shortArray0[5] = (short)13944;
      shortArray0[6] = (short) (-2924);
      shortArray0[7] = (short)3;
      shortArray0[8] = (short) (-2002);
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(10, shortArray0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
      BasicStroke basicStroke0 = new BasicStroke();
      combinedDomainXYPlot0.drawVerticalLine(graphics2D0, rectangle2D0, (short) (-1), basicStroke0, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.getQuadrantOrigin();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setQuadrantPaint(2, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot1.getDomainAxisLocation(3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      JTableHeader jTableHeader0 = new JTableHeader((TableColumnModel) null);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(10);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+";
      stringArray0[1] = "='UN->`V";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      combinedDomainXYPlot0.select(1.0E-8, 0.5235987755982988, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(layer0);
      stackedAreaRenderer0.notifyListeners(rendererChangeEvent0);
      stackedAreaRenderer0.getSeriesFillPaint(1);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 500, 10, 15, 10, 1914, 10, true, true, true, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, (double) 10, plotRenderingInfo0, (Point2D) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      XYSeries xYSeries0 = new XYSeries("&eUc", true, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      NumberAxis numberAxis0 = new NumberAxis("o8EWqz`S:kB*My92");
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0.0F;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.0E-8;
      doubleArray2[1] = 0.2;
      doubleArray2[2] = 0.2;
      doubleArray2[3] = (double) stackedBarRenderer0.ZERO;
      doubleArray2[4] = 0.05;
      doubleArray2[5] = 3.0;
      doubleArray2[6] = (double) 500;
      doubleArray2[7] = (-2520.9465049);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 2.0F;
      doubleArray3[1] = 0.2;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = 1.0E-8;
      doubleArray3[4] = (double) stackedBarRenderer0.ZERO;
      doubleArray3[5] = (double) 2.0F;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.05;
      doubleArray4[1] = 0.05;
      doubleArray4[2] = 10.0;
      doubleArray4[3] = (double) 2.0F;
      doubleArray4[4] = 0.05;
      doubleArray4[5] = 3.0;
      doubleArray4[6] = 0.05;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.05;
      doubleArray5[1] = 0.05;
      doubleArray5[2] = 1.0E-8;
      doubleArray5[3] = (double) stackedBarRenderer0.ZERO;
      doubleArray5[4] = (-2520.9465049);
      doubleArray5[5] = 0.05;
      doubleArray5[6] = (double) 2.0F;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 3.0;
      doubleArray6[1] = (double) 2.0F;
      doubleArray6[2] = (double) xYDotRenderer0.ZERO;
      doubleArray6[3] = 0.05;
      doubleArray6[4] = 0.2;
      doubleArray6[5] = (double) 2.0F;
      doubleArray6[6] = 3.0;
      doubleArray6[7] = 1.0E-8;
      doubleArray6[8] = 10.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = stackedBarRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      ModuloAxis moduloAxis0 = new ModuloAxis(".b?`Wx*!eDf<=", range0);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, numberAxis0, moduloAxis0, xYDotRenderer0);
      xYPlot0.getDataRange(numberAxis0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point(2, 500);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 221, 52, 1900, 221, 6, 63, false, false, true, true, true, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      Rectangle2D rectangle2D0 = combinedRangeXYPlot0.DEFAULT_INSETS.createAdjustedRectangle(rectangle0, lengthAdjustmentType0, lengthAdjustmentType0);
      combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 10, numberAxis3D0, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE, numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      TimeSeries timeSeries0 = new TimeSeries(300);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      combinedDomainXYPlot0.indexOf(timeSeriesCollection0);
      BasicStroke basicStroke0 = (BasicStroke)PolarPlot.DEFAULT_GRIDLINE_STROKE;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(rectangle0, basicStroke0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      ArrayList<CategoryAxis> arrayList0 = new ArrayList<CategoryAxis>();
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle0, arrayList0);
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, 221, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 10, 10, 10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      combinedRangeXYPlot0.getRangeMarkers((Layer) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0, 1);
      combinedDomainXYPlot0.clearSelection();
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRenderer(1720);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      xYPlot0.select((GeneralPath) null, (Rectangle2D) null, (RenderingSource) chartPanel0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("0On.ajh:l]<N");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      Stroke stroke0 = combinedDomainCategoryPlot0.getRangeCrosshairStroke();
      xYPlot0.setRangeGridlineStroke(stroke0);
      combinedDomainCategoryPlot0.getFixedRangeAxisSpace();
      xYPlot0.calculateDomainAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
      // Undeclared exception!
      try { 
        xYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, (-2053.4352413766655), subCategoryAxis0.DEFAULT_AXIS_LINE_STROKE, combinedDomainCategoryPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LinkedList<CandlestickRenderer> linkedList0 = new LinkedList<CandlestickRenderer>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      PeriodAxis periodAxis0 = new PeriodAxis(" LICENCE TERMS:");
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(8);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, xYSplineRenderer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " LICENCE TERMS:");
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      xYPlot0.setDataset(913297643, (XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0F, 1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      scatterRenderer0.findRangeBounds(defaultCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      valueAxisArray0[0] = (ValueAxis) moduloAxis0;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(500, (Marker) valueMarker0, layer0, false);
      combinedRangeXYPlot0.isDomainCrosshairVisible();
      BasicStroke basicStroke0 = new BasicStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, 1.0E-8, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.removeDomainMarker(500, (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 10, 10, 10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      // Undeclared exception!
      combinedDomainXYPlot0.setRenderer(1089609930, (XYItemRenderer) xYErrorRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 10, 10, 10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'tasks' argument.", 500, 10);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, numberAxis3D0, numberAxis3D0, xYAreaRenderer2_0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(0.05, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LinkedList<CandlestickRenderer> linkedList0 = new LinkedList<CandlestickRenderer>();
      DateAxis dateAxis0 = new DateAxis("");
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, dateAxis0, xYDotRenderer0);
      xYPlot0.getSeriesRenderingOrder();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point point0 = new Point(500, 41);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.8600000000000001, 3237.42347734764);
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.getAnchor();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes(5.0E-4, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JViewport jViewport0 = new JViewport();
      Point point0 = new Point();
      Point point1 = jViewport0.toViewCoordinates(point0);
      combinedRangeXYPlot0.panRangeAxes(4.0, plotRenderingInfo0, point1);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 2.0F);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 0.05);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.05);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, numberAxis3D0, numberAxis3D0, candlestickRenderer0);
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(0, (XYDataset) xYSeriesCollection0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      xYPlot0.setQuadrantPaint(3, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      xYPlot0.isDomainCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, ";o");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      combinedDomainXYPlot0.setRenderer(2839, (XYItemRenderer) xYLineAndShapeRenderer0, true);
      combinedDomainXYPlot0.getSeriesCount();
      Integer integer0 = new Integer(1089609930);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point(2, 500);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 2228, 2, 10, 2228, 10, 10, false, true, true, false, true, true, false);
      chartPanel0.getVisibleRect();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      candlestickRenderer0.getSeriesItemLabelsVisible(1610);
      combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.getDomainAxisEdge(80);
      combinedRangeXYPlot0.getRangeAxis();
      IntervalMarker intervalMarker0 = new IntervalMarker(100.0, 1.0);
      combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      intervalMarker0.notifyListeners(markerChangeEvent0);
      Layer layer0 = Layer.FOREGROUND;
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      PropertyResourceBundle propertyResourceBundle0 = (PropertyResourceBundle)PolarPlot.localizationResources;
      XYPlot.localizationResources = (ResourceBundle) propertyResourceBundle0;
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      combinedDomainXYPlot2.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.setRangeCrosshairPaint(logAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot1.getFixedLegendItems();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateAxisSpace((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "77UrCp");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, dateAxis0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Qy");
      extendedCategoryAxis0.getPlot();
      JFreeChart jFreeChart1 = null;
      try {
        jFreeChart1 = new JFreeChart("O>vO&QEGd,iJ6Uqy", (Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(5.6976852, 10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      combinedRangeXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, layer0, true);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      combinedRangeXYPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0);
      combinedRangeXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 2.0F);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 0.05);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(4.0);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, numberAxis3D0, numberAxis3D0, candlestickRenderer0);
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      numberAxis3D0.setAutoTickUnitSelection(false, false);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(0, (XYDataset) xYSeriesCollection0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      xYPlot0.getDomainAxis();
      xYPlot0.canSelectByPoint();
      jFreeChart0.createBufferedImage(4, 249);
      BasicStroke basicStroke0 = null;
      try {
        basicStroke0 = new BasicStroke(0, 10, 500, 0.5F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal end cap value
         //
         verifyException("java.awt.BasicStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      combinedDomainXYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(953, 953);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1306), 7, 1397, (-1893), (-1059), 2, false, true, false, true, false, false, true);
      Rectangle rectangle1 = chartPanel0.getVisibleRect();
      GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle1, (RenderingSource) chartPanel0);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10, standardXYZToolTipGenerator0, (XYURLGenerator) null);
      stackedXYAreaRenderer0.getShapeStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair(graphics2D0, rectangle0, plotOrientation0, 0.0F, numberAxis0, (Stroke) null, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AffineTransform.getRotateInstance(1.0E-8, 1921.86328125, 1455.0, (double) 10);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 0.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1455.0, 10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, 0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/(VGxxL7/L";
      stringArray0[1] = "/(VGxxL7/L";
      stringArray0[2] = "/(VGxxL7/L";
      stringArray0[3] = "/(VGxxL7/L";
      stringArray0[4] = "/(VGxxL7/L";
      stringArray0[5] = "/(VGxxL7/L";
      stringArray0[6] = "/(VGxxL7/L";
      TextAnchor textAnchor0 = TextAnchor.BOTTOM_RIGHT;
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      SymbolAxis symbolAxis0 = new SymbolAxis("/(VGxxL7/L", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(symbolAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot1.addRangeMarker(0, (Marker) intervalMarker0, layer0, false);
      combinedRangeXYPlot1.removeRangeMarker(3, (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot1.clearDomainAxes();
      Point2D.Double point2D_Double0 = new Point2D.Double(500, 1363.722886567436);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(0.05, (PlotRenderingInfo) null, (Point2D) point2D_Double0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clear();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getDialOutlinePaint();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      TimeZone timeZone0 = TimeZone.getTimeZone("US0lDzZk6~!ul ~w>");
      DateAxis dateAxis1 = new DateAxis("Em[]f)]cN;NG", timeZone0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      fastScatterPlot0.getRangeGridlinePaint();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, dateAxis1, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 0.0, dateAxis0, defaultPolarItemRenderer0.DEFAULT_STROKE, fastScatterPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.getRangeAxis(0);
      combinedRangeXYPlot2.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<CandlestickRenderer> linkedList0 = new LinkedList<CandlestickRenderer>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5w]aS@(");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.drawQuadrants((Graphics2D) null, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 2.0F);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 0.05);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(4.0);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, numberAxis3D0, numberAxis3D0, candlestickRenderer0);
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(0, (XYDataset) xYSeriesCollection0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(4, 249);
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      ValueMarker valueMarker0 = new ValueMarker(5330, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT, basicStroke0, 0.0F);
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(249, (-156.007), numberAxis3D0.DEFAULT_TICK_MARK_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point(2, 500);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 2228, 2, 10, 2228, 10, 10, true, true, true, true, true, true, false);
      chartPanel0.getVisibleRect();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Marker marker0 = null;
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker(2134, (Marker) null, layer0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.addChangeListener(combinedRangeXYPlot0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart1 = new JFreeChart("org.jfree.chart.needle.LongNeedle", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, 1601, 15, 15, 523, 10, 2146237136, false, false, false, true, false, true, false);
      chartPanel0.getVisibleRect();
      combinedRangeXYPlot0.equals(combinedRangeXYPlot0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainMarkers();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)75;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.BACKGROUND;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYTaskDataset0, 0.0F);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.05);
      XYPlot xYPlot0 = new XYPlot(xYBarDataset0, numberAxis3D0, numberAxis3D0, candlestickRenderer0);
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
      xYPlot0.setDataset(2592, (XYDataset) xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.addChangeListener(combinedRangeXYPlot0);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart1 = new JFreeChart("org.jfree.chart.needle.LongNeedle", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, 1601, 15, 15, 523, 10, 2146237136, false, false, false, true, false, true, false);
      chartPanel0.getVisibleRect();
      xYPlot0.equals(combinedRangeXYPlot0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      int int0 = 304;
      PiePlot piePlot0 = new PiePlot();
      Paint paint0 = piePlot0.lookupSectionPaint(true, true);
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(10, xYPlot0.DEFAULT_GRIDLINE_PAINT, xYLineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE, paint0, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_STROKE, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      combinedDomainXYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(953, 953);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) numberAxis0, false);
      combinedRangeXYPlot1.isDomainCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.clearRangeMarkers(500);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(arrayList0);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      combinedDomainXYPlot0.configureRangeAxes();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, categoryAxis3D0, cyclicNumberAxis0, groupedStackedBarRenderer0);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.getDomainAxis();
      combinedDomainXYPlot0.canSelectByPoint();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((-1954), (Marker) categoryMarker0, layer0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      boolean boolean0 = new Boolean(true);
      combinedDomainXYPlot0.removeRangeMarker(5320, (Marker) categoryMarker0, layer0, true);
      combinedDomainXYPlot0.clearDomainMarkers((-1954));
      combinedDomainXYPlot0.getDatasetRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((-1954), (Marker) categoryMarker0, layer0, false);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      combinedDomainXYPlot0.addDomainMarker((-1954), (Marker) categoryMarker0, layer0, false);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      standardXYItemRenderer0.lookupLegendTextPaint(4575);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((-1954), (Marker) categoryMarker0, layer0, false);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      combinedDomainXYPlot0.removeDomainMarker((-1954), (Marker) categoryMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.blue;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 10;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 10;
      color0.getComponents(floatArray0);
      Color.getColor("jb:#X?VpVZicvQ(Ldm");
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(color0);
      combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The index value (");
      combinedRangeXYPlot0.getDatasetCount();
      combinedRangeXYPlot0.setBackgroundAlpha(1.0F);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("'W0~E3Sx0>y", 1.0F, 0.8300000000000001, 10);
      xYPointerAnnotation0.setArrowWidth((-4206.9137696609));
      Stroke stroke0 = xYPointerAnnotation0.getArrowStroke();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(stroke0);
      combinedRangeXYPlot0.getDomainAxis(1);
      combinedRangeXYPlot0.setRangeCrosshairValue((-3237.3615239));
      System.setCurrentTimeMillis(1);
      combinedRangeXYPlot0.getRangeGridlinePaint();
      combinedRangeXYPlot0.datasetChanged((DatasetChangeEvent) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((-1954), (Marker) categoryMarker0, layer0, false);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      combinedDomainXYPlot0.removeDomainMarker((-1954), (Marker) categoryMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      combinedDomainXYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart("6oQ!J;(&JuS%(2", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      jFreeChart0.createBufferedImage(953, 953);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("6oQ!J;(&JuS%(2");
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setQuadrantPaint(0, extendedCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(3427);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeAxis(14, (ValueAxis) logAxis0, true);
      CategoryMarker categoryMarker0 = new CategoryMarker("", combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer0, true);
      combinedRangeXYPlot0.isDomainCrosshairVisible();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 212, 500, 2415, 5321, 15, 65535, true, false, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 5321, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)415;
      shortArray0[2] = (short)5316;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(381, shortArray0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D0, rectangle2D0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 10, 500, 15, false, true, true, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.handleClick(10, 200, plotRenderingInfo0);
      chartPanel0.getPropertyChangeListeners("org.jfree.chart.needle.LongNeedle");
      chartRenderingInfo0.clear();
      Point point0 = new Point(200, 1024);
      combinedDomainXYPlot0.zoomDomainAxes((double) 200, (double) 500, plotRenderingInfo0, (Point2D) point0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.clearRangeMarkers();
      combinedDomainXYPlot1.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TextBlock textBlock0 = new TextBlock();
      TextBox textBox0 = new TextBox(textBlock0);
      RectangleInsets rectangleInsets0 = textBox0.getInteriorGap();
      combinedDomainXYPlot0.setInsets(rectangleInsets0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.clearDomainAxes();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 16);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      Vector<DefaultHeatMapDataset> vector0 = new Vector<DefaultHeatMapDataset>();
      combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D0, vector0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, (double) 1.0F, (double) 10);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(792.531);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.9);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.add(xYPlot0, 42);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-502), (ValueAxis) cyclicNumberAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      ValueMarker valueMarker0 = new ValueMarker(95.10431819, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      LogAxis logAxis0 = new LogAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeDomainMarker((-865), (Marker) valueMarker0, layer0, false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0E-8, 1932.2);
      combinedDomainXYPlot1.zoomDomainAxes(0.7100000000000001, (PlotRenderingInfo) null, (Point2D) point2D_Double0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.clearDomainAxes();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.8700000000000001, 0.0F);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot2.removeDomainMarker((Marker) valueMarker0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("TKt)", cyclicXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 953);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("TKt)");
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      Color color0 = (Color)CategoryPlot.DEFAULT_GRIDLINE_PAINT;
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 10.0, basicStroke0, color0);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(rectangle0, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      combinedDomainXYPlot0.configureRangeAxes();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, extendedCategoryAxis0, (ValueAxis) null, groupedStackedBarRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot2.drawDomainCrosshair(graphics2D0, rectangle0, plotOrientation0, 1.0F, (ValueAxis) null, basicStroke0, categoryPlot0.DEFAULT_CROSSHAIR_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.addChangeListener(combinedRangeXYPlot0);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart1 = new JFreeChart("'$ W2~+i(Y%eXSA", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, 1601, 15, 15, 523, 10, 2146237136, false, false, false, true, false, true, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      DateAxis dateAxis0 = new DateAxis("org.jfree.data.DefaultKeyedValues2D");
      dateAxis0.setVisible(false);
      GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      generalPath0.clone();
      xYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      LinkedList<DateTick> linkedList0 = new LinkedList<DateTick>();
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToRangeAxes((-1176), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getWeight();
      xYPlot0.getRenderer(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0, 0.75, (-1.0), (-1615.5), xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_PAINT);
      xYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clone();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(10, 0.7000000000000001);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null 'marker' not permitted.");
      xYPlot0.zoomDomainAxes(0.7000000000000001, plotRenderingInfo0, (Point2D) point2D_Double0);
      plotRenderingInfo0.clone();
      Point2D.Double point2D_Double1 = new Point2D.Double(0.8500000000000001, 246.952);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) point2D_Double1, false);
      IntervalMarker intervalMarker0 = new IntervalMarker((-822.3116938), 10);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getItemOutlineStroke(365, (-946), true);
      IntervalMarker intervalMarker0 = new IntervalMarker(1375.476269, 1375.476269, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, stroke0, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker((-946), (Marker) intervalMarker0, layer0, false);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D1);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(1.0F, 0.05);
      combinedDomainXYPlot0.zoomDomainAxes(0.8700000000000001, plotRenderingInfo0, (Point2D) point2D_Double0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.clearDomainAxes();
      IntervalMarker intervalMarker1 = new IntervalMarker(1.0E-8, 0.0);
      combinedRangeXYPlot1.removeDomainMarker((Marker) intervalMarker1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      combinedRangeXYPlot0.getDomainAxis(1094795585);
      combinedRangeXYPlot0.getAnnotations();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double(2836.0, 2.0F);
      combinedRangeXYPlot0.zoomRangeAxes((-1207.2), 2500.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.isRangeCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(7.2E7);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1115.106, (-1474.8626161280604));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2243.793111372, 3.4028234663852886E38);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(1790, (Marker) intervalMarker0, (Layer) null, true);
      combinedRangeXYPlot0.equals((Object) null);
      combinedRangeXYPlot0.removeRangeMarker(2, (Marker) intervalMarker0, (Layer) null);
      defaultValueDataset0.validateObject();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(5.0E10);
      combinedRangeXYPlot0.getDomainAxis(2);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, (double) 1.0F, (double) 10);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(792.531);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.9);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(2, (Marker) intervalMarker0, layer0, false);
      xYPlot0.equals(layer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis(0);
      combinedRangeXYPlot0.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getSeriesRenderingOrder();
      xYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart("Zs_cnno0\"<'", numberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      LogAxis logAxis0 = new LogAxis("Zs_cnno0\"<'");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) logAxis0, true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 1776);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      xYPlot0.drawAnnotations(graphics2D0, rectangle2D_Double0, (PlotRenderingInfo) null);
      xYPlot0.setRangeGridlinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 252, 4, 3134, 15, 0, false, true, false, false, false, true, true);
      combinedRangeXYPlot0.select((GeneralPath) null, (Rectangle2D) rectangle2D_Double0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      combinedDomainXYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      jFreeChart0.createBufferedImage(953, 953);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      ValueMarker valueMarker0 = new ValueMarker(454.931640625, numberAxis0.DEFAULT_AXIS_LINE_PAINT, extendedCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((-1), (Marker) valueMarker0, (Layer) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 10, 10, 10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      LinkedList<CandlestickRenderer> linkedList0 = new LinkedList<CandlestickRenderer>();
      Point point0 = new Point((-1055), 753);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.panRangeAxes(1569, plotRenderingInfo0, point0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      combinedRangeXYPlot0.isDomainCrosshairVisible();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(1916, layer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      int int0 = 1238;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(1238, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.configureRangeAxes();
      DateAxis dateAxis0 = new DateAxis();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYSeries xYSeries0 = new XYSeries(xYBlockRenderer0.ZERO, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1538.4267392697);
      xYSeriesCollection0.addChangeListener(combinedRangeXYPlot0);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, dateAxis0, dateAxis0, xYBlockRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("m#62!nJ%r 9|g", combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1253), 634, 1457, 3633, (-1928), (-1799), true, true, false, true, true, false, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      dateAxis0.setVisible(false);
      GeneralPath generalPath0 = new GeneralPath(xYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      xYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      cyclicXYItemRenderer0.setPlotImages(false);
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(4674);
      combinedRangeXYPlot0.setDomainAxisLocation(56, axisLocation1, false);
      combinedRangeXYPlot1.getQuadrantPaint(3);
      combinedRangeXYPlot0.getRendererCount();
      combinedRangeXYPlot1.setRangeAxis(90, (ValueAxis) null, false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      combinedRangeXYPlot0.configureRangeAxes();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      combinedDomainXYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      jFreeChart0.createBufferedImage(953, 953);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Stack<SystemColor> stack0 = new Stack<SystemColor>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes((-1), stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      // Undeclared exception!
      xYPlot0.setRenderer(941032160, (XYItemRenderer) xYStepAreaRenderer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.clearRangeMarkers(500);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point point0 = new Point(500, 41);
      combinedRangeXYPlot0.panRangeAxes(500, plotRenderingInfo0, point0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[2] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[3] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[4] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[5] = (ValueAxis) numberAxis3D0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      combinedRangeXYPlot0.clearDomainMarkers((-1555));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeZoomable();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-596), (ValueAxis) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.isDomainCrosshairVisible();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(Double.POSITIVE_INFINITY, 1.0F, 1.01, 1.0F);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      chartPanel0.getPopupLocation((MouseEvent) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(5331, (XYDataset) yIntervalSeriesCollection0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("MMM-yyyy");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getErrorIndicatorPaint();
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle rectangle0 = new Rectangle();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Point point0 = new Point(2, 500);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 2228, 2, (-1407), 2228, 1134, 51, true, true, false, true, true, false, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 0, numberAxis3D0, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-363.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getRangeMarkers(10, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeCrosshairStroke(combinedRangeXYPlot1.DEFAULT_GRIDLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 10, 500, 15, false, true, true, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo0.clear();
      Point point0 = new Point(200, 1024);
      combinedDomainXYPlot0.zoomDomainAxes((double) 200, (double) 500, plotRenderingInfo0, (Point2D) point0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D1);
      combinedDomainXYPlot1.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) point0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      ChartRenderingInfo chartRenderingInfo1 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(909, 10, chartRenderingInfo1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      SynthSeparatorUI synthSeparatorUI0 = new SynthSeparatorUI();
      Dimension dimension0 = synthSeparatorUI0.getMaximumSize(chartPanel0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      jFreeChart0.clearSubtitles();
      Stack<NumberTick> stack0 = new Stack<NumberTick>();
      xYPlot0.drawDomainTickBands(graphics2D0, rectangle0, stack0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.91, 1862.042231196909, 0.0F, 500, legendTitle0);
      xYPlot0.getDomainAxis(961028594);
      xYPlot0.getAnnotations();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      chartRenderingInfo0.setEntityCollection(standardEntityCollection0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.05, (-155.6179996));
      xYPlot0.zoomRangeAxes((-155.6179996), (double) 0.5F, plotRenderingInfo0, (Point2D) point2D_Double0);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.removeRangeMarker(500, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.8400000000000001, 2.5E-6);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      spiderWebPlot0.getSeriesOutlineStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      combinedRangeXYPlot0.setRangeAxis(961028594, (ValueAxis) logAxis0, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point point0 = new Point(500, 41);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 51, 500, 6, 10, 41, 500, false, true, true, true, false, true, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 680, numberAxis3D0, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle rectangle0 = new Rectangle(2, (-1189));
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 1.0F, 0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1.0), 0.05, 0.1);
      affineTransform0.inverseTransform(point2D0, point2D0);
      affineTransform0.deltaTransform(point2D0, point2D0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, (-1712.46), 0.4, 0.8600000000000001);
      combinedRangeXYPlot0.setQuadrantOrigin(point2D0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, false);
      combinedDomainXYPlot0.isDomainPannable();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_TICK_LABEL_INSETS);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-1), (ValueAxis) numberAxis3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-5), (Marker) categoryMarker0, layer0);
      chartRenderingInfo0.getPlotInfo();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, (double) 1.0F, (double) 10);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.67, 4.0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3090.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(xYAreaRenderer2_0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      stackedXYAreaRenderer2_0.setOutline(false);
      stackedXYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      legendTitle0.getItemContainer();
      combinedDomainXYPlot0.getDomainAxis((-596));
      combinedDomainXYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.addChangeListener(combinedRangeXYPlot0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDataset((-67), (XYDataset) timeTableXYDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle rectangle0 = new Rectangle(2, (-1189));
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 1.0F, 0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1.0), 0.05, 0.1);
      affineTransform0.inverseTransform(point2D0, point2D0);
      affineTransform0.deltaTransform(point2D0, point2D0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, (-1712.46), 0.4, 0.8600000000000001);
      combinedRangeXYPlot0.setQuadrantOrigin(point2D0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      String string0 = "";
      combinedDomainXYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(953, 953);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      // Undeclared exception!
      combinedRangeXYPlot1.setDomainAxis(1073741824, (ValueAxis) numberAxis0, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation1 = AxisLocation.BOTTOM_OR_LEFT;
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(categoryPlot0, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.renderer.xy.CandlestickRenderer");
      combinedDomainXYPlot0.getRangeAxisIndex((ValueAxis) null);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, false);
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle((-171), 10);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 1.0, 0.73);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.73, 577.0486070778, (-1252.334746086954));
      affineTransform0.deltaTransform(point2D0, point2D0);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-860.8034486188441), 0.18, 0.75, 10.0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      dateAxis0.setTimeline(segmentedTimeline0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      Date date0 = segmentedTimeline0.getDate(10);
      dateAxis0.DEFAULT_DATE_TICK_UNIT.addToDate(date0, segmentedTimeline0.DEFAULT_TIME_ZONE);
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.setAxisOffset(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
      TimeSeries timeSeries0 = new TimeSeries(2.0F);
      timeSeries0.fireSeriesChanged();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.handleClick(500, 5, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point point0 = new Point(500, 41);
      combinedRangeXYPlot0.panDomainAxes((-1701.274043824257), plotRenderingInfo0, point0);
      combinedRangeXYPlot0.getLegendItems();
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      combinedRangeXYPlot0.setRenderer(500, (XYItemRenderer) xYAreaRenderer2_0, false);
      JFreeChart jFreeChart0 = new JFreeChart("OuZ'", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 41, 10, (-2953), (-1695), (-2953), 10, false, true, true, false, false, true);
      chartPanel0.getZoomRectangle();
      PlotState plotState0 = new PlotState();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.draw((Graphics2D) null, (Rectangle2D) null, point0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10, xYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0);
      combinedDomainXYPlot0.getDomainAxis(10);
      // Undeclared exception!
      try { 
        xYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      combinedDomainXYPlot1.getRangeAxisLocation(10);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ") should be in the range 0 to 3.");
      combinedRangeXYPlot0.getRendererForDataset(timeSeriesCollection0);
      combinedDomainXYPlot1.setRenderer(10, (XYItemRenderer) null, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getErrorIndicatorPaint();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedRangeXYPlot0.getDomainCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      Stroke stroke0 = combinedRangeXYPlot0.getRangeGridlineStroke();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, stroke0, 0.0F);
      combinedRangeXYPlot0.canSelectByRegion();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.clone();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getSeriesCount();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      xYItemRendererArray0[0] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[5] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[6] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[7] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[8] = (XYItemRenderer) standardXYItemRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 2500000.0, "org.jfree.data.time.TimeSeriesTableModel");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.setDomainGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, (double) 1.0F, (double) 10);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(792.531);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.9);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation(0, (AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      combinedDomainXYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(953, 953);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.drawHorizontalLine(graphics2D0, rectangle0, 10, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, extendedCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent("", true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.rendererChanged(rendererChangeEvent0);
      combinedDomainXYPlot1.configureRangeAxes();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultMultiValueCategoryDataset0, extendedCategoryAxis0, numberAxis0, groupedStackedBarRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      combinedRangeXYPlot1.drawDomainCrosshair(graphics2D0, rectangle0, plotOrientation0, 0.2, numberAxis0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot1.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ocz WR(<[f[dr");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AffineTransform.getRotateInstance((double) 10, (double) xYDifferenceRenderer0.ZERO, 1.0E-8);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle((-127), (-3783));
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer((-496.40057));
      NumberAxis numberAxis0 = new NumberAxis();
      XYPlot xYPlot1 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis0, xYBarRenderer0);
      xYPlot0.isRangeCrosshairVisible();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.getOrientation();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-3783));
      ThermometerPlot thermometerPlot1 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot1.setSubrangePaint((-127), spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      thermometerPlot1.getOrientation();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      xYPlot0.setOrientation(plotOrientation0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-2334.935), (-2334.935), (-2334.935));
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      LegendTitle legendTitle0 = new LegendTitle(xYAreaRenderer2_0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(808.1568294223201, (-2334.935), (-2321.0), 510.8043347509109, blockContainer0);
      xYPlot0.equals(affineTransform0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker(3426, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 10, 10, 10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'annotation' argument.");
      numberAxis3D0.setTickLabelPaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.setRangeAxis(2, (ValueAxis) numberAxis3D0, false);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-36), 93, 1284, 10, 2, (-3715), true, false, false, false, false, false, false);
      Point point0 = chartPanel0.getLocation();
      combinedRangeXYPlot0.panDomainAxes(1.0F, plotRenderingInfo0, point0);
      combinedRangeXYPlot1.getFixedLegendItems();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.clearRangeMarkers(10);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis numberAxis0 = new NumberAxis();
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      numberAxis0.setAxisLineVisible(true);
      xYPlot0.setDomainAxes(valueAxisArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500, 500);
      cyclicNumberAxis0.setTickMarkPaint(numberAxis0.DEFAULT_AXIS_LINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.configureRangeAxes();
      DateAxis dateAxis0 = new DateAxis();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYSeries xYSeries0 = new XYSeries(0.05, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-663.8));
      XYPlot xYPlot1 = new XYPlot(xYBarDataset0, dateAxis0, dateAxis0, xYBlockRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Lp4_uV(V*90*;eb?u{", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 3633, 3, 66, 10, 3, 220, true, false, false, true, true, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      GeneralPath generalPath0 = new GeneralPath(xYBlockRenderer0.DEFAULT_SHAPE);
      // Undeclared exception!
      try { 
        xYPlot1.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 500, 1, 10, 15, 10, 861565296, true, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo0.clear();
      Point point0 = new Point(10, (-1179));
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(100, (-2065), simpleTimeZone0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", mockSimpleDateFormat0, numberFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, standardXYURLGenerator0);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, stackedXYAreaRenderer2_0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.DynamicTimeSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.configureRangeAxes();
      DateAxis dateAxis0 = new DateAxis();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYSeries xYSeries0 = new XYSeries(0.05, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-663.8));
      XYPlot xYPlot1 = new XYPlot(xYBarDataset0, dateAxis0, dateAxis0, xYBlockRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Swx_YF]W-Rjt^[", combinedRangeCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, xYPlot1, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-3149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-3149) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("cITG7tA5^");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer(xYDifferenceRenderer0.DEFAULT_OUTLINE_PAINT, xYDifferenceRenderer0.DEFAULT_PAINT, false);
      XYPlot xYPlot1 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer1);
      Line2D.Double line2D_Double0 = new Line2D.Double(0.05, 0.0F, 10, (-1077.0));
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesURLGenerator(10);
      candlestickRenderer0.getSeriesURLGenerator(10);
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) null);
      line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, false);
      xYDifferenceRenderer1.lookupSeriesOutlineStroke(0);
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.clearRangeMarkers();
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(0.0, (-2078.05112412372), xYPlot1.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_GRIDLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, 485.2F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.clearRangeMarkers(10);
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      cyclicNumberAxis0.setTickMarkPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      combinedDomainXYPlot1.setFixedDomainAxisSpace((AxisSpace) null, false);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point point0 = new Point(500, 41);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(458.32635383, (double) 500, (double) 0.5F);
      Point2D point2D0 = affineTransform0.deltaTransform((Point2D) point0, (Point2D) point0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo2 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomDomainAxes(0.0, plotRenderingInfo2, point2D0);
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      combinedRangeXYPlot0.zoomRangeAxes(3477.2846, plotRenderingInfo0, (Point2D) point0, false);
      int int0 = 250;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 250 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ocz WR(<[f[dr");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10, (double) xYDifferenceRenderer0.ZERO, 1.0E-8);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.getDomainMarkers(layer0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle(1896, 192);
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 1.0F, 1295.9386605);
      AffineTransform.getRotateInstance(0.4, (double) 2.0F, 1386.89728138);
      Point2D point2D1 = affineTransform0.deltaTransform(point2D0, point2D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D1);
      numberAxis3D0.setTickLabelPaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.setRangeAxis(1309, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.panDomainAxes(0.0, plotRenderingInfo0, point2D1);
      combinedRangeXYPlot0.getFixedLegendItems();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1.0, 0.7100000000000001, (double) 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle(10, 920350135);
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 10, (-4954.239680407));
      AffineTransform.getRotateInstance(0.1, (-858.01), (double) 920350135);
      affineTransform0.deltaTransform(point2D0, point2D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      xYPlot0.getDomainAxisIndex(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ocz WR(<[f[dr");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(46, 500);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-448.32), "");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = statisticalBarRenderer0.getErrorIndicatorPaint();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 1.0F, xYPlot0.DEFAULT_GRIDLINE_STROKE, paint0);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYDifferenceRenderer0, true);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      combinedDomainXYPlot0.configureRangeAxes();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ocz WR(<[f[dr");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AffineTransform.getRotateInstance((double) 10, (double) xYDifferenceRenderer0.ZERO, 1.0E-8);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle((-3150), 10);
      spiderWebPlot0.getWebPoint(rectangle0, 0.9500000000000001, 0.0F);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      xYPlot0.getRangeAxisLocation(0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRendererForDataset(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      AffineTransform.getRotateInstance((double) 1.0F, (double) 10, (double) 1.0F, (double) 10);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(792.531);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.9);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(2, (Marker) intervalMarker0, layer0, false);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      xYPlot0.equals(layer0);
      combinedRangeXYPlot0.removeRangeMarker(2, (Marker) intervalMarker0, layer0);
      ICC_ColorSpace iCC_ColorSpace0 = null;
      try {
        iCC_ColorSpace0 = new ICC_ColorSpace((ICC_Profile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.color.ICC_ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getDialBackgroundPaint();
      xYPlot0.setDomainMinorGridlinePaint(paint0);
      xYPlot0.getRangeAxisLocation(270);
      xYPlot0.configureDomainAxes();
      xYPlot0.isDomainZoomable();
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint((-565), meterPlot0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-565) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ocz WR(<[f[dr");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AffineTransform.getRotateInstance((double) 10, (double) xYDifferenceRenderer0.ZERO, 1.0E-8);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle((-127), (-3783));
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot1.getWebPoint(rectangle0, 10.0, 0.0F);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, (-1.0), (double) 500);
      affineTransform0.setToShear(0.88, 10);
      Point2D point2D1 = affineTransform0.deltaTransform(point2D0, point2D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      xYPlot0.zoomDomainAxes(0.05, plotRenderingInfo0, point2D1);
      xYPlot0.isDomainGridlinesVisible();
      xYPlot0.zoomRangeAxes(9.0, plotRenderingInfo1, point2D0, true);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ocz WR(<[f[dr");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10, (double) xYDifferenceRenderer0.ZERO, 1.0E-8);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.getDomainMarkers(layer0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle(1896, 192);
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 1.0F, 1295.9386605);
      AffineTransform.getRotateInstance(0.4, (double) 2.0F, 1386.89728138);
      Point2D point2D1 = affineTransform0.deltaTransform(point2D0, point2D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      xYPlot0.zoomDomainAxes(0.01, plotRenderingInfo1, point2D1);
      xYPlot0.getDomainAxisIndex(numberAxis3D0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      double double0 = (-1701.274043824257);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point point0 = new Point(500, 41);
      IntervalMarker intervalMarker0 = new IntervalMarker((-1472.1221083), 3477.2846, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE, 0.5F);
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0);
      point0.x = 41;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-3666), (ValueAxis) numberAxis3D0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, (String) null);
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedDomainXYPlot0.addDomainMarker(233, (Marker) categoryMarker0, layer0, false);
      combinedDomainXYPlot0.configureRangeAxes();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.9, (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis1);
      combinedRangeXYPlot1.getDataRange(cyclicNumberAxis1);
      combinedRangeXYPlot1.removeDomainMarker(10, (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.mapDatasetToDomainAxis(10, 2204);
      combinedRangeXYPlot1.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.getRendererForDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'stroke' argument.", combinedDomainXYPlot2);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 3, 10, 500, 500, 10, false, false, false, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("ZOOM_IN_RANGE");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "8z')-5W~(_ Zaq");
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 420, 4.0, 1.02, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      bufferedImage0.createGraphics();
      combinedDomainXYPlot1.getRangeAxis((-1851));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("cITG7tA5^");
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, (-462.8503), numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      combinedRangeXYPlot0.getRangeAxisLocation(2);
      combinedRangeXYPlot0.getRendererForDataset((XYDataset) null);
      combinedRangeXYPlot0.setRangePannable(true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      NumberAxis numberAxis0 = new NumberAxis();
      JFreeChart jFreeChart0 = new JFreeChart(",'<xAY(g", numberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      jFreeChart0.createBufferedImage(500, 471);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(",'<xAY(g");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "2FF40RGP7");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getErrorIndicatorPaint();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_BACKGROUND_PAINT, false);
      DateAxis dateAxis0 = new DateAxis();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYPlot xYPlot1 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, xYBlockRenderer0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("fZ6|^* ", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(basicStroke0);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getPlotType();
      xYPlot0.getDataset((-2735));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.isRangeZoomable();
      combinedRangeXYPlot0.getDomainAxisLocation();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeZoomable();
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      combinedRangeXYPlot0.isDomainCrosshairVisible();
      combinedRangeXYPlot0.getRangeAxis(1068346136);
      xYPlot0.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYPlot0.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis numberAxis0 = new NumberAxis();
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      numberAxis0.setAxisLineVisible(true);
      xYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.setDomainGridlineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxisArray0[0]);
      combinedDomainXYPlot0.getSeriesCount();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.005);
      xYItemRendererArray0[0] = (XYItemRenderer) candlestickRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.getSeriesItemLabelPaint(0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      xYPlot0.canSelectByRegion();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.clone();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getSeriesCount();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[0];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.setDomainGridlinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.setRangeGridlinePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 10, (String) null);
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(4.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.25, 2);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxisArray0[3]);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDataRange(valueAxisArray0[3]);
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(combinedDomainXYPlot1.DEFAULT_GRIDLINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getRangeGridlinePaint();
      combinedDomainXYPlot2.getPlotType();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.removeAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'rigin' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(19, (ValueAxis) numberAxis3D0, true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.getDataRange(numberAxis3D0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(1767, 1132, 0.7100000000000001, 0.89, chartRenderingInfo1);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getAnnotations();
      chartRenderingInfo1.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double((-241.3286248977), (-493.0));
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo2);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.zoomRangeAxes(0.89, (double) 0.0F, plotRenderingInfo0, (Point2D) point2D_Double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.9345000000000001) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 10, 500, 15, false, true, true, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo0.clear();
      Point point0 = new Point(200, 1024);
      combinedDomainXYPlot0.zoomDomainAxes((double) 200, (double) 500, plotRenderingInfo0, (Point2D) point0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setRangeZeroBaselineStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getPlotType();
      xYPlot0.getDataset(1024);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.configureRangeAxes();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.9, "Null 'format' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      combinedRangeXYPlot1.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot1.getFixedDomainAxisSpace();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselineStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("XY_Plot");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      AffineTransform.getRotateInstance((double) 1.0F, (double) 1.0F, 1.0E-8);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      Rectangle rectangle0 = new Rectangle((-3779), (-3779));
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 1.0, (-2908.263615504522));
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(7.2E7, (double) (-3779), (-1472.90022064));
      Point2D point2D1 = affineTransform0.deltaTransform(point2D0, point2D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      xYPlot0.zoomDomainAxes(1.0, plotRenderingInfo1, point2D1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2770.5125467059142, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("ZOOM_IN_BOTH");
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(10, (String) null);
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(200, 4, (double) 768, 1788.0, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      bufferedImage0.createGraphics();
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis(4);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis1);
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation(500);
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      xYPlot0.getDomainAxisLocation(200);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'rigin' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.getDataRange(numberAxis3D0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      jFreeChart0.createBufferedImage(1767, 1767, 1426.961140742, 113.0, chartRenderingInfo0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getAnnotations();
      chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double(1000000.0, 1.0F);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.zoomRangeAxes(113.0, (double) 500, plotRenderingInfo0, (Point2D) point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      AffineTransform.getRotateInstance((-2334.935), (-2334.935), (-2334.935));
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      LegendTitle legendTitle0 = new LegendTitle(xYAreaRenderer2_0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(808.1568294223201, (-366.9), (-2321.0), 510.8043347509109, blockContainer0);
      xYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0);
      xYPlot0.getDomainAxis((-596));
      xYPlot0.getAnnotations();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double((-2321.0), 510.8043347509109);
      xYPlot0.zoomRangeAxes(Double.NaN, (-2321.0), plotRenderingInfo0, (Point2D) point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      combinedDomainXYPlot1.getRangeAxisLocation(10);
      combinedRangeXYPlot0.getRendererForDataset(timeSeriesCollection0);
      combinedDomainXYPlot1.getRangeGridlineStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.getRangeAxisForDataset((-51));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -51 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      xYPlot0.canSelectByRegion();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.clone();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = new Integer(10);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle rectangle0 = new Rectangle(10, 0, 10, 0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SystemColor systemColor0 = SystemColor.activeCaption;
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Double1, 10, xYPlot0.DEFAULT_GRIDLINE_STROKE, systemColor0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 10, 500, 15, false, true, true, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.needle.LongNeedle");
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(255.0, "PRINT");
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 10, 75.0, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      bufferedImage0.createGraphics();
      xYPlot0.getRangeAxis(10);
      combinedDomainXYPlot0.getRangeAxisEdge(0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 10, 10, 10, 500, 15, false, true, true, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.needle.LongNeedle");
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(255.0, "PRINT");
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 10, 75.0, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      bufferedImage0.createGraphics();
      xYPlot0.getRangeAxis(10);
      xYPlot0.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      NumberAxis numberAxis0 = new NumberAxis("Alex Weber");
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYPlot xYPlot1 = new XYPlot(xYTaskDataset0, numberAxis0, numberAxis0, xYBlockRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("Alex Weber", numberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot1, false);
      jFreeChart0.createBufferedImage(3, 10);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2197.4035359820614), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataRange(numberAxis0);
      xYPlot1.getFixedRangeAxisSpace();
      xYPlot1.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot1.panRangeAxes((-1764.9873033), plotRenderingInfo0, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      LogAxis logAxis0 = new LogAxis((String) null);
      combinedRangeXYPlot0.getDataRange(logAxis0);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.drawHorizontalLine((Graphics2D) null, rectangle0, 0.0F, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.MarkerChangeEvent");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.indexOf((XYDataset) null);
      combinedDomainXYPlot0.indexOf((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 10, (String) null);
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(4.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      PeriodAxis periodAxis0 = new PeriodAxis("LxX)1S", fixedMillisecond0, fixedMillisecond0);
      valueAxisArray0[5] = (ValueAxis) periodAxis0;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxisArray0[4]);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, (-1.0), combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      periodAxis0.setTickLabelPaint(cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(1, (Marker) intervalMarker0, layer0, true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getWeight();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point point0 = new Point(500, 500);
      combinedRangeXYPlot0.panDomainAxes((-1701.274043824257), plotRenderingInfo0, point0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      XYPlot xYPlot1 = new XYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseStroke();
      xYPlot1.setDomainGridlineStroke(stroke0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot1.setRangeAxisLocation(axisLocation0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
      JFreeChart jFreeChart1 = new JFreeChart("Requires 'index' >= 0.", combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart1.createBufferedImage(10, (-2431), 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JTable jTable0 = new JTable();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Point point0 = new Point(500, 41);
      combinedRangeXYPlot0.panDomainAxes((-1701.27404382426), plotRenderingInfo0, point0);
      combinedRangeXYPlot0.getFixedLegendItems();
      combinedRangeXYPlot0.getDomainGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-2334.935), (-2334.935), (-2334.935));
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      Rectangle rectangle0 = new Rectangle((-1), 10);
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Point2D point2D1 = affineTransform0.deltaTransform(point2D0, point2D0);
      xYPlot0.zoomDomainAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, point2D1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis numberAxis0 = new NumberAxis();
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      numberAxis0.setAxisLineVisible(true);
      xYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.setDomainGridlineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.setRangeAxisLocation(axisLocation0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("zq0gE^PO)XuhY_4", combinedRangeCategoryPlot0);
      jFreeChart0.createBufferedImage(10, 500, 10, chartRenderingInfo0);
      Week week0 = new Week(10, 15);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("LxX)1S", regularTimePeriod0, week0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      GeneralPath generalPath0 = new GeneralPath(combinedRangeCategoryPlot0.DEFAULT_LEGEND_ITEM_BOX);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      xYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline.firstMondayAfter1900();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, false);
      Year year0 = new Year(dateAxis0.DEFAULT_ANCHOR_DATE);
      Week week0 = new Week((-9999), (-3672));
      RegularTimePeriod regularTimePeriod0 = week0.next();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Kc*c*a<)ku1Z{X0A");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, (-3672), regularTimePeriod0, simpleTimeZone0);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, dateAxis0, dateAxis0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("kj}.`[RV", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, false);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("49|");
      combinedDomainXYPlot0.getRangeAxisLocation();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setDomainCrosshairValue((-4367.1540282388), false);
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3.713498303639759);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.isDomainCrosshairVisible();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      combinedDomainXYPlot0.indexOf(defaultXYZDataset0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 1.0F);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(153.37, 0.85, 0.85, 0.85, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesItemLabelsVisible(10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.25, "org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.getSeriesRenderingOrder();
      IntervalMarker intervalMarker0 = new IntervalMarker((-675.03), 8.0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline.firstMondayAfter1900();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.setRangeCrosshairStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.setAxisOffset(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
      TimeSeries timeSeries0 = new TimeSeries(2.0F);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeries0.fireSeriesChanged();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(dateAxis0, timeSeriesCollection0);
      combinedDomainXYPlot0.getRangeTickBandPaint();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.getPlotType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(timeSeries0);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null jstroke' ar-ument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      AxisSpace axisSpace0 = new AxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "");
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis1);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      xYPlot0.setDomainAxisLocation(2146612811, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      Layer layer0 = Layer.FOREGROUND;
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot1.getRangeAxisLocation(10);
      combinedRangeXYPlot1.setDomainAxisLocation(10, axisLocation0, true);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot2.getRendererForDataset(timeSeriesCollection0);
      combinedDomainXYPlot0.getIndexOf((XYItemRenderer) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newFifteenMinuteTimeline();
      SegmentedTimeline segmentedTimeline1 = segmentedTimeline0.getBaseTimeline();
      Date date0 = segmentedTimeline1.getDate(900000L);
      dateTickUnit0.addToDate(date0, segmentedTimeline1.DEFAULT_TIME_ZONE);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 3048.80295716, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.setDomainMinorGridlineStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot1.setRangeCrosshairStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.setAxisOffset(xYPlot0.DEFAULT_INSETS);
      TimeSeries timeSeries0 = new TimeSeries(true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeries0.fireSeriesChanged();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(timeSeriesCollection0, timeSeriesCollection0);
      combinedDomainXYPlot0.getRangeTickBandPaint();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot1.getRangeCrosshairPaint();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation((-3497), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      dateAxis0.setTimeline(segmentedTimeline0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2033.734140310519, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer((-332));
      xYItemRendererArray0[0] = (XYItemRenderer) xYAreaRenderer0;
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(500, standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      xYItemRendererArray0[1] = (XYItemRenderer) xYStepAreaRenderer0;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      xYItemRendererArray0[2] = (XYItemRenderer) deviationRenderer0;
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      xYItemRendererArray0[3] = (XYItemRenderer) xYBubbleRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      xYBubbleRenderer0.clearSeriesPaints(true);
      combinedDomainXYPlot0.clearRangeMarkers((-1353));
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(xYBubbleRenderer0.DEFAULT_OUTLINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot1.isRangeZoomable();
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      combinedDomainXYPlot1.isDomainCrosshairVisible();
      combinedDomainXYPlot0.clone();
      combinedDomainXYPlot1.setDomainMinorGridlineStroke(xYAreaRenderer0.DEFAULT_STROKE);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null jstroke' ar-ument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      AxisSpace axisSpace0 = new AxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "");
      BasicStroke basicStroke0 = new BasicStroke(10);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      xYPlot0.getPlotType();
      xYPlot0.isDomainZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis1);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairValue(0.0, false);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYBarRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYBarRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(4674);
      combinedRangeXYPlot0.setDataset((XYDataset) timeSeriesCollection0);
      combinedRangeXYPlot0.setDomainAxisLocation(56, axisLocation1, true);
      combinedRangeXYPlot1.getQuadrantPaint(3);
      String string0 = "";
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ICC Profile Data
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      Font font1 = Axis.DEFAULT_TICK_LABEL_FONT;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Argument 'd' outside valid range.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("1?O9sCGvi;,b=y;u");
      combinedRangeXYPlot0.getDataRange(numberAxis3D0);
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(false);
      combinedRangeXYPlot0.configureDomainAxes();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Line2D.Float line2D_Float0 = new Line2D.Float(1.0F, 0.0F, 10, 1.0F);
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      combinedRangeXYPlot0.isDomainCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis numberAxis0 = new NumberAxis();
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      numberAxis0.setAxisLineVisible(true);
      xYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.setDomainGridlineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.setRangeAxisLocation(axisLocation0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("zq0gE^PO)XuhY_4", combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY, "zq0gE^PO)XuhY_4");
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      bufferedImage0.createGraphics();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0F, 0.5F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null jstroke' ar-ument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      AxisSpace axisSpace0 = new AxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "");
      BasicStroke basicStroke0 = new BasicStroke(10);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      xYPlot0.getPlotType();
      xYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.addRangeMarker(337, (Marker) categoryMarker0, layer0, true);
      xYPlot0.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("1?O9sCGvi;,b=y;u");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.getDataRange(numberAxis3D0);
      combinedRangeXYPlot1.setDomainCrosshairVisible(false);
      combinedRangeXYPlot1.getFixedDomainAxisSpace();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("1?O9sCGvi;,b=y;u");
      extendedCategoryAxis0.setTickLabelsVisible(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("jLNM4=M;W7e8VC8?Xs", (Range) null);
      CombinedRangeXYPlot combinedRangeXYPlot2 = null;
      try {
        combinedRangeXYPlot2 = new CombinedRangeXYPlot(moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.clone();
      Rectangle rectangle0 = new Rectangle();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Graphics2D graphics2D0 = null;
      Object[] objectArray0 = new Object[3];
      Object object0 = combinedRangeXYPlot0.clone();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) rectangle0;
      objectArray0[2] = (Object) layer0;
      JTree jTree0 = new JTree(objectArray0);
      TreePath treePath0 = null;
      try {
        treePath0 = new TreePath((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path in TreePath must be non null.
         //
         verifyException("javax.swing.tree.TreePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA_FRENCH;
      DateAxis dateAxis0 = new DateAxis("", timeZone0, locale0);
      xYPlot0.setRangeAxis(10, (ValueAxis) dateAxis0);
      combinedRangeXYPlot0.setDomainGridlinesVisible(true);
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      Font font1 = Axis.DEFAULT_TICK_LABEL_FONT;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Argument 'd' outside valid range.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("1?O9sCGvi;,b=y;u");
      combinedRangeXYPlot0.getDataRange(numberAxis3D0);
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(false);
      combinedRangeXYPlot0.configureDomainAxes();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(735);
      combinedRangeXYPlot0.getFixedLegendItems();
      combinedRangeXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      ValueMarker valueMarker0 = new ValueMarker(0.0, xYPlot0.DEFAULT_BACKGROUND_PAINT, thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker(500, (Marker) valueMarker0, layer0, true);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "Null 'format' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(0, (ValueAxis) null, false);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(500, 0.0);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      xYPlot0.getPlotType();
      xYPlot0.isDomainZoomable();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis1);
      combinedRangeXYPlot1.addRangeMarker(500, (Marker) valueMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.clone();
      combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot1.setDomainCrosshairValue(2070.5473847048497, false);
      combinedRangeXYPlot1.setDomainGridlinesVisible(true);
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.clearRangeMarkers(10);
      xYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.isRangeZoomable();
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      xYPlot0.isDomainCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      XYDataset xYDataset0 = null;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'origin' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.getDataRange(numberAxis3D0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0E-8, "");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1767, 1770, 1426.961140742, 113.0, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      int int0 = (-268);
      Vector<DefaultKeyedValues2DDataset> vector0 = null;
      try {
        vector0 = new Vector<DefaultKeyedValues2DDataset>((-268));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -268
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      Font font1 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, false);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, (XYItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      xYPlot0.setWeight(500);
      BufferedImage bufferedImage0 = new BufferedImage(500, 59, 10);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Argument 'd' outside valid range.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 59, "Argument 'd' outside valid range.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D1 = new NumberAxis3D("1?O9sCGvi;,b=y;u");
      combinedRangeXYPlot0.getDataRange(numberAxis3D1);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(false);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(2.0F, 0.05, "1?O9sCGvi;,b=y;u");
      combinedRangeXYPlot0.configureDomainAxes();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(500, 10, chartRenderingInfo0);
      bufferedImage1.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      jFreeChart0.clone();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(59);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYPlot0.drawRangeGridlines(graphics2D0, rectangle2D0, vector0);
      combinedRangeXYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setDomainAxisLocation(686, axisLocation0);
      combinedDomainXYPlot0.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) xYStepRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Point point0 = new Point();
      xYPlot0.setRangeZeroBaselineVisible(false);
      AffineTransform.getTranslateInstance(1000000.0, 10.0);
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      xYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.needle.LongNeedle", xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10.0F, (-1257.08F), renderingHints0);
      BufferedImage bufferedImage0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1, 3, byteArray0, 10, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XYItemEntity: series = ");
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, true);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      combinedRangeXYPlot0.getRangeAxisLocation(1784);
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.setDomainAxisLocation(3, axisLocation1, true);
      combinedRangeXYPlot0.getRendererForDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2477);
      bufferedImage0.createGraphics();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.MarkerChangeEvent");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "org.jfree.chart.event.MarkerChangeEvent");
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      bufferedImage0.createGraphics();
      xYPlot0.getRangeAxis(476);
      xYPlot0.getRangeMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = new BasicStroke();
      Layer layer0 = Layer.BACKGROUND;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      Font font1 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, (XYItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Argument 'd' outside valid range.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 735, "Argument 'd' outside valid range.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(1788, (ValueAxis) numberAxis3D0, true);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D("1?O9sCGvi;,b=y;u");
      combinedRangeXYPlot0.getDataRange(numberAxis3D1);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(false);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(2.0F, 0.05, "1?O9sCGvi;,b=y;u");
      combinedRangeXYPlot0.configureDomainAxes();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      jFreeChart0.clone();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(735);
      combinedRangeXYPlot0.drawBackground(graphics2D0, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot0.getRangeGridlineStroke();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Paint paint0 = xYShapeRenderer0.getGuideLinePaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(173, paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (173) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getDialBackgroundPaint();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(paint0);
      combinedDomainXYPlot0.getRangeAxisLocation(10);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      LegendTitle legendTitle0 = new LegendTitle(combinedDomainXYPlot0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(3.0F, (double) stackedXYAreaRenderer2_0.ZERO, (double) stackedXYAreaRenderer2_0.ZERO, 808.1568294223201, blockContainer0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker(270, (Marker) categoryMarker0, layer0, false);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      Paint paint1 = combinedRangeXYPlot0.getBackgroundPaint();
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(paint1);
      combinedDomainXYPlot0.clearRangeAxes();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(10);
      combinedRangeXYPlot0.getRendererForDataset(simpleHistogramDataset0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setNegativeArrowVisible(true);
      numberAxis3D0.setAxisLineVisible(true);
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = valueAxis0;
      valueAxisArray0[2] = valueAxis0;
      valueAxisArray0[3] = valueAxis0;
      valueAxisArray0[4] = (ValueAxis) numberAxis3D0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.setDomainGridlineStroke(candlestickRenderer0.DEFAULT_OUTLINE_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      GrayPaintScale grayPaintScale0 = new GrayPaintScale(0, 0.05);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(grayPaintScale0, valueAxisArray0[4]);
      AxisLocation axisLocation1 = paintScaleLegend0.getAxisLocation();
      xYPlot0.setRangeAxisLocation(axisLocation1);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.getEntity((-824.61694335), (double) 0.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(1753);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1753, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot1.setDomainGridlinesVisible(true);
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      combinedRangeXYPlot1.getRangeAxisLocation(10);
      combinedRangeXYPlot1.setDomainAxisLocation(3, axisLocation0, false);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4674, 10);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      Font font1 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, (XYItemRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1788, 500);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Argument 'd' outside valid range.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 735, "Argument 'd' outside valid range.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(1788, (ValueAxis) numberAxis3D0, true);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D("1?O9sCGvi;,b=y;u");
      combinedRangeXYPlot0.getDataRange(numberAxis3D1);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(false);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(2.0F, 0.05, "1?O9sCGvi;,b=y;u");
      combinedRangeXYPlot0.configureDomainAxes();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(500, 10, chartRenderingInfo0);
      bufferedImage1.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      jFreeChart0.clone();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(735);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYPlot0.drawRangeGridlines(graphics2D0, rectangle2D0, vector0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2477);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.MarkerChangeEvent");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "org.jfree.chart.event.MarkerChangeEvent");
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      bufferedImage0.createGraphics();
      xYPlot0.getRangeAxis(476);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(2475.0, 165.63243, 1.0F, 10, xYPlot0.DEFAULT_CROSSHAIR_STROKE, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      xYPlot0.getPlotType();
      xYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.addRangeMarker(337, (Marker) categoryMarker0, layer0, true);
      combinedRangeXYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      Line2D.Float line2D_Float0 = new Line2D.Float();
      cyclicNumberAxis0.setDownArrow(line2D_Float0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.zoomRangeAxes(10.0, (PlotRenderingInfo) null, (Point2D) null);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(897.0652600748, (-1619.5), (-1619.5), 3844.340364101);
      xYLineAnnotation0.setURL("`>Qq#gCtKG!Zs8");
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Null 'marker' argument.");
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(2.0F);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedRangeXYPlot0.clearAnnotations();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter1);
      xYPlot0.getDomainAxisLocation(0);
      xYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Point2D point2D0 = arc2D_Double0.getEndPoint();
      xYPlot1.getQuadrantPaint(1);
      combinedDomainXYPlot0.setDomainCrosshairStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      point2D0.setLocation((double) 1.0F, 2297.63849);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, false);
      jFreeChart0.createBufferedImage(10, 10);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 0.05, "");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, true, true);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(500);
      xYPlot0.setDomainCrosshairStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.removeAnnotations();
      combinedDomainXYPlot0.setRenderer(47, (XYItemRenderer) xYDifferenceRenderer0, false);
      combinedDomainXYPlot0.getFixedLegendItems();
      xYPlot0.isRangeGridlinesVisible();
      combinedDomainXYPlot0.setDomainAxisLocation(200, axisLocation0, true);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      Layer layer0 = Layer.BACKGROUND;
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.canSelectByRegion();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setNegativeArrowVisible(false);
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      numberAxis0.setAxisLineVisible(true);
      xYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.setDomainGridlineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.setRangeAxisLocation(axisLocation0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.getEntity((double) 1.0F, 0.0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getEntityCollection();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, valueAxis0, valueAxis0, cyclicXYItemRenderer0);
      xYPlot0.getRendererForDataset(defaultTableXYDataset0);
      thermometerPlot0.setNoDataMessage("G*\"^&z~vx0 X^ 9t");
      xYPlot0.getDataset();
      xYPlot0.getSeriesRenderingOrder();
      xYPlot0.getRangeCrosshairStroke();
      xYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.setRangeAxis(valueAxis0);
      xYPlot0.isRangeCrosshairVisible();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      xYPlot0.setOrientation(plotOrientation0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDataset();
      xYPlot0.getRangeGridlinePaint();
      int int0 = (-109);
      int int1 = (-1391);
      int int2 = 511;
      int int3 = 496;
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel(10, (-109), (-1391), 511, 496);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (ffffff93
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      MeterPlot meterPlot1 = new MeterPlot();
      AxisLocation axisLocation1 = AxisLocation.BOTTOM_OR_RIGHT;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, meterPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker(3, (Marker) categoryMarker0, layer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2404.658203125, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10);
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) xYSplineRenderer0;
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(1);
      xYItemRendererArray0[2] = (XYItemRenderer) xYStepAreaRenderer0;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(xYSplineRenderer0.DEFAULT_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, false);
      xYItemRendererArray0[3] = (XYItemRenderer) xYDifferenceRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      xYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      xYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "");
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter1);
      xYPlot0.getDomainAxisLocation(0);
      xYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      arc2D_Double0.getEndPoint();
      xYPlot1.getQuadrantPaint(1);
      combinedDomainXYPlot0.setDomainCrosshairStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(694.0);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(3, layer0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline0.getSegment((long) 500);
      dateAxis0.setTimeline(segmentedTimeline0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      Date date0 = segmentedTimeline0.getDate(10);
      dateTickUnit0.addToDate(date0, segmentedTimeline0.DEFAULT_TIME_ZONE);
      combinedDomainXYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("XY_Plot");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(58, (ValueAxis) dateAxis0, false);
      combinedRangeXYPlot0.getDataRange(dateAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0, 2305.3, "Null 'stroke' argument.");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedDomainXYPlot0.getPlotType();
      combinedRangeXYPlot0.isDomainZoomable();
      ValueMarker valueMarker0 = new ValueMarker(0.05, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker(10, (Marker) valueMarker0, layer0, true);
      combinedDomainXYPlot0.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(2013);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) xYStepRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Point point0 = new Point();
      xYPlot0.setRangeZeroBaselineVisible(false);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1000000.0, 10.0);
      Point2D point2D0 = affineTransform0.transform((Point2D) point0, (Point2D) point0);
      affineTransform0.deltaTransform(point2D0, (Point2D) point0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.needle.LongNeedle", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2013, 1000000, 10, 10, 2013, 10, true, true, true, true, true, false, true);
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.getErrorIndicatorPaint();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.setRangeZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot1.setRangeZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(false);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0F, 10.0, "+@FL+3K ");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYPlot xYPlot1 = new XYPlot(simpleHistogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      xYPlot1.getDomainAxisLocation(10);
      xYPlot1.setDomainCrosshairStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      NumberAxis numberAxis0 = new NumberAxis("8");
      XYPlot xYPlot2 = null;
      try {
        xYPlot2 = new XYPlot(simpleHistogramDataset0, numberAxis0, numberAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter1);
      xYPlot0.getDomainAxisLocation(0);
      xYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Point2D point2D0 = arc2D_Double0.getEndPoint();
      xYPlot1.getQuadrantPaint(1);
      combinedDomainXYPlot0.setDomainCrosshairStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      point2D0.setLocation((double) 1.0F, 2297.63849);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot1.panDomainAxes(270.0, plotRenderingInfo0, point2D0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".PvoA");
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      xYPlot0.canSelectByRegion();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setNegativeArrowVisible(false);
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      xYPlot0.setDomainCrosshairStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot1 = new XYPlot((XYDataset) null, numberAxis0, valueAxisArray0[0], xYBoxAndWhiskerRenderer0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      arc2D_Double0.getEndPoint();
      combinedDomainXYPlot0.getQuadrantPaint(0);
      xYPlot1.setDomainCrosshairStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline0.getSegment((long) 500);
      dateAxis0.setTimeline(segmentedTimeline0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      Date date0 = segmentedTimeline0.getDate(10);
      dateTickUnit0.addToDate(date0, segmentedTimeline0.DEFAULT_TIME_ZONE);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setRangeCrosshairStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.setAxisOffset(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
      TimeSeries timeSeries0 = new TimeSeries(2.0F);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeries0.fireSeriesChanged();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(dateAxis0, timeSeriesCollection0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getRangeTickBandPaint();
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.getDomainAxisEdge(480);
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Paint paint0 = statisticalBarRenderer0.getErrorIndicatorPaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(paint0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".PvoA");
      xYPlot0.canSelectByRegion();
      xYPlot0.configureDomainAxes();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis numberAxis0 = new NumberAxis();
      xYPlot0.setDomainAxis(45, (ValueAxis) numberAxis0);
      numberAxis0.setNegativeArrowVisible(false);
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      numberAxis0.setAxisLineVisible(true);
      xYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.setDomainGridlineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.setRangeAxisLocation(axisLocation0);
      Object[][][] objectArray0 = new Object[0][9][0];
      xYPlot0.setRangeCrosshairVisible(false);
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      jFreeChart0.createBufferedImage(10, 2477);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.MarkerChangeEvent");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "org.jfree.chart.event.MarkerChangeEvent");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis3D0, true);
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(396, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 3, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      JFreeChart jFreeChart0 = new JFreeChart((String) null, candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, thermometerPlot0, false);
      thermometerPlot0.removeChangeListener(jFreeChart0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter1);
      xYPlot0.getDomainAxisLocation(0);
      xYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      Stroke stroke0 = xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.panRangeAxes(0.0, plotRenderingInfo0, (Point2D) null);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(stroke0, false);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("2y`2d_W{8'{Co(>>X7", font0, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(735, 10);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("2y`2d_W{8'{Co(>>X7");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, "1?Oj9sYGvi;,{=y;u");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(true);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0F, 1.0, "");
      combinedRangeXYPlot0.configureDomainAxes();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Line2D.Float line2D_Float1 = new Line2D.Float();
      line2D_Float0.setLine((Line2D) line2D_Float1);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(500);
      xYPlot0.drawRangeGridlines(graphics2D0, rectangle2D0, vector0);
      combinedRangeXYPlot0.getRenderer(2);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      xYPlot0.setFixedLegendItems(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 3, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter1);
      xYPlot0.getDomainAxisLocation(0);
      xYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      arc2D_Double0.getEndPoint();
      xYPlot1.getQuadrantPaint(1);
      combinedDomainXYPlot0.setDomainCrosshairStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".PvoA");
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      xYPlot0.canSelectByRegion();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.clone();
      rectangle2D_Double0.getBounds();
      Layer layer1 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getSeriesCount();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[0];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.setDomainGridlinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      xYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.clone();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getSeriesCount();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.isDomainPannable();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("2y`2d_W{8'{Co(>>X7", font0, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(735, 10);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("2y`2d_W{8'{Co(>>X7");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-163.500568), "ZOn=4B~bV");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(28, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("");
      extendedCategoryAxis1.setTickLabelsVisible(true);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(442.0, Double.POSITIVE_INFINITY, "ZOn=4B~bV");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.configureDomainAxes();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(1);
      combinedRangeXYPlot0.drawRangeGridlines(graphics2D0, rectangle2D0, vector0);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0);
      combinedRangeXYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      combinedRangeXYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      combinedRangeXYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot1.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot1.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "");
      combinedRangeXYPlot1.getDomainCrosshairStroke();
      combinedRangeXYPlot1.setRangeCrosshairLockedOnData(false);
      combinedRangeXYPlot0.getPlotType();
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot1.addRangeMarker(337, (Marker) categoryMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "");
      xYPlot0.configureDomainAxes();
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      xYPlot0.getPlotType();
      xYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.addRangeMarker(337, (Marker) categoryMarker0, layer0, true);
      xYPlot0.getRangeCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(10, 2477);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.MarkerChangeEvent");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "org.jfree.chart.event.MarkerChangeEvent");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.getDataRange(numberAxis3D0);
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(false);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis((-6.8658), (double) xYDifferenceRenderer0.ZERO, "2y`2d_W{8'{Co(>>X7");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.configureDomainAxes();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.calculateRangeAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      combinedRangeXYPlot1.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(4674);
      combinedRangeXYPlot0.setDomainAxisLocation(56, axisLocation1, false);
      combinedRangeXYPlot1.getQuadrantPaint(3);
      combinedRangeXYPlot1.getRendererForDataset(timeSeriesCollection0);
      combinedRangeXYPlot1.getAnnotations();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getDialBackgroundPaint();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(paint0);
      combinedDomainXYPlot0.getRangeAxisLocation(10);
      combinedDomainXYPlot0.configureDomainAxes();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(135.0);
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'negativeBarPaint' argument", meterPlot0.DEFAULT_LABEL_FONT, compassPlot0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null 'negativeBarPaint' argument");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.removeChangeListener(jFreeChart0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      xYPlot0.getDomainAxisLocation(484);
      BasicStroke basicStroke0 = (BasicStroke)SpiderWebPlot.DEFAULT_LABEL_OUTLINE_STROKE;
      xYPlot0.setDomainCrosshairStroke(basicStroke0);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      candlestickRenderer0.removeAnnotations();
      combinedDomainXYPlot1.setRenderer(471, (XYItemRenderer) candlestickRenderer0, true);
      combinedDomainXYPlot1.getFixedLegendItems();
      combinedDomainXYPlot0.setRangeCrosshairVisible(true);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-2020), layer0);
      ValueMarker valueMarker0 = new ValueMarker(1000.0);
      valueMarker0.setPaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0);
      combinedRangeXYPlot0.clearDomainMarkers();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      combinedDomainXYPlot0.render((Graphics2D) null, (Rectangle2D) null, 10, plotRenderingInfo0, categoryCrosshairState0);
      combinedDomainXYPlot0.getDomainAxis(10);
      combinedDomainXYPlot0.clearDomainMarkers(10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      combinedDomainXYPlot0.drawZeroRangeBaseline((Graphics2D) null, defaultCaret0);
      combinedRangeXYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, (String) null);
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(4.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxisArray0[4] = valueAxis0;
      PeriodAxis periodAxis0 = new PeriodAxis("LxX)1S", fixedMillisecond0, fixedMillisecond0);
      valueAxisArray0[5] = (ValueAxis) periodAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      Layer layer0 = Layer.BACKGROUND;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.POSITIVE_INFINITY, 10, 10, 2359.4621605);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("sM<");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = dateAxis0.reserveSpace(graphics2D0, combinedDomainXYPlot0, rectangle2D0, rectangleEdge0, axisSpace0);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D1, rectangle2D0, axisSpace1);
      AxisSpace axisSpace2 = new AxisSpace();
      combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D1, rectangle2D0, axisSpace2);
      combinedDomainXYPlot0.clearDomainAxes();
      combinedDomainXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'type' argument", fixedMillisecond0, fixedMillisecond0);
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      LogAxis logAxis0 = new LogAxis("Null 'type' argument");
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 4.0);
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(4.0, (String) null);
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis1;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(4.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxisArray0[4] = valueAxis0;
      PeriodAxis periodAxis1 = new PeriodAxis("LxX)1S", fixedMillisecond0, fixedMillisecond0);
      valueAxisArray0[5] = (ValueAxis) periodAxis1;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline0.getSegment((long) 500);
      dateAxis0.setTimeline(segmentedTimeline0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-7.9), "Null 'axisIndex' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(3440, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(false);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(2.0, 500, "b7FXk_JEY+|g#");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.configureDomainAxes();
      BufferedImage bufferedImage0 = new BufferedImage(2249, 500, 10);
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      bufferedImage0.getData();
      line2D_Float0.getBounds2D();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(500);
      bufferedImage0.createGraphics();
      combinedDomainXYPlot0.getDomainCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(4674);
      combinedRangeXYPlot0.setDomainAxisLocation(56, axisLocation1, false);
      combinedRangeXYPlot1.getQuadrantPaint(3);
      combinedRangeXYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline0.getSegment((-1L));
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline1 = SegmentedTimeline.newMondayThroughFridayTimeline();
      dateAxis0.setTimeline(segmentedTimeline1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      Date date0 = segmentedTimeline0.getDate((-1L));
      dateAxis0.DEFAULT_DATE_TICK_UNIT.addToDate(dateAxis0.DEFAULT_ANCHOR_DATE, segmentedTimeline1.DEFAULT_TIME_ZONE);
      dateAxis0.setMaximumDate(date0);
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setRangeCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.setAxisOffset(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
      TimeSeries timeSeries0 = new TimeSeries(0.05);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeries0.fireSeriesChanged();
      DatasetChangeEvent datasetChangeEvent0 = null;
      try {
        datasetChangeEvent0 = new DatasetChangeEvent((Object) null, timeSeriesCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      Layer layer0 = Layer.BACKGROUND;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.POSITIVE_INFINITY, 10, 10, 2359.4621605);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("sM<");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureDomainAxes();
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(15);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.drawRangeGridlines(graphics2D0, rectangle2D0, vector0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setPaint(xYDifferenceRenderer0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.isRangeMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getSeriesCount();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYDifferenceRenderer0;
      combinedDomainXYPlot1.setRenderers(xYItemRendererArray0);
      xYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot1.setFixedRangeAxisSpace((AxisSpace) null);
      xYPlot0.setDomainZeroBaselineStroke(combinedDomainXYPlot1.DEFAULT_GRIDLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      Layer layer0 = Layer.BACKGROUND;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.POSITIVE_INFINITY, 10, 10, 2359.4621605);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("sM<");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = dateAxis0.reserveSpace(graphics2D0, combinedDomainXYPlot0, rectangle2D0, rectangleEdge0, axisSpace0);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D1, rectangle2D0, axisSpace1);
      AxisSpace axisSpace2 = new AxisSpace();
      combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D1, rectangle2D0, axisSpace2);
      combinedDomainXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, 0.5F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".PvoA");
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      xYPlot0.canSelectByRegion();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setNegativeArrowVisible(false);
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      numberAxis0.setAxisLineVisible(true);
      xYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.setDomainGridlineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      xYPlot0.setRangeAxisLocation(axisLocation0);
      Object[][][] objectArray0 = new Object[0][9][0];
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainPannable(true);
      combinedRangeXYPlot0.isRangeZoomable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jfree.chart.util.Rotation");
      cyclicNumberAxis0.setAdvanceLineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      StandardTickUnitSource standardTickUnitSource0 = new StandardTickUnitSource();
      standardTickUnitSource0.getCeilingTickUnit(1.0);
      cyclicNumberAxis0.setStandardTickUnits(standardTickUnitSource0);
      cyclicNumberAxis0.setAutoRangeMinimumSize((double) 10, true);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(cyclicNumberAxis0, (Dataset) null);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      combinedRangeXYPlot0.getLegendItems();
      Stroke stroke0 = combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) cyclicNumberAxis0);
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis();
      int int0 = 1;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Stroke stroke1 = categoryAxis3D0.getAxisLineStroke();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0E-8, valueAxis0.DEFAULT_AXIS_LINE_PAINT, stroke1, categoryAxis3D0.DEFAULT_AXIS_LABEL_PAINT, stroke0, 1);
      int int1 = (-635);
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(500, (-1636));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      Layer layer0 = Layer.FOREGROUND;
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      xYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-3368), layer0);
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 10, false);
      combinedDomainXYPlot0.getDomainAxis(2579);
      combinedDomainXYPlot0.clearDomainMarkers(10);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.calculateDomainAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(4674);
      combinedRangeXYPlot0.setDomainAxisLocation(56, axisLocation1, true);
      combinedRangeXYPlot1.getQuadrantPaint(3);
      combinedRangeXYPlot1.getRendererForDataset(timeSeriesCollection0);
      combinedRangeXYPlot0.getDomainZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("org.jfree.chart.event.MarkerChangeEvent");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_MARK_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, true);
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(10, 2477);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.MarkerChangeEvent");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "org.jfree.chart.event.MarkerChangeEvent");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.getDataRange(numberAxis3D0);
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(false);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis((-6.8658), (double) xYDifferenceRenderer0.ZERO, "2y`2d_W{8'{Co(>>X7");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.configureDomainAxes();
      bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      line2D_Float0.getBounds2D();
      Vector<DefaultKeyedValues2DDataset> vector0 = null;
      try {
        vector0 = new Vector<DefaultKeyedValues2DDataset>((-569));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -569
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(4674);
      combinedRangeXYPlot0.setDomainAxisLocation(56, axisLocation1, false);
      combinedRangeXYPlot1.getQuadrantPaint(3);
      combinedRangeXYPlot1.getRendererForDataset(timeSeriesCollection0);
      combinedRangeXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker(1258, (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 2053);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, true);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-818.37803), "H?e%fdBL:az");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(475, (ValueAxis) cyclicNumberAxis0, false);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(Double.NaN, 1.0F, "Null 'stroke' argument.");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      xYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(true);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      Range range0 = ValueAxis.DEFAULT_RANGE;
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis((-596), "");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      combinedRangeXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-23), (ValueAxis) cyclicNumberAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.zoomRangeAxes(10.0, (PlotRenderingInfo) null, (Point2D) null);
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(897.0652600748, (-1619.5), (-1619.5), 3844.340364101);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(2.0F);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      xYPlot0.getPlotType();
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("2y`2d_W{8'{Co(>>X7", font0, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(735, 10);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("2y`2d_W{8'{Co(>>X7");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, "1?Oj9sYGvi;,{=y;u");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      extendedCategoryAxis0.setTickLabelsVisible(true);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0F, 1.0, "");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.configureDomainAxes();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Vector<DefaultKeyedValues2DDataset> vector0 = new Vector<DefaultKeyedValues2DDataset>(500);
      xYPlot0.drawRangeGridlines(graphics2D0, rectangle2D0, vector0);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0F, 9.0, Double.POSITIVE_INFINITY, 1.0E-8);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesURLGenerator((-465));
      candlestickRenderer0.getSeriesURLGenerator((-465));
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) null);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("m_2,M9>)Yhu^P>w'");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      Font font1 = Font.decode("");
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font1, combinedDomainXYPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Stroke[] strokeArray0 = new Stroke[4];
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer((-1961.0));
      Stroke stroke0 = candlestickRenderer1.getBaseStroke();
      strokeArray0[0] = stroke0;
      strokeArray0[1] = numberAxis3D0.DEFAULT_AXIS_LINE_STROKE;
      strokeArray0[2] = candlestickRenderer0.DEFAULT_STROKE;
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      strokeArray0[3] = (Stroke) basicStroke0;
      Stroke[] strokeArray1 = new Stroke[2];
      strokeArray1[0] = (Stroke) basicStroke0;
      strokeArray1[1] = candlestickRenderer0.DEFAULT_OUTLINE_STROKE;
      Shape[] shapeArray0 = new Shape[2];
      shapeArray0[0] = xYDifferenceRenderer0.DEFAULT_SHAPE;
      shapeArray0[1] = candlestickRenderer1.DEFAULT_SHAPE;
      DefaultDrawingSupplier defaultDrawingSupplier0 = new DefaultDrawingSupplier((Paint[]) null, (Paint[]) null, strokeArray0, strokeArray1, shapeArray0);
      Stroke stroke1 = defaultDrawingSupplier0.getNextOutlineStroke();
      xYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 500, dateAxis0, stroke1, candlestickRenderer1.DEFAULT_PAINT);
      combinedDomainXYPlot0.setRangeAxisLocation(1, axisLocation0, true);
      xYPlot0.setFixedDomainAxisSpace(axisSpace0);
      Stroke stroke2 = combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.clearRangeMarkers();
      IntervalMarker intervalMarker0 = new IntervalMarker(500, 500, xYPlot0.DEFAULT_OUTLINE_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, stroke2, 0.0F);
      combinedDomainXYPlot0.addRangeMarker((Marker) intervalMarker0);
      combinedDomainXYPlot0.getRangeAxisIndex(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      xYPlot0.getPlotType();
      xYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.addRangeMarker(337, (Marker) categoryMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getDialBackgroundPaint();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 10.0F;
      floatArray0[2] = 3.0F;
      floatArray0[3] = (float) 270;
      floatArray0[4] = (float) 10;
      floatArray0[5] = (-2437.5864F);
      floatArray0[6] = 1.0F;
      Color.RGBtoHSB(494, 494, 10, floatArray0);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(paint0);
      combinedDomainXYPlot0.getRangeAxisLocation(10);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.isDomainZoomable();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1000.5061, "");
      LogAxis logAxis0 = new LogAxis();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(2886.114, 0.0, "2Ny+U0!UEr8P`~:bGl");
      CyclicNumberAxis cyclicNumberAxis2 = new CyclicNumberAxis(10, 10, "2Ny+U0!UEr8P`~:bGl");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j8yB2@PDke9T&ExP[";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 1373.13, "");
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      LogAxis logAxis0 = new LogAxis();
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.0, (String) null);
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis1;
      CyclicNumberAxis cyclicNumberAxis2 = new CyclicNumberAxis(0.0F, 1.0F, "");
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis2;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0);
      defaultTreeCellEditor0.getBorderSelectionColor();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      NumberAxis.createStandardTickUnits();
      valueMarker0.setPaint(xYDifferenceRenderer0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getSeriesCount();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYDifferenceRenderer0;
      combinedDomainXYPlot1.setRenderers(xYItemRendererArray0);
      xYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot1.setFixedRangeAxisSpace((AxisSpace) null);
      xYPlot0.setDomainZeroBaselineStroke(combinedDomainXYPlot1.DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot1.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "\"w)=[J(EzG9AX9wBqm'");
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      xYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(xYPlot0.DEFAULT_GRIDLINE_PAINT, xYPlot0.DEFAULT_BACKGROUND_PAINT, true);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.025, 1.0F);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      stackedBarRenderer3D0.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("ZiALb~'", (Range) null);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10);
      XYPlot xYPlot1 = null;
      try {
        xYPlot1 = new XYPlot(yIntervalSeriesCollection0, moduloAxis0, moduloAxis0, cyclicXYItemRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDataset(500, (XYDataset) null);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-761), layer0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      valueMarker0.setPaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYBoxAndWhiskerRenderer0);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      xYPlot0.clearDomainMarkers();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(5255.10190855);
      Paint paint0 = candlestickRenderer0.lookupSeriesOutlinePaint(97);
      xYPlot0.setDomainZeroBaselinePaint(paint0);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue((-2.147483648E9), true);
      combinedDomainXYPlot0.getDomainAxis(500);
      combinedDomainXYPlot0.clearDomainMarkers(3034);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      combinedDomainXYPlot0.drawZeroRangeBaseline((Graphics2D) null, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(2013);
      xYStepRenderer0.lookupSeriesOutlinePaint(10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) xYStepRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Point point0 = new Point();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1000000.0, 10.0);
      Point point1 = (Point)affineTransform0.transform((Point2D) point0, (Point2D) point0);
      point1.setLocation(1266, 10);
      point1.setLocation((double) 10.0F, (double) 10);
      Point point2 = (Point)affineTransform0.deltaTransform((Point2D) point1, (Point2D) point0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomDomainAxes(735.0, plotRenderingInfo0, (Point2D) point0, true);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers((-1965), layer0);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) cyclicNumberAxis0);
      xYPlot0.zoomDomainAxes((double) 10.0F, plotRenderingInfo0, (Point2D) point2, true);
      xYPlot0.getOrientation();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0F, 9.0, Double.POSITIVE_INFINITY, 1.0E-8);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesURLGenerator((-465));
      candlestickRenderer0.getSeriesURLGenerator((-465));
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) null);
      line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("m_2,M9>)Yhu^P>w'");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      combinedDomainXYPlot0.setRangeAxisLocation(1, axisLocation0, true);
      xYPlot0.setFixedDomainAxisSpace(axisSpace0);
      Stroke stroke0 = combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.clearRangeMarkers();
      IntervalMarker intervalMarker0 = new IntervalMarker(500, 500, xYPlot0.DEFAULT_OUTLINE_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_STROKE, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, stroke0, 0.0F);
      combinedDomainXYPlot0.addRangeMarker((Marker) intervalMarker0);
      combinedDomainXYPlot0.getRangeAxisIndex(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      valueMarker0.removeChangeListener(combinedDomainXYPlot0);
      numberAxis3D0.clone();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      numberAxis3D0.setRangeWithMargins(range0);
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.getDomainAxisEdge();
      combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      combinedDomainXYPlot0.getDomainAxis(500);
      double double0 = 0.0;
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultListModel<Integer> defaultListModel0 = new DefaultListModel<Integer>();
      JList<Integer> jList0 = new JList<Integer>(defaultListModel0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo1.getSubplotInfo(500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      xYPlot0.setRangeAxisLocation(10, axisLocation0);
      cyclicNumberAxis0.setUpperMargin(1.0F);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      xYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      xYPlot0.setRangeZeroBaselineVisible(true);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-45.0));
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYPlot xYPlot1 = new XYPlot(defaultXYZDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      xYPlot0.setDomainCrosshairStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.configureDomainAxes();
      xYPlot1.isDomainZoomable();
      // Undeclared exception!
      try { 
        xYPlot1.setQuadrantPaint(102, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (102) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setPaint(xYDifferenceRenderer0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getSeriesCount();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYDifferenceRenderer0;
      combinedDomainXYPlot1.setRenderers(xYItemRendererArray0);
      xYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot1.setFixedRangeAxisSpace((AxisSpace) null);
      xYPlot0.setDomainZeroBaselineStroke(combinedDomainXYPlot1.DEFAULT_GRIDLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-3368), layer0);
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 10, false);
      combinedDomainXYPlot0.getDomainAxis(2579);
      combinedDomainXYPlot0.clearDomainMarkers(10);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      combinedDomainXYPlot0.drawZeroRangeBaseline((Graphics2D) null, (Rectangle2D) null);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      xYPlot0.addDomainMarker(0, (Marker) valueMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Line2D.Double line2D_Double0 = new Line2D.Double(0.05, (-2978.0), (double) xYDifferenceRenderer0.ZERO, 1.0F);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesURLGenerator(735);
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) null);
      line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("<X@]4[sN}%9");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisLocation();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0, false);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      xYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, (-3994.233506885));
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(735, (Marker) intervalMarker0, layer0, false);
      combinedDomainXYPlot0.setDomainCrosshairValue(0.0, false);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0F, 9.0, Double.POSITIVE_INFINITY, 1.0E-8);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesURLGenerator((-465));
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) null);
      line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("m_2,M9>)Yhu^P>w'");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisLocation();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      xYPlot0.setFixedDomainAxisSpace(axisSpace0);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1614.84), "org.jfree.chart.plot.PiePlotState");
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(10, (-4233.8), "E1x#>X;+SF");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.05, true, (XYToolTipGenerator) null);
      candlestickRenderer0.getBaseLegendTextFont();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.plot.PiePlotState", (Font) null, combinedDomainXYPlot0, true);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      thermometerPlot0.removeChangeListener(jFreeChart0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(1.0E-8, true, (XYToolTipGenerator) null);
      CandlestickRenderer candlestickRenderer2 = new CandlestickRenderer(1.0F);
      candlestickRenderer2.getBaseItemLabelPaint();
      thermometerPlot0.setMercuryPaint(candlestickRenderer0.DEFAULT_OUTLINE_PAINT);
      thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.0);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis1, cyclicNumberAxis1, stackedXYBarRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      stackedXYBarRenderer0.setDrawBarOutline(true);
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(2);
      combinedDomainXYPlot0.setDomainCrosshairStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      combinedDomainXYPlot0.setRenderer(3, (XYItemRenderer) stackedXYBarRenderer0, true);
      xYPlot0.setRangeAxisLocation(6, axisLocation0, false);
      xYPlot0.getDomainAxisEdge();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.panRangeAxes(10, (PlotRenderingInfo) null, point2D_Float0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      xYPlot0.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(9, 9);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1);
      candlestickRenderer0.getBaseLegendTextFont();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, thermometerPlot0, false);
      thermometerPlot0.removeChangeListener(jFreeChart0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(0, false, customXYToolTipGenerator0);
      candlestickRenderer0.getBaseItemLabelPaint();
      thermometerPlot0.setMercuryPaint(candlestickRenderer0.DEFAULT_PAINT);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.05);
      stackedXYBarRenderer0.setItemLabelAnchorOffset(2);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, stackedXYBarRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      xYPlot0.getDomainAxisLocation(1203);
      combinedDomainXYPlot0.setDomainCrosshairStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      combinedDomainXYPlot0.setRenderer(15, (XYItemRenderer) candlestickRenderer1, true);
      combinedDomainXYPlot0.getAxisOffset();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1614.84), "org.jfree.chart.plot.PiePlotState");
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(10, (-4233.8), "E1x#>X;+SF");
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis1, cyclicNumberAxis0, standardXYItemRenderer0);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      xYPlot0.setRangeMinorGridlinesVisible(true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      defaultValueDataset0.addChangeListener(combinedDomainXYPlot0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      combinedDomainXYPlot0.setRangeCrosshairValue((-1640.131938), true);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "E1x#>X;+SF", "E1x#>X;+SF");
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(true);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(8);
      LegendTitle legendTitle0 = new LegendTitle(xYSplineRenderer0);
      legendTitle0.getItemContainer();
      xYPlot0.getDomainAxis(500);
      xYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 9, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(2);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, (ValueAxis) null, (ValueAxis) null, xYStepAreaRenderer0);
      xYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 1.0F);
      defaultValueDataset0.addChangeListener(combinedDomainXYPlot0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "3+mgEPw<d2FN7&?", "{0}: ({1}, {2})", "");
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(67);
      LegendTitle legendTitle0 = new LegendTitle(xYStepAreaRenderer0);
      legendTitle0.getItemContainer();
      xYPlot0.getDomainAxis(2);
      combinedDomainXYPlot0.getDatasetRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(2013);
      xYStepRenderer0.lookupSeriesOutlinePaint(10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) xYStepRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Point point0 = new Point();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1000000.0, 10.0);
      Point2D point2D0 = affineTransform0.transform((Point2D) point0, (Point2D) point0);
      point2D0.setLocation((double) 10.0F, (double) 10);
      affineTransform0.deltaTransform(point2D0, (Point2D) point0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2013, 10, 10, 10, 2013, 10, true, true, true, true, true, false, true);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomDomainAxes(735.0, plotRenderingInfo0, (Point2D) point0, true);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers((-1965), layer0);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 3, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      JFreeChart jFreeChart0 = new JFreeChart((String) null, candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, thermometerPlot0, false);
      thermometerPlot0.removeChangeListener(jFreeChart0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      StandardXYBarPainter standardXYBarPainter1 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter1);
      xYPlot0.getDomainAxisLocation(0);
      xYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      candlestickRenderer0.removeAnnotations();
      combinedDomainXYPlot0.setRenderer(383, (XYItemRenderer) candlestickRenderer0, false);
      xYPlot0.getFixedLegendItems();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYBarRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYBarRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(4674);
      combinedRangeXYPlot0.setDomainAxisLocation(56, axisLocation1, false);
      combinedRangeXYPlot1.getQuadrantPaint(3);
      combinedRangeXYPlot1.getRendererForDataset(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 9, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      thermometerPlot0.setInsets(combinedDomainXYPlot0.DEFAULT_INSETS, false);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      valueMarker0.setPaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      SubCategoryAxis subCategoryAxis1 = new SubCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis1);
      valueMarker0.removeChangeListener(combinedDomainXYPlot0);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.addRangeMarker(10, (Marker) valueMarker0, (Layer) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "Null 'seriesParameterName' argument.";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.getRangeTickBandPaint();
      combinedRangeXYPlot0.setDomainTickBandPaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2649), 10);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(slidingCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(spiderWebPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 206, 0.0, (double) 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(735.0);
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(vectorSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(4, layer0);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(735.0);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(xYStepRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      valueMarker0.removeChangeListener(meterPlot0);
      Layer layer1 = Layer.FOREGROUND;
      xYPlot0.getDatasetCount();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(2013);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseItemLabelPaint();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.setMercuryPaint(meterPlot0.DEFAULT_OUTLINE_PAINT);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer((-2313.254098453714));
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      XYPlot xYPlot1 = new XYPlot(defaultIntervalXYDataset0, cyclicNumberAxis0, valueAxis0, xYStepRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      xYPlot1.getDomainAxisLocation(1);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      xYPlot0.getRangeCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-3368), layer0);
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 10, false);
      combinedDomainXYPlot0.getDomainAxis(2579);
      combinedDomainXYPlot0.clearDomainMarkers(10);
      xYPlot0.setDomainCrosshairPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker((-2879.96));
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setLabelPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker(2579, (Marker) valueMarker0, layer0);
      xYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-3368), layer0);
      ValueMarker valueMarker1 = new ValueMarker(10);
      valueMarker1.setPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker1);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.fireChangeEvent();
      combinedRangeXYPlot0.getDomainAxisEdge(589);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot1.setAxisOffset(logAxis0.DEFAULT_TICK_LABEL_INSETS);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot1.getDomainMarkers(10, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot2.setRangeAxis((ValueAxis) logAxis0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setPaint(xYDifferenceRenderer0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      valueMarker0.removeChangeListener(combinedDomainCategoryPlot0);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addRangeMarker(0, (Marker) valueMarker0, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      HashMap<RenderingHints.Key, XYDrawableAnnotation> hashMap0 = new HashMap<RenderingHints.Key, XYDrawableAnnotation>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      jFreeChart0.setRenderingHints(renderingHints0);
      jFreeChart0.createBufferedImage(10, 10);
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.POSITIVE_INFINITY, 9.0, 135.0, 10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(626.7661713499983, 1.0F, "l}D>q");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.fireChangeEvent();
      combinedRangeXYPlot0.getDomainAxisEdge((-596));
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers((-596), layer1);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.FOREGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setPaint(xYDifferenceRenderer0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      valueMarker0.removeChangeListener(combinedDomainCategoryPlot0);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(false);
      combinedDomainXYPlot0.addRangeMarker(0, (Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.getDomainAxis(10);
      xYPlot0.isRangePannable();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 9, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1);
      candlestickRenderer0.getBaseLegendTextFont();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, thermometerPlot0, false);
      thermometerPlot0.removeChangeListener(jFreeChart0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(0, false, customXYToolTipGenerator0);
      candlestickRenderer0.getBaseItemLabelPaint();
      thermometerPlot0.setMercuryPaint(candlestickRenderer0.DEFAULT_PAINT);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.05);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, stackedXYBarRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      xYPlot0.getDomainAxisLocation(1203);
      combinedDomainXYPlot0.setDomainCrosshairStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      combinedDomainXYPlot0.setRenderer(15, (XYItemRenderer) candlestickRenderer1, true);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      stackedXYBarRenderer0.equals(xYLine3DRenderer0);
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYBarRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYBarRenderer0;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.getDomainMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.createBufferedImage(10, 10);
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.POSITIVE_INFINITY, 9.0, 135.0, 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      LinkedList<Rectangle2D.Float> linkedList0 = new LinkedList<Rectangle2D.Float>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(7, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      xYPlot0.addDomainMarker(337, (Marker) categoryMarker0, layer0, false);
      xYPlot0.configureRangeAxes();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1619.5), "Null 'stroke' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxis(4, (ValueAxis) cyclicNumberAxis0, true);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.05, 0.05, "\"w)=[J(EzG9AX9wBqm'");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      byte byte1 = (byte)19;
      byteArray0[1] = (byte)19;
      byte byte2 = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)111;
      byte byte3 = (byte)113;
      byteArray0[4] = (byte)113;
      byte byte4 = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      byte byte5 = (byte)120;
      byteArray0[6] = (byte)120;
      byte byte6 = (byte) (-82);
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte)45;
      int int0 = 1356;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(4, 1147, byteArray0, byteArray0, byteArray0, 1356);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = new BasicStroke();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setAxisOffset(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
      combinedRangeXYPlot0.mapDatasetToRangeAxis(0, 947);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, true);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker((-2879.96));
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setLabelPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(3, standardXYToolTipGenerator0, standardXYURLGenerator0);
      XYPlot xYPlot1 = new XYPlot(yIntervalSeriesCollection0, (ValueAxis) null, (ValueAxis) null, xYStepAreaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("{0}: ({1}, {2})", xYStepAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, true);
      XYPlot xYPlot2 = jFreeChart0.getXYPlot();
      ValueMarker valueMarker1 = new ValueMarker((-2561.59));
      xYPlot1.removeRangeMarker(10, (Marker) valueMarker1, layer0, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.getRangeAxisLocation();
      combinedDomainXYPlot0.getDomainAxis(1598);
      xYPlot2.setAxisOffset(xYPlot0.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(2013);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "org.jfree.chart.needle.LongNeedle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) xYStepRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Point point0 = new Point();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1000000.0, 10.0);
      Point2D point2D0 = affineTransform0.transform((Point2D) point0, (Point2D) point0);
      Point2D point2D1 = affineTransform0.deltaTransform(point2D0, (Point2D) point0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2013, 1000000, 10, 10, 2013, 10, true, true, true, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.zoomDomainAxes((double) 1000000, (double) 1.0F, plotRenderingInfo0, point2D1);
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setPaint(xYDifferenceRenderer0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker0);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      valueMarker0.removeChangeListener(combinedDomainCategoryPlot0);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addRangeMarker(0, (Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.getDomainAxis(10);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("2y`2d_W{8'{Co(>>X7", font0, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(735, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0F, 9.0, Double.POSITIVE_INFINITY, 1.0E-8);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("m_2,M9>)Yhu^P>w'");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = dateAxis0.reserveSpace(graphics2D0, xYPlot0, rectangle2D0, rectangleEdge0, axisSpace0);
      xYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, axisSpace1);
      xYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker((-2879.96));
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setLabelPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker(2579, (Marker) valueMarker0, layer0);
      xYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-3368), layer0);
      ValueMarker valueMarker1 = new ValueMarker(10);
      valueMarker1.setPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker1);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      valueMarker1.removeChangeListener(xYPlot0);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(2579);
      combinedDomainXYPlot0.setDomainAxisLocation(304, axisLocation0);
      combinedDomainXYPlot0.addRangeMarker((-5024), (Marker) valueMarker0, layer1);
      combinedDomainXYPlot0.getDomainAxis(2579);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.POSITIVE_INFINITY, 13.943907515760092, 135.0, 10);
      line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("sM<");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      xYPlot0.getSeriesRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.POSITIVE_INFINITY, 9.0, 135.0, 10);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis("sM<");
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = dateAxis0.reserveSpace(graphics2D0, xYPlot0, rectangle2D0, rectangleEdge0, axisSpace0);
      AxisSpace axisSpace2 = xYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, axisSpace1);
      xYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, axisSpace2);
      xYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker((-2879.96));
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setLabelPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker(2579, (Marker) valueMarker0, layer0);
      xYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-3368), layer0);
      ValueMarker valueMarker1 = new ValueMarker(10);
      valueMarker1.setPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker1);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 10, false);
      combinedDomainXYPlot0.addRangeMarker((-5024), (Marker) valueMarker0, layer1);
      combinedDomainXYPlot0.getDomainAxis(2579);
      combinedDomainXYPlot0.clearDomainMarkers(10);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline0.getSegment((long) 500);
      dateAxis0.setTimeline(segmentedTimeline0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      Date date0 = segmentedTimeline0.getDate(10);
      Date date1 = dateTickUnit0.addToDate(date0, segmentedTimeline0.DEFAULT_TIME_ZONE);
      dateAxis0.setMaximumDate(date1);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setRangeCrosshairStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.setAxisOffset(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
      TimeSeries timeSeries0 = new TimeSeries(2.0F);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeries0.fireSeriesChanged();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(dateAxis0, timeSeriesCollection0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getRangeTickBandPaint();
      combinedDomainXYPlot0.setRangeGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((-35), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.setDomainCrosshairValue((-2983.5654651654));
      double double0 = (-2365.85);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getPlot();
      double double1 = 248.6237;
      double double2 = 5291.3697325;
      MultiTextUI multiTextUI0 = new MultiTextUI();
      String string0 = " out of bounds.";
      JPasswordField jPasswordField0 = new JPasswordField(" out of bounds.");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesItemLabelsVisible(10);
      defaultPolarItemRenderer0.setSeriesVisibleInLegend(10, (Boolean) null);
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) jPasswordField0, (-144));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      SegmentedTimeline.firstMondayAfter1900();
      segmentedTimeline0.getSegment((long) 500);
      dateAxis0.setTimeline(segmentedTimeline0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      Date date0 = segmentedTimeline0.getDate(10);
      Date date1 = dateTickUnit0.addToDate(date0, segmentedTimeline0.DEFAULT_TIME_ZONE);
      dateAxis0.setMaximumDate(date1);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setRangeCrosshairStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedDomainXYPlot0.setAxisOffset(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
      TimeSeries timeSeries0 = new TimeSeries(2.0F);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeries0.fireSeriesChanged();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(dateAxis0, timeSeriesCollection0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getRangeTickBandPaint();
      combinedDomainXYPlot0.setRangeGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(4, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      AxisLocation.getOpposite(axisLocation0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3701.177, "E1x#>X;+SF");
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      xYPlot0.getRangeZeroBaselinePaint();
      xYPlot0.setRangeMinorGridlinesVisible(false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 10);
      defaultValueDataset0.addChangeListener(xYPlot0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "E1x#>X;+SF", "", "");
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      combinedRangeXYPlot0.setDomainAxisLocation(2, axisLocation0, false);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(768);
      Point point0 = new Point();
      Point2D point2D0 = affineTransform0.transform((Point2D) point0, (Point2D) point0);
      Point2D point2D1 = affineTransform0.deltaTransform(point2D0, (Point2D) point0);
      // Undeclared exception!
      try { 
        xYPlot0.zoomDomainAxes(1028.8866420402771, (double) 1, plotRenderingInfo0, point2D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1080.330974142291) <= upper (1.05).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("2y`2d_W{8'{Co(>>X7", font0, xYPlot0, false);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0);
      xYPlot1.removeRangeMarker((-761), (Marker) valueMarker0, (Layer) null, true);
      xYPlot1.isDomainCrosshairLockedOnData();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null, 6, renderingHints0);
      xYPlot1.getRenderer();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.getIndexOf(standardXYItemRenderer0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[7];
      xYItemRendererArray0[0] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[5] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[6] = (XYItemRenderer) standardXYItemRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.getDomainAxisEdge(3);
      RectangleInsets rectangleInsets0 = PeriodAxisLabelInfo.DEFAULT_INSETS;
      combinedRangeXYPlot0.setAxisOffset(rectangleInsets0);
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = new PriorityQueue<Integer>();
      combinedRangeXYPlot0.getDomainMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 3, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      candlestickRenderer0.getBaseLegendTextFont();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Font) null, thermometerPlot0, false);
      thermometerPlot0.removeChangeListener(jFreeChart0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer((-1107.01681962092), false, customXYToolTipGenerator0);
      Paint paint0 = candlestickRenderer1.getBaseItemLabelPaint();
      thermometerPlot0.setMercuryPaint(paint0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(500);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, stackedXYBarRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      xYPlot0.getDomainAxisLocation(6);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      
      xYPlot0.setDomainCrosshairStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.getRangeCrosshairStroke();
      // Undeclared exception!
      try { 
        xYPlot0.setRenderer((-768), (XYItemRenderer) stackedXYBarRenderer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      meterPlot0.getDialBackgroundPaint();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1614.84), "org.jfree.chart.plot.PiePlotState");
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(10, (-4233.8), "E1x#>X;+SF");
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis1, cyclicNumberAxis0, standardXYItemRenderer0);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      xYPlot0.setRangeMinorGridlinesVisible(true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      defaultValueDataset0.addChangeListener(combinedDomainXYPlot0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "", "E1x#>X;+SF", "E1x#>X;+SF");
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(true);
      LegendTitle legendTitle0 = new LegendTitle(meterPlot0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(8);
      LegendTitle legendTitle1 = new LegendTitle(xYSplineRenderer0);
      legendTitle1.getItemContainer();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.8, 10, 0.0, 1.0F, legendTitle1);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0);
      xYPlot0.getDomainAxis(500);
      xYPlot0.isRangeMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeCrosshairValue(321.34, true);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F);
      candlestickRenderer0.getPlot();
      xYPlot0.getFixedLegendItems();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 8);
      defaultValueDataset0.addChangeListener(combinedRangeXYPlot1);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      cyclicXYItemRenderer0.lookupLegendShape((-4581));
      DateFormat.getTimeInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "org.jfree.chart.block.LengthConstraintType", "X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ", "org.jfree.chart.block.LengthConstraintType");
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      stackedXYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      LegendTitle legendTitle0 = new LegendTitle(stackedXYBarRenderer0);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(555);
      LegendTitle legendTitle1 = new LegendTitle(cyclicXYItemRenderer0);
      legendTitle0.getItemContainer();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.0, Double.POSITIVE_INFINITY, 1, 0.0, legendTitle0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0);
      combinedRangeXYPlot0.getDomainAxis(1578);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.clearDomainMarkers();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((-596), (Marker) categoryMarker0, layer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 10, 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingGanttCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(Double.POSITIVE_INFINITY, 9.0, 135.0, 10);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(626.7661713499983, 1.0F, "l}D>}q");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(2.0F);
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) xYBarRenderer0);
      combinedRangeXYPlot0.fireChangeEvent();
      combinedRangeXYPlot0.getDomainAxisEdge((-596));
      combinedRangeXYPlot0.setAxisOffset(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers((-596), layer1);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker((-2879.96));
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setLabelPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      xYPlot0.removeRangeMarker(2579, (Marker) valueMarker0, layer0);
      xYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-3368), layer0);
      ValueMarker valueMarker1 = new ValueMarker(10);
      valueMarker1.removeChangeListener(xYPlot0);
      valueMarker1.setPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.removeRangeMarker((Marker) valueMarker1);
      xYPlot0.clearDomainMarkers();
      xYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      LinkedList<Rectangle2D.Float> linkedList0 = new LinkedList<Rectangle2D.Float>();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      linkedList0.add(rectangle2D_Float0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(511, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 3, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1107.01681962092), 10, thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 3018.13147293488);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.addRangeMarker(1, (Marker) intervalMarker0, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedDomainXYPlot0.getRenderer((-142));
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis(0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("2y`2d_W{8'{Co(>>X7", font0, xYPlot0, false);
      jFreeChart0.getXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainAxisEdge((-1749));
      combinedRangeXYPlot0.setAxisOffset(numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(500, (Layer) null);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYBarRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYBarRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(4674);
      combinedRangeXYPlot0.setDomainAxisLocation(56, axisLocation1, true);
      combinedRangeXYPlot1.getQuadrantPaint(3);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, 6, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer();
      candlestickRenderer1.getBaseLegendTextFont();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, thermometerPlot0, false);
      thermometerPlot0.removeChangeListener(jFreeChart0);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      CandlestickRenderer candlestickRenderer2 = new CandlestickRenderer(1, false, standardXYZToolTipGenerator0);
      candlestickRenderer0.getBaseItemLabelPaint();
      thermometerPlot0.setMercuryPaint(candlestickRenderer2.DEFAULT_PAINT);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer((-4688.161258407));
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, candlestickRenderer2);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      xYPlot0.getDomainAxisLocation(0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.getIndexOf(standardXYItemRenderer0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeAxisLocation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[5];
      xYItemRendererArray0[0] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) standardXYItemRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 2);
      bufferedImage0.createGraphics();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextArea jTextArea0 = null;
      try {
        jTextArea0 = new JTextArea(defaultStyledDocument0, "nNywR$@K301TbFQp", 8, (-326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns: -326
         //
         verifyException("javax.swing.JTextArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      intervalMarker0.notifyListeners(markerChangeEvent0);
      Layer layer0 = Layer.FOREGROUND;
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(4);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      xYItemRendererArray0[1] = (XYItemRenderer) xYStepRenderer0;
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getDomainAxisLocation();
      combinedDomainXYPlot1.setDomainAxisLocation(5, axisLocation0, false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.05);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeGridlineStroke(logAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.setRenderer(xYItemRendererArray0[0]);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(805, 10, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      ValueAxis valueAxis1 = combinedDomainXYPlot1.getDomainAxisForDataset(0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 872.5259689782321, valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      categoryAxis0.getTickMarkStroke();
      IntervalMarker intervalMarker1 = null;
      try {
        intervalMarker1 = new IntervalMarker(0.0, 10, valueAxis1.DEFAULT_AXIS_LINE_PAINT, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE, valueAxis0.DEFAULT_AXIS_LINE_PAINT, valueAxis1.DEFAULT_TICK_MARK_STROKE, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      double double0 = 0.0;
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(1, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      Range range0 = Range.expandToInclude((Range) null, 1.0F);
      Range range1 = Range.expand(range0, 2, 10);
      Range range2 = Range.shift(range1, 0.0);
      ModuloAxis moduloAxis0 = new ModuloAxis("Description", range2);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(moduloAxis0);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(xYDifferenceRenderer0.DEFAULT_PAINT);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[5];
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) xYDifferenceRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) cyclicXYItemRenderer0;
      combinedRangeXYPlot1.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot1.getRangeAxisLocation((-156));
      combinedDomainXYPlot0.setDomainAxisLocation(719, axisLocation0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.getQuadrantPaint(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (6) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      combinedDomainXYPlot0.getRenderer(10);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.getIndexOf(standardXYItemRenderer0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[7];
      xYItemRendererArray0[0] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[5] = (XYItemRenderer) standardXYItemRenderer0;
      xYItemRendererArray0[6] = (XYItemRenderer) standardXYItemRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      LinkedList<Rectangle2D.Float> linkedList0 = new LinkedList<Rectangle2D.Float>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(4, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      intervalMarker0.notifyListeners(markerChangeEvent0);
      Layer layer0 = Layer.FOREGROUND;
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(4);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation();
      int int0 = (-3266);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((-3266), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      combinedRangeXYPlot0.getIndexOf(xYStepRenderer0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYStepRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setDomainAxisLocation(933, axisLocation0, false);
      combinedRangeXYPlot0.setRangeGridlineStroke(standardXYItemRenderer0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) xYStepRenderer0);
      combinedRangeXYPlot0.fireChangeEvent();
      combinedRangeXYPlot0.getDomainAxisEdge(10);
      combinedRangeXYPlot0.setAxisOffset(categoryPlot0.DEFAULT_INSETS);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(3, layer0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis3D0, numberAxis3D0, xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("2y`2d_W{8'{Co(>>X7", font0, xYPlot0, false);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0);
      xYPlot1.removeRangeMarker((-761), (Marker) valueMarker0, (Layer) null, true);
      xYPlot1.isDomainCrosshairLockedOnData();
      int int0 = 6;
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null, 6, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, 15, (-761));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -761
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.handleClick(500, 500, plotRenderingInfo0);
      combinedRangeXYPlot0.getDomainAxisEdge();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setAxisOffset(valueAxis0.DEFAULT_TICK_LABEL_INSETS);
      combinedRangeXYPlot0.mapDatasetToRangeAxis(1, 10);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.getIndexOf(standardXYItemRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      standardXYItemRenderer0.lookupSeriesStroke(500);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDomainAxis(1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3701.177, "E1x#>X;+SF");
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYDifferenceRenderer0);
      xYPlot0.getRangeZeroBaselinePaint();
      xYPlot0.setRangeMinorGridlinesVisible(false);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 10);
      defaultValueDataset0.addChangeListener(xYPlot0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "E1x#>X;+SF", "", "");
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(boxAndWhiskerXYToolTipGenerator0, timeSeriesURLGenerator0);
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      LegendTitle legendTitle0 = new LegendTitle(xYAreaRenderer2_0);
      legendTitle0.getItemContainer();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((double) cyclicXYItemRenderer0.ZERO, 0.0, 10, 1, legendTitle0);
      xYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0);
      xYPlot0.getDomainAxis((-7));
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator("ynJp", dateFormat0, decimalFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(2579, boxAndWhiskerXYToolTipGenerator0, standardXYURLGenerator0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(8);
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), 2.5E8);
      cyclicXYItemRenderer0.getLegendShape(1319);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      int int0 = 10;
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, xYStepAreaRenderer0);
      xYPlot0.getDomainTickBandPaint();
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(0.0, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, (Paint) null, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      intervalMarker0.notifyListeners(markerChangeEvent0);
      Layer layer0 = Layer.FOREGROUND;
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(4);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      xYItemRendererArray0[0] = (XYItemRenderer) xYStepRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYStepRenderer0;
      combinedDomainXYPlot2.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot1.setFixedRangeAxisSpace((AxisSpace) null);
      combinedDomainXYPlot0.setRangeCrosshairPaint(logAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot2.getRangeAxisLocation();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      DateFormat.getDateInstance();
      DecimalFormatSymbols.getInstance();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(8);
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[6];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer1;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, subCategoryAxis0, logAxis0, areaRenderer0);
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation(1);
      combinedRangeXYPlot0.setDomainAxisLocation(1, axisLocation0, false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-1156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1156) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(217.648533);
      candlestickRenderer0.getBaseLegendTextFont();
      JFreeChart jFreeChart0 = new JFreeChart("345=E4uGDK5F)", standardXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      thermometerPlot0.removeChangeListener(combinedRangeXYPlot0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer((double) candlestickRenderer0.ZERO, false, customXYToolTipGenerator0);
      candlestickRenderer0.getBaseItemLabelPaint();
      thermometerPlot0.setMercuryPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(2);
      MatrixSeries matrixSeries0 = new MatrixSeries("k;0z gH^h$ #\u0000wm", 10, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, valueAxis0, valueAxis0, stackedXYBarRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      combinedRangeXYPlot0.getDomainAxisLocation((-1715));
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.getIndexOf(standardXYItemRenderer0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation1 = categoryPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setDomainAxisLocation(4, axisLocation1, true);
      combinedRangeXYPlot0.setRangeGridlineStroke(categoryPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) standardXYItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(1, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(standardXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.getIndexOf(standardXYItemRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.getDomainCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Hashtable<Format.Field, XYBlockRenderer> hashtable0 = new Hashtable<Format.Field, XYBlockRenderer>();
      Hashtable<AttributedCharacterIterator.Attribute, XYBlockRenderer> hashtable1 = new Hashtable<AttributedCharacterIterator.Attribute, XYBlockRenderer>(hashtable0);
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashMap0);
      JFreeChart jFreeChart0 = new JFreeChart("Requires 'index' >= 0.", font0, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(93, 10);
      bufferedImage0.createGraphics();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, standardXYZToolTipGenerator0, timeSeriesURLGenerator0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext((AffineTransform) null, categoryAxis3D0, point2D_Float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.axis.CategoryAxis3D@0
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 3, simpleTimeZone0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1133.358655971205));
      candlestickRenderer0.getBaseLegendTextFont();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Font) null, thermometerPlot0, false);
      thermometerPlot0.removeChangeListener(jFreeChart0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer((-1107.01681962092), false, customXYToolTipGenerator0);
      Paint paint0 = candlestickRenderer1.getBaseItemLabelPaint();
      thermometerPlot0.setMercuryPaint(paint0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(500);
      XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, valueAxis0, valueAxis0, stackedXYBarRenderer0);
      StandardXYBarPainter standardXYBarPainter0 = new StandardXYBarPainter();
      XYBarRenderer.setDefaultBarPainter(standardXYBarPainter0);
      xYPlot0.getDomainAxisLocation(6);
      xYPlot0.isRangePannable();
      ValueMarker valueMarker0 = new ValueMarker(0, xYPlot0.DEFAULT_BACKGROUND_PAINT, candlestickRenderer1.DEFAULT_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      Color color0 = (Color)meterPlot0.getDialBackgroundPaint();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      color0.getColorComponents(floatArray0);
      xYPlot0.getQuadrantOrigin();
      xYPlot0.setDomainMinorGridlinePaint(color0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      xYPlot0.setDomainAxisLocation(0, axisLocation0, true);
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MeterPlot meterPlot0 = new MeterPlot();
      Paint paint0 = meterPlot0.getDialBackgroundPaint();
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(paint0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(10);
      combinedDomainXYPlot0.setDomainAxisLocation(0, axisLocation0, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, true);
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      defaultValueDataset0.addChangeListener(combinedRangeXYPlot0);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      stackedXYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(false);
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      LegendTitle legendTitle0 = new LegendTitle(ringPlot0);
      legendTitle0.getItemContainer();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.7853981633974483, 1.0F, 1.0F, 1.0F, legendTitle0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0);
      combinedRangeXYPlot0.getDomainAxis(589);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) deviationRenderer0;
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      xYItemRendererArray0[1] = (XYItemRenderer) xYAreaRenderer2_0;
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1271);
      xYItemRendererArray0[2] = (XYItemRenderer) cyclicXYItemRenderer0;
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYBarRenderer0;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      xYItemRendererArray0[4] = (XYItemRenderer) xYDifferenceRenderer0;
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator("", dateFormat0, decimalFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(8, boxAndWhiskerXYToolTipGenerator0, standardXYURLGenerator0);
      xYItemRendererArray0[5] = (XYItemRenderer) xYStepAreaRenderer0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(3);
      xYItemRendererArray0[6] = (XYItemRenderer) stackedXYAreaRenderer0;
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      xYItemRendererArray0[7] = (XYItemRenderer) xYDifferenceRenderer1;
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      xYItemRendererArray0[8] = (XYItemRenderer) clusteredXYBarRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.getDomainCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1319);
      assertNotNull(cyclicXYItemRenderer0);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotImages());
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertNotNull(stackedXYBarRenderer0);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      assertNotNull(xYDifferenceRenderer0);
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDifferenceRenderer0.getBaseCreateEntities());
      assertFalse(xYDifferenceRenderer0.getRoundXCoordinates());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDifferenceRenderer0.getShapesVisible());
      assertFalse(xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertTrue(xYDifferenceRenderer0.getBaseSeriesVisible());
      assertTrue(xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance();
      assertNotNull(simpleDateFormat0);
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      assertNotNull(decimalFormatSymbols0);
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator("ynJp", simpleDateFormat0, decimalFormat0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(2579, boxAndWhiskerXYToolTipGenerator0, standardXYURLGenerator0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(8);
      XYDifferenceRenderer xYDifferenceRenderer1 = new XYDifferenceRenderer();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[6];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDifferenceRenderer1;
      xYItemRendererArray0[1] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYBarRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYBarRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) stackedXYAreaRenderer0;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.getLegendTextPaint(2);
      xYItemRendererArray0[5] = (XYItemRenderer) xYStepRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertNotNull(intervalMarker0);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Marker marker0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainCrosshairStroke();
      assertNotNull(basicStroke0);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertNull(collection0);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      Color color0 = DebugGraphics.flashColor();
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65536), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getRed());
      
      combinedRangeXYPlot0.setRangeTickBandPaint(color0);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-65536), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertNotNull(xYShapeAnnotation0);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator();
      assertNotNull(standardXYURLGenerator0);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer((XYToolTipGenerator) null, standardXYURLGenerator0);
      assertNotNull(xYStepRenderer0);
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      boolean boolean0 = xYStepRenderer0.removeAnnotation(xYShapeAnnotation0);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setRenderer(4, (XYItemRenderer) xYStepRenderer0);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset((-1156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1156 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      boolean boolean0 = xYPlot0.canSelectByPoint();
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(boolean0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      int int0 = 49;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 49, (-402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -402
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      xYPlot0.setDataset(947, (XYDataset) yIntervalSeriesCollection0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(948, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker((-2879.96));
      assertNotNull(valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-2879.96), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      valueMarker0.setLabelPaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(948, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-2879.96), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = xYPlot0.removeRangeMarker(2579, (Marker) valueMarker0, layer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(948, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-2879.96), valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      xYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, (-3368), layer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(948, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ValueMarker valueMarker1 = new ValueMarker(10);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertNotNull(valueMarker1);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(10.0, valueMarker1.getValue(), 0.01);
      assertNull(valueMarker1.getLabel());
      
      valueMarker1.setPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(948, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(10.0, valueMarker1.getValue(), 0.01);
      assertNull(valueMarker1.getLabel());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(valueMarker1, valueMarker0);
      
      boolean boolean1 = xYPlot0.removeRangeMarker((Marker) valueMarker1);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertTrue(boolean1 == boolean0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(948, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals(10.0, valueMarker1.getValue(), 0.01);
      assertNull(valueMarker1.getLabel());
      assertFalse(boolean1);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(valueMarker1, valueMarker0);
      
      xYPlot0.clearDomainMarkers();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(948, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      Paint paint0 = xYPlot0.getRangeTickBandPaint();
      assertNull(paint0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(948, xYPlot0.getDatasetCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        xYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      MeterPlot meterPlot0 = new MeterPlot();
      assertNotNull(meterPlot0);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.isSubplot());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      Color color0 = (Color)meterPlot0.getDialBackgroundPaint();
      assertNotNull(color0);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.isSubplot());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      xYPlot0.setDomainMinorGridlinePaint(color0);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertFalse(meterPlot0.isSubplot());
      assertFalse(meterPlot0.getDrawBorder());
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.isNotify());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      int int0 = 0;
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      boolean boolean0 = true;
      xYPlot0.setDomainAxisLocation(0, axisLocation0, true);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYStepRenderer0.DEFAULT_SHAPE, xYStepRenderer0.DEFAULT_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertNotNull(xYShapeAnnotation0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = xYStepRenderer0.removeAnnotation(xYShapeAnnotation0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertFalse(boolean0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderer((-2898), (XYItemRenderer) xYStepRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertNotNull(thermometerPlot0);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertNotNull(numberAxis0);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      assertNotNull(xYAreaRenderer2_0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis0, numberAxis0, xYAreaRenderer2_0);
      assertNotNull(xYPlot0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation();
      assertNotNull(axisLocation0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      xYPlot0.setRangeAxisLocation(axisLocation0, true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Color color0 = (Color)xYPlot0.getRangeZeroBaselinePaint();
      assertNotNull(color0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      xYPlot0.setRangeMinorGridlinesVisible(false);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      defaultValueDataset0.addChangeListener(xYPlot0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      xYAreaRenderer2_0.setAutoPopulateSeriesFillPaint(true);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      
      LegendTitle legendTitle0 = new LegendTitle(xYAreaRenderer2_0);
      assertNotNull(legendTitle0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertTrue(legendTitle0.isVisible());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertNull(legendTitle0.getID());
      assertTrue(legendTitle0.visible);
      
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      assertNotNull(blockContainer0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertTrue(legendTitle0.isVisible());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertTrue(legendTitle0.visible);
      
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(2.0F, 10, 0.0, 1.7976931348623157E308, blockContainer0);
      assertNotNull(xYDrawableAnnotation0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(legendTitle0.getNotify());
      assertTrue(legendTitle0.isVisible());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(xYDrawableAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertTrue(legendTitle0.visible);
      
      xYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(legendTitle0.getNotify());
      assertTrue(legendTitle0.isVisible());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(xYDrawableAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(legendTitle0.visible);
      
      ValueAxis valueAxis0 = xYPlot0.getDomainAxis(2);
      assertNull(valueAxis0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      combinedRangeXYPlot0.getIndexOf(standardXYItemRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      combinedRangeXYPlot0.getDataRange(cyclicNumberAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.getRangeAxisEdge();
      Stroke stroke0 = combinedDomainXYPlot0.getOutlineStroke();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, stroke0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(true);
      assertTrue(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = 188;
      Stroke stroke0 = combinedRangeXYPlot0.getDomainCrosshairStroke();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(10, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, stroke0, (-147.4434F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Paint paint0 = meterPlot0.getNeedlePaint();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(paint0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      int int0 = (-557);
      double double0 = 3562.654;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1, (-557), (double) 270, 3562.654, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (1) and height (-557) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("org.jfree.chart.plot.LocalizationBundle");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToDomainAxis((-458), (-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis(") should be in the range 0 to 3.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      double double0 = 10.0;
      JFreeChart jFreeChart0 = new JFreeChart(") should be in the range 0 to 3.", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ScrollPane scrollPane0 = null;
      try {
        scrollPane0 = new ScrollPane(10);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 0, byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (0) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-94), 412.13791777108, 4.0);
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      // Undeclared exception!
      try { 
        affineTransformOp0.filter((BufferedImage) null, (BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // src image is null
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(0, (Marker) intervalMarker0, layer0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis((-99));
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setWeight(0);
      double double0 = (-37.5778);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      int int0 = (-1876);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo((-1876));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
